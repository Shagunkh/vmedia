<% layout("/layouts/boilerplate") %>

  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: Arial, sans-serif;
    }

    html,
    body {
      height: 100%;
      overflow: hidden;
    }

    .full-container {
      display: grid;
      grid-template-areas:
        "header header header"
        "sidebar1 main sidebar2";
      grid-template-columns: 1fr 3fr 1fr;
      grid-template-rows: 70px 1fr;
      height: 100vh;
    }

    .header {
      grid-area: header;
      z-index: 1000;
    }

    .navbar {
      background-color: #000 !important;
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      height: 70px;
      z-index: 1000;
    }

    .sidebar1 {
      grid-area: sidebar1;
      background-color: #1c1c1c;
      color: white;
      padding: 20px;
      font-size: 18px;

      height: calc(100vh - 70px);
      position: sticky;
      top: 70px;
      position: relative;
      overflow-y: scroll;
      scrollbar-width: none;
      -ms-overflow-style: none;
    }

    .sidebar2 {
      grid-area: sidebar2;
      background-color: #1c1c1c;
      color: white;
      padding: 20px;
      font-size: 18px;

      height: calc(100vh - 70px);
      top: 70px;

      position: relative;
      overflow-y: scroll;
      scrollbar-width: none;
      -ms-overflow-style: none;
    }

    .main {
      grid-area: main;
      background-color: black;
      color: white;
      padding-top: 0;
      margin-top: 0;
      height: calc(100vh - 70px);
      position: relative;
      overflow-y: scroll;
      scrollbar-width: none;
      -ms-overflow-style: none;
    }

    .main::-webkit-scrollbar {
      display: none;
    }

    .chat-button-container {
      position: fixed;
      /* Use fixed to keep it visible even when scrolling */
      bottom: 30px;
      right: 30px;
      z-index: 100;
      display: flex;
      justify-content: flex-end;
      pointer-events: none;
      /* Prevents the container from blocking clicks elsewhere */
    }

    .chat-button-container .btn {
      pointer-events: auto;
      /* Ensures the button itself is clickable */
      border-radius: 50%;
      width: 56px;
      height: 56px;
      display: flex;
      justify-content: center;
      align-items: center;
      font-size: 1.7rem;
      box-shadow: 0 4px 16px rgba(0, 0, 0, 0.18);
      background: #0d6efd;
      color: #fff;
      border: none;
      transition: background 0.2s;
    }

    .chat-button-container .btn:hover {
      background: #3498db;
      color: #fff;
    }

    .sidebar1,
    .sidebar2 {
      padding: 20px;
      background-color: #1c1c1c;
      color: white;
      font-size: 18px;
      /* font-weight: bold; */
      height: calc(100vh - 70px);
      overflow-y: auto;
      scrollbar-width: none;
      -ms-overflow-style: none;
      position: sticky;
      top: 70px;
    }

    /* Enhanced Sidebar Styling */
    .sidebar1 {
      padding: 20px;
      background-color: #1c1c1c;
      color: white;
      font-size: 18px;
      height: calc(100vh - 70px);
      overflow-y: auto;
      scrollbar-width: none;
      -ms-overflow-style: none;
      position: sticky;
      top: 70px;
      border-right: 1px solid #333;
      box-shadow: 2px 0 10px rgba(0, 0, 0, 0.3);
    }

    /* Hide scrollbar but maintain functionality */
    .sidebar1::-webkit-scrollbar {
      display: none;
    }

    /* Heading styling */
    .sidebar1 h4 {
      font-size: 22px;
      letter-spacing: 1px;
      margin-bottom: 20px;
      padding-bottom: 12px;
      border-bottom: 2px solid #3498db;
      text-transform: uppercase;
    }

    /* Create proper list styling */
    .sidebar1 ul {
      list-style-type: none;
      padding: 0;
      margin: 0;
    }

    .sidebar1 li {
      padding: 12px 10px;
      margin-bottom: 8px;
      border-radius: 6px;
      transition: all 0.2s ease;
      display: flex;
      align-items: center;
    }

    /* Hover effect for list items */
    .sidebar1 li:hover {
      background-color: #2c2c2c;
      transform: translateX(5px);
      color: #3498db;
      cursor: pointer;
    }

    /* Add icons before list items */
    .sidebar1 li:before {
      content: "â€¢";
      color: #3498db;
      font-weight: bold;
      margin-right: 10px;
      font-size: 20px;
    }

    /* Create sections with subtle separators */
    .sidebar1 li:nth-child(5n) {
      margin-bottom: 15px;
      border-bottom: 1px solid #333;
      padding-bottom: 15px;
    }

    .feed-title {
      font-size: 1.5rem;
      margin-bottom: 18px;
      font-weight: 600;
      letter-spacing: 1px;
    }

    .feed-container {
      display: flex;
      flex-direction: column;
      gap: 32px;
      padding-bottom: 40px;
      align-items: center;
      /* centers the posts horizontally */
    }

    .feed-post {
      width: 100%;
      max-width: 1100px;
      /* Increase this from 900px to something larger */
      background: #181818;
      border-radius: 15px;
      box-shadow: 0 2px 16px rgba(0, 0, 0, 0.18);
      overflow: hidden;
      margin: 0 auto;
      border: 1px solid #272727;
    }

    .feed-header {
      display: flex;
      align-items: center;
      padding: 16px;
      gap: 12px;
    }

    .feed-avatar {
      width: 48px;
      height: 48px;
      border-radius: 50%;
      border: 2px solid #3498db;
      object-fit: cover;
    }

    .feed-username {
      font-weight: 600;
      color: #fff;
    }

    .feed-time {
      margin-left: auto;
      font-size: 0.9em;
      color: #aaa;
    }

    .feed-image {
      width: 100%;
      height: 340px;
      object-fit: cover;
      background: #222;
    }

    .feed-actions {
      display: flex;
      gap: 18px;
      padding: 12px 18px;
      font-size: 1.5em;
      color: #eee;
    }

    .feed-actions i:hover {
      color: #ff5e5e;
      cursor: pointer;
    }

    .feed-caption {
      padding: 0 18px 10px 18px;
      color: #ddd;
      font-size: 1em;
    }

    .feed-caption .feed-username {
      color: #fff;
      margin-right: 8px;
    }

    .feed-comments {
      padding: 0 18px 12px 18px;
      color: #bbb;
      font-size: 0.97em;
      display: flex;
      flex-direction: column;
      gap: 4px;
    }

    .feed-comment b {
      color: #fff;
    }

    .create-post-button-container {
      position: fixed;
      left: 0;
      right: 0;
      bottom: 20px;
      display: flex;
      justify-content: center;
      z-index: 10;
      pointer-events: none;
    }

    .create-post-button-container .btn {
      pointer-events: auto;
      width: 50px;
      height: 50px;
      border-radius: 50%;
      background: linear-gradient(90deg, #00d8ff, #008cff);

      color: white;
      font-size: 24px;
      border: none;
      display: flex;
      align-items: center;
      justify-content: center;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
      transition: background-color 0.3s ease;
    }

    .create-post-button-container .btn:hover {
      background-color: #218838;
      /* Darker green on hover */
    }

    .feed-title {
      position: sticky;
      top: 0;
      background: #000000;
      /* Match your .main/feed-post background */
      z-index: 5;
      padding-top: 10px;
      padding-bottom: 10px;
      font-size: 1.5rem;
      font-weight: 600;
      letter-spacing: 1px;

      /* Optional: border or shadow for more separation */
      border-bottom: 1px solid #000000;
    }

    .fa-plus {
      font-size: larger;
    }

    .glow-button {
      box-shadow: 0 0 10px #07b5ff, 0 0 20px #2ee7ff;
      transition: box-shadow 0.3s ease;
    }

    .glow-button:hover {
      box-shadow: 0 0 15px #19ccef, 0 0 25px #07f7ff;
    }


    .hidden {
  display: none !important;
}


    @media (max-width: 700px) {
      .feed-post {
        max-width: 100%;
      }

      .feed-image {
        height: 220px;
      }
    }

    @media (max-width: 768px) {
      .full-container {
        grid-template-areas:
          "header"
          "sidebar1"
          "main"
          "sidebar2";
        grid-template-columns: 1fr;
        grid-template-rows: 70px auto 1fr auto;
      }

      .sidebar1,
      .sidebar2 {
        height: auto;
        position: static;
      }

      .main {
        height: auto;
      }
      
    }
    /* Improve modal appearance */
.modal-content {
  border-radius: 15px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
  border: none;
    border-color: #ffffff;
}

.modal-header {
  background-color: #112a5e;
  color: white;
  border-top-left-radius: 15px;
  border-top-right-radius: 15px;
    border-color: #000;
}

.modal-title  {
  font-weight: bold;
  text-align: center;
  
}


.modal-body {
  color: white;
  padding: 2rem;
  background-color: #141313;
}

.modal-footer {

  background-color:  #141313;
  border-bottom-left-radius: 15px;
  border-bottom-right-radius: 15px;
  border-color: #000;
}

.form-label {
  font-weight: 500;
}

.form-control {
  border-radius: 10px;
  box-shadow: none;
  transition: border-color 0.2s ease-in-out;
}

.form-control:focus {
  border-color: #0d6efd;
  box-shadow: 0 0 0 0.15rem rgba(13, 110, 253, 0.25);
}

.btn-primary {
  border-radius: 8px;
  padding: 0.4rem 1.2rem;
  font-weight: 500;
}

.btn-secondary {
  border-radius: 8px;
  padding: 0.4rem 1.2rem;
}
.btn-close{
  color: white;
}
.modal-content {
    background: var(--card-bg);
    border: none;
    border-radius: 12px;
    box-shadow: 0 10px 25px rgba(0, 140, 255, 0.2);
    overflow: hidden;
  }

  .modal-header {
    border-bottom: 1px solid rgba(0, 216, 255, 0.2);
    background: linear-gradient(90deg, rgba(30, 193, 222, 0.1), rgba(0, 140, 255, 0.1));
    padding: 1.2rem 1.5rem;
  }

  .modal-title {
    font-weight: 600;
    letter-spacing: 0.5px;
    background: linear-gradient(90deg, var(--primary), var(--secondary));
    -webkit-background-clip: text;
    background-clip: text;
    color: white;
    text-shadow: 0 2px 10px rgba(0, 216, 255, 0.3);
  }

  .btn-close.btn-close-white {
    filter: invert(1) sepia(1) saturate(5) hue-rotate(175deg);
    opacity: 0.8;
    transition: all 0.3s ease;
  }

  .btn-close.btn-close-white:hover {
    opacity: 1;
    transform: rotate(90deg);
  }

  .modal-body {
    padding: 1.5rem;
  }

  /* Form Elements */
  .form-control {
    background-color: rgba(26, 34, 56, 0.7);
    border: 1px solid rgba(0, 216, 255, 0.3);
    color: white;
    border-radius: 8px;
    padding: 0.75rem 1rem;
    transition: all 0.3s ease;
  }

  .form-control:focus {
    background-color: rgba(26, 34, 56, 0.9);
    border-color: var(--primary);
    box-shadow: 0 0 0 0.25rem rgba(0, 216, 255, 0.2);
    color: white;
  }

  .form-label {
    color: white;
    font-weight: 500;
    margin-bottom: 0.5rem;
    display: block;
  }

  /* Buttons */
  .modal-footer {
    border-top: 1px solid rgba(0, 216, 255, 0.2);
    padding: 1rem 1.5rem;
  }

  .btn-secondary {
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    color: white;
  }

  .btn-secondary:hover {
    background: rgba(255, 255, 255, 0.1);
    border-color: rgba(255, 255, 255, 0.2);
  }

  .btn-primary {
    background: linear-gradient(90deg, var(--primary), var(--secondary));
    border: none;
    font-weight: 600;
    letter-spacing: 0.5px;
    padding: 0.6rem 1.25rem;
    position: relative;
    overflow: hidden;
    z-index: 1;
  }

  .btn-primary::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(135deg, var(--secondary), var(--primary));
    opacity: 0;
    transition: opacity 0.3s ease;
    z-index: -1;
  }

  .btn-primary:hover::before {
    opacity: 1;
  }
  body {
  margin: 0;
  padding: 0;
}

  /* Chat Modal Specific Styles */
  #chatModal .modal-content {
    border: 1px solid rgba(0, 216, 255, 0.3);
  }

  #chatWindow {
    padding: 0.5rem;
    scrollbar-width: thin;
    scrollbar-color: var(--primary) transparent;
  }

  #chatWindow::-webkit-scrollbar {
    width: 6px;
  }

  #chatWindow::-webkit-scrollbar-thumb {
    background-color: var(--primary);
    border-radius: 3px;
  }

  .chat-message {
    background: rgba(0, 216, 255, 0.1);
    border-left: 3px solid var(--primary);
    border-radius: 0 8px 8px 0;
    padding: 0.75rem 1rem;
    margin-bottom: 0.75rem;
    animation: fadeIn 0.3s ease-out;
  }

  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(5px); }
    to { opacity: 1; transform: translateY(0); }
  }

  /* Input Group */
  .input-group {
    border-radius: 8px;
    overflow: hidden;
  }

  .input-group .form-control :placeholder-shown {
    border-radius: 8px 0 0 8px;
    border-right: none;
    color:white;
  }

  .input-group .btn {
    border-radius: 0 8px 8px 0;
  }

  /* Responsive Adjustments */
  @media (max-width: 768px) {
    .modal-dialog {
      margin: 0.5rem;
    }
    
    .modal-content {
      border-radius: 8px;
    }
  }
  .form-control::placeholder {
  color: rgba(255, 255, 255, 0.7) !important; /* Semi-transparent white */
  opacity: 1; /* Ensure full visibility */
}

/* For better browser compatibility */
.form-control::-webkit-input-placeholder { /* Chrome/Edge/Safari */
  color: rgba(255, 255, 255, 0.7) !important;
}
.form-control::-moz-placeholder { /* Firefox 19+ */
  color: rgba(255, 255, 255, 0.7) !important;
  opacity: 1;
}
.form-control:-ms-input-placeholder { /* IE 10-11 */
  color: rgba(255, 255, 255, 0.7) !important;
}
.form-control:-moz-placeholder { /* Firefox 18- */
  color: rgba(255, 255, 255, 0.7) !important;
  opacity: 1;
}

.feed-header {
    display: flex;
    align-items: center;
    padding: 16px 20px;
    gap: 12px;
    background: rgba(30, 30, 30, 0.8);
    backdrop-filter: blur(10px);
    border-bottom: 1px solid #2e2e2e;
}

.feed-avatar {
    width: 48px;
    height: 48px;
    border-radius: 50%;
    border: 2px solid #00d8ff;
    object-fit: cover;
    transition: all 0.3s ease;
}

.feed-avatar:hover {
    transform: scale(1.05);
    box-shadow: 0 0 15px rgba(0, 216, 255, 0.5);
}

.feed-username {
    font-weight: 600;
    color: #fff;
    font-size: 1.05rem;
}

.feed-time {
    margin-left: auto;
    font-size: 0.85em;
    color: #aaa;
    font-weight: 300;
}


.feed-actions {
    display: flex;
    gap: 18px;
    padding: 12px 20px;
    font-size: 1.5em;
    color: #eee;
    background: rgba(20, 20, 20, 0.7);
    backdrop-filter: blur(5px);
}

.feed-actions .btn {
    transition: all 0.2s ease;
    border-radius: 8px;
    padding: 6px 12px;
}

.feed-actions .btn:hover {
    transform: translateY(-2px);
}

.feed-actions .btn-outline-secondary:hover {
    background: rgba(255, 255, 255, 0.1);
    border-color: rgba(255, 255, 255, 0.2);
}

.feed-actions .btn-danger {
    background: rgba(255, 80, 80, 0.15);
}

.like-count, .comment-count {
    font-size: 0.85rem;
    margin-left: 6px;
    vertical-align: middle;
    color: #ccc;
    font-weight: 500;
}
/* Comments Modal Styling */
#commentsModal .modal-content {
    background: #1a1a1a;
    border: 1px solid #2e2e2e;
    border-radius: 12px;
    overflow: hidden;
}

#commentsModal .modal-header {
    background: linear-gradient(90deg, rgba(0,140,255,0.1), rgba(0,216,255,0.1));
    border-bottom: 1px solid rgba(0, 216, 255, 0.2);
    padding: 1rem 1.5rem;
}

#commentsModal .modal-title {
    font-weight: 600;
    letter-spacing: 0.5px;
    color: #00d8ff;
    text-shadow: 0 2px 10px rgba(0, 216, 255, 0.3);
}

#commentsModal .modal-body {
    padding: 0;
    max-height: 60vh;
    overflow-y: auto;
    scrollbar-width: thin;
    scrollbar-color: #00d8ff transparent;
}

#commentsModal .modal-body::-webkit-scrollbar {
    width: 6px;
}

#commentsModal .modal-body::-webkit-scrollbar-thumb {
    background-color: #00d8ff;
    border-radius: 3px;
}

#commentsModal .modal-footer {
    background: rgba(20, 20, 20, 0.9);
    border-top: 1px solid #2e2e2e;
    padding: 1rem;
}

/* Comment Cards */
.comment-card {
    background: rgba(210, 13, 13, 0.7) !important;
    border-radius: 10px;
    margin-bottom: 16px;
    border: 1px solid #2e2e2e;
    transition: all 0.3s ease;
    overflow: hidden;
}

.comment-card:hover {
    border-color: rgba(0, 216, 255, 0.3);
    box-shadow: 0 4px 15px rgba(0, 140, 255, 0.1);
}

.comment-header {
    display: flex;
    align-items: center;
    padding: 12px 16px;
    background: rgba(20, 20, 20, 0.5);
    border-bottom: 1px solid #2e2e2e;
}

.comment-user-avatar {
    width: 36px;
    height: 36px;
    border-radius: 50%;
    border: 2px solid #00d8ff;
    object-fit: cover;
    margin-right: 12px;
}

.comment-user-name {
    font-weight: 600;
    color: #fff;
    font-size: 0.95rem;
}

.comment-time {
    margin-left: auto;
    font-size: 0.75rem;
    color: #aaa;
}

.comment-text {
    padding: 16px;
    color: #e0e0e0;
    line-height: 1.5;
    font-size: 0.95rem;
}

.comment-actions {
    display: flex;
    align-items: center;
    padding: 0 16px 12px;
    gap: 15px;
}

.comment-action-btn {
    background: transparent;
    border: none;
    color: #aaa;
    font-size: 0.9rem;
    display: flex;
    align-items: center;
    cursor: pointer;
    transition: all 0.2s ease;
}

.comment-action-btn:hover {
    color: #00d8ff;
    transform: translateY(-1px);
}

.comment-action-btn i {
    margin-right: 5px;
}

.like-count, .reply-count {
    font-size: 0.8rem;
    margin-left: 3px;
}

/* Reply Form */
.reply-form {
    padding: 0 16px 16px;
    display: none;
}

.reply-input-group {
    display: flex;
    gap: 10px;
}

.reply-input {
    flex-grow: 1;
    background: rgba(40, 40, 40, 0.7);
    border: 1px solid #3e3e3e;
    border-radius: 20px;
    padding: 8px 15px;
    color: #fff;
    font-size: 0.9rem;
    transition: all 0.3s ease;
}

.reply-input:focus {
    border-color: #00d8ff;
    box-shadow: 0 0 0 2px rgba(0, 216, 255, 0.2);
    outline: none;
}

.post-reply-btn {
    background: linear-gradient(90deg, #00d8ff, #008cff);
    border: none;
    border-radius: 20px;
    padding: 8px 20px;
    color: white;
    font-weight: 500;
    font-size: 0.9rem;
    transition: all 0.3s ease;
}

.post-reply-btn:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 10px rgba(0, 140, 255, 0.3);
}

/* Replies Section */
.replies-container {
    margin-top: 10px;
    padding-left: 20px;
    border-left: 2px solid rgba(0, 216, 255, 0.2);
    display: none;
}

.reply-item {
    padding: 12px 0;
    border-bottom: 1px dashed rgba(255, 255, 255, 0.05);
}

.reply-item:last-child {
    border-bottom: none;
}

.reply-header {
    display: flex;
    align-items: center;
    margin-bottom: 6px;
}

.reply-user-avatar {
    width: 28px;
    height: 28px;
    border-radius: 50%;
    border: 1px solid #00d8ff;
    object-fit: cover;
    margin-right: 10px;
}

.reply-user-name {
    font-weight: 600;
    color: #fff;
    font-size: 0.85rem;
}

.reply-time {
    margin-left: auto;
    font-size: 0.7rem;
    color: #aaa;
}

.reply-text {
    color: #d0d0d0;
    font-size: 0.9rem;
    line-height: 1.4;
    margin-bottom: 6px;
}

.reply-actions {
    display: flex;
    align-items: center;
    gap: 10px;
}

.reply-action-btn {
    background: transparent;
    border: none;
    color: #aaa;
    font-size: 0.8rem;
    display: flex;
    align-items: center;
    cursor: pointer;
    transition: all 0.2s ease;
}

.reply-action-btn:hover {
    color: #00d8ff;
}

/* Toggle Replies Button */
.toggle-replies-btn {
    background: transparent;
    border: none;
    color: #00d8ff;
    font-size: 0.85rem;
    display: flex;
    align-items: center;
    cursor: pointer;
    transition: all 0.2s ease;
    margin-left: auto;
}

.toggle-replies-btn i {
    margin-right: 5px;
    transition: transform 0.2s ease;
}

.toggle-replies-btn[data-expanded="true"] i {
    transform: rotate(180deg);
}

/* Comment Input */
#commentText {
    background: rgba(40, 40, 40, 0.7);
    border: 1px solid #3e3e3e;
    border-radius: 20px;
    padding: 10px 15px;
    color: #fff;
    transition: all 0.3s ease;
}

#commentText:focus {
    border-color: #00d8ff;
    box-shadow: 0 0 0 2px rgba(0, 216, 255, 0.2);
    outline: none;
}

#postCommentBtn {
    background: linear-gradient(90deg, #00d8ff, #008cff);
    border: none;
    border-radius: 20px;
    padding: 10px 20px;
    margin-left: 10px;
    transition: all 0.3s ease;
}

#postCommentBtn:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 10px rgba(0, 140, 255, 0.3);
}

/* Comment Preview in Feed */
.comment-preview {
    padding: 0 16px 12px;
    background: rgba(25, 25, 25, 0.7);
}

.comment-preview-item {
    padding: 8px 0;
    border-bottom: 1px dashed rgba(255, 255, 255, 0.05);
}

.comment-preview-item:last-child {
    border-bottom: none;
}

.view-all-comments {
    display: inline-block;
    margin-top: 8px;
    color: #00d8ff !important;
    font-size: 0.85rem;
    text-decoration: none;
    transition: all 0.2s ease;
}

.view-all-comments:hover {
    color: #00b4d8 !important;
    text-decoration: underline;
}

/* Animations */
@keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
}

.comment-card {
    animation: fadeIn 0.3s ease-out forwards;
}

.reply-item {
    animation: fadeIn 0.3s ease-out forwards;
}
/* .btn blusi{
  background: linear-gradient(90deg, #00d8ff, #008cff);;
} */
 .blusi{
    background-color: linear-gradient(90deg, #00d8ff, #008cff);
 }
 .sidebar1 {
  background:rgba(0, 0, 0, 0.7);
  color: white;
  padding: 20px;
  font-size: 18px;
  height: calc(100vh - 70px);
  position: sticky;
  top: 70px;
  overflow-y: auto;
  scrollbar-width: none;
  -ms-overflow-style: none;
  border-right: 1px solid rgba(0, 216, 255, 0.1);
  box-shadow: 2px 0 15px rgba(0, 0, 0, 0.3);
}

.sidebar1::-webkit-scrollbar {
  display: none;
}

.sidebar1 h5 {
  font-size: 1.4rem;
  margin-bottom: 25px;
  padding-bottom: 12px;
  border-bottom: 2px solid #00d8ff;
  text-align: center;
  letter-spacing: 1px;
  text-transform: uppercase;
  color: #00d8ff;
  text-shadow: 0 0 10px rgba(0, 216, 255, 0.3);
}

.sidebar1 ul {
  list-style-type: none;
  padding: 0;
  margin: 0;
}

.sidebar1 li {
  padding: 14px 16px;
  margin-bottom: 8px;
  border-radius: 8px;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  position: relative;
  overflow: hidden;
   background-color: #1c1c1c;
  border-left: 3px solid transparent;
}

.sidebar1 li:hover {
  background: rgba(0, 216, 255, 0.1);
  transform: translateX(5px);
  border-left: 3px solid #00d8ff;
  box-shadow: 0 5px 15px rgba(0, 216, 255, 0.1);
}

.sidebar1 li a {
  color: #e0e0e0;
  text-decoration: none;
  transition: all 0.3s ease;
  width: 100%;
  display: flex;
  align-items: center;
}

.sidebar1 li:hover a {
  color: #00d8ff;
  text-shadow: 0 0 8px rgba(0, 216, 255, 0.3);
}

.sidebar1 li:before {
  content: "â†’";
  color: #00d8ff;
  margin-right: 12px;
  font-size: 1.2rem;
  transition: all 0.3s ease;
  opacity: 0;
}

.sidebar1 li:hover:before {
  opacity: 1;
  transform: translateX(5px);
}

.sidebar1 li:after {
  content: "";
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(0, 216, 255, 0.1), transparent);
  transition: all 0.6s ease;
}

.sidebar1 li:hover:after {
  left: 100%;
}

/* Section separators */
.sidebar1 li:nth-child(5n) {
  margin-bottom: 20px;
  padding-bottom: 20px;
  border-bottom: 1px solid rgba(0, 216, 255, 0.2);
  position: relative;
}

.sidebar1 li:nth-child(5n):after {
  content: "";
  position: absolute;
  bottom: -10px;
  left: 50%;
  transform: translateX(-50%);
  width: 80%;
  height: 1px;
  background: linear-gradient(90deg, transparent, #00d8ff, transparent);
}

/* Coming soon indicator */
.sidebar1 li:contains("Coming Soon") {
  position: relative;
}

.sidebar1 li:contains("Coming Soon"):after {
  content: "Coming Soon";
  position: absolute;
  right: 10px;
  top: 50%;
  transform: translateY(-50%);
  font-size: 0.7rem;
  background: rgba(0, 216, 255, 0.2);
  color: #00d8ff;
  padding: 2px 6px;
  border-radius: 10px;
}
.sidebar1 {
    background-color: #1c1c1c;
    color: white;
    padding: 20px;
    font-size: 18px;
    height: calc(100vh - 70px);
    position: sticky;
    top: 70px;
    overflow-y: auto;
    scrollbar-width: none;
    -ms-overflow-style: none;
    border-right: 1px solid rgba(0, 216, 255, 0.1);
    box-shadow: 2px 0 15px rgba(0, 0, 0, 0.3);
  }
  .delete-comment-btn, .delete-reply-btn {
    padding: 0.25rem 0.5rem;
    font-size: 0.8rem;
    transition: all 0.2s ease;
}

.delete-comment-btn:hover, .delete-reply-btn:hover {
    background-color: #dc3545 !important;
    color: white !important;
    transform: scale(1.05);
}
/* Mobile-First Responsive Styles */
@media (max-width: 768px) {
  /* Layout adjustments */
  .full-container {
    grid-template-areas:
      "header"
      "main"
      "sidebar1"
      "sidebar2";
    grid-template-columns: 1fr;
    grid-template-rows: auto auto auto auto;
  }

  .sidebar1, 
  .sidebar2 {
    position: static;
    height: auto;
    max-height: 300px;
    overflow-y: auto;
    border-right: none;
    border-bottom: 1px solid rgba(0, 216, 255, 0.1);
    padding: 15px;
  }

  .main {
    height: auto;
    min-height: calc(100vh - 70px);
    padding-bottom: 80px; /* Space for floating buttons */
  }

  /* Feed items */
  .feed-post {
    width: 95%;
    margin: 10px auto;
    border-radius: 12px;
  }

  .feed-image {
    height: 250px;
  }

  .feed-header {
    padding: 12px;
  }

  .feed-avatar {
    width: 40px;
    height: 40px;
  }

  .feed-username {
    font-size: 0.95rem;
  }

  .feed-time {
    font-size: 0.75rem;
  }

  .feed-actions {
    padding: 10px;
    font-size: 1.3em;
  }

  /* Modals */
  .modal-dialog {
    margin: 10px;
  }

  .modal-content {
    border-radius: 12px;
  }

  /* Create post button */
  .create-post-button-container {
    bottom: 70px;
    right: 20px;
    left: auto;
    justify-content: flex-end;
  }

  .create-post-button-container .btn {
    width: 56px;
    height: 56px;
    font-size: 1.5rem;
  }

  /* Chat button */
  .chat-button-container {
    bottom: 22px;
    right: 20px;
    margin-top: -4px;
  }

  /* Sidebar list items */
  .sidebar1 li {
    padding: 10px 12px;
    font-size: 16px;
  }

  /* Comment modal */
  #commentsModal .modal-dialog {
    margin: 10px;
    max-width: 100%;
  }

  #commentsModal .modal-body {
    max-height: 50vh;
  }

  /* Feed title */
  .feed-title {
    padding: 8px 15px;
    font-size: 1.2rem;
    position: sticky;
    top: 0;
    z-index: 10;
    background: rgba(0, 0, 0, 0.9);
    backdrop-filter: blur(5px);
  }

  /* Form elements */
  .form-control {
    padding: 0.65rem 0.9rem;
    font-size: 0.95rem;
  }

  /* Buttons */
  .btn {
    padding: 0.35rem 0.8rem;
    font-size: 0.9rem;
  }

  /* Hide duplicate create post button on mobile */
  .create-post-button-container:nth-of-type(2) {
    display: none;
  }
}

/* Smaller mobile devices (up to 480px) */
@media (max-width: 480px) {
  .feed-image {
    height: 200px;
  }

  .feed-avatar {
    width: 36px;
    height: 36px;
  }

  .feed-username {
    font-size: 0.9rem;
  }

  .feed-time {
    display: none; /* Hide timestamp on very small screens */
  }

  .sidebar1, 
  .sidebar2 {
    padding: 12px;
    font-size: 16px;
  }

  .sidebar1 h5,
  .sidebar2 h5 {
    font-size: 1.2rem;
    margin-bottom: 15px;
  }

  /* Modals */
  .modal-header,
  .modal-footer {
    padding: 1rem;
  }

  .modal-body {
    padding: 1rem;
  }

  /* Comment cards */
  .comment-header {
    padding: 10px 12px;
  }

  .comment-user-avatar {
    width: 32px;
    height: 32px;
  }

  .comment-user-name {
    font-size: 0.85rem;
  }

  .comment-text {
    padding: 12px;
    font-size: 0.9rem;
  }

  /* Chat window */
  #chatWindow {
    max-height: 300px;
  }
}

/* Very small devices (up to 360px) */
@media (max-width: 360px) {
  .feed-image {
    height: 180px;
  }

  .feed-actions {
    gap: 12px;
    font-size: 1.2em;
  }

  .like-count, 
  .comment-count {
    font-size: 0.75rem;
  }

  /* Sidebars */
  .sidebar1 li {
    padding: 8px 10px;
    font-size: 15px;
  }

  /* Modals */
  .modal-title {
    font-size: 1.1rem;
  }
}

/* Orientation-specific adjustments */
@media (max-width: 768px) and (orientation: landscape) {
  .sidebar1,
  .sidebar2 {
    max-height: 200px;
  }

  #commentsModal .modal-body {
    max-height: 40vh;
  }
}

/* Smooth transitions for mobile interactions */
@media (hover: hover) {
  .feed-post,
  .sidebar1 li,
  .btn {
    transition: all 0.25s ease;
  }
}

/* Prevent zoom on input focus */
@media (max-width: 768px) {
  input,
  textarea,
  select {
    font-size: 16px !important;
  }
}

/* iOS specific fixes */
@supports (-webkit-touch-callout: none) {
  /* Prevent elastic scrolling on iOS */
  body {
    overscroll-behavior-y: none;
  }
  
  /* Fix for sticky elements on iOS */
  .feed-title {
    position: -webkit-sticky;
  }
}
@media (max-width: 768px) {
  .full-container {
    grid-template-areas:
      "header"
      "sidebar1"
      "main"
      "sidebar2";
    grid-template-columns: 1fr;
    grid-template-rows: auto auto 1fr auto; /* Changed from fixed heights to auto */
  }

  .sidebar1,
  .sidebar2 {
    height: auto; /* Allow height to adjust to content */
    max-height: 300px; /* Set a reasonable max height */
    overflow-y: auto;
    position: static; /* Remove sticky positioning */
    display: block !important; /* Force display */
  }

  .main {
    height: auto;
    min-height: 60vh; /* Ensure main content area has enough space */
  }
}



/* For mobile view */
@media (max-width: 768px) {
  .create-post-button-container {
    bottom: 140px; /* Position above chat button */
    right: 20px;
  }
  
  .chat-button-container {
    bottom: 200px;
    right: 20px;
  }
  
  /* Hide duplicate create post button */
  .create-post-button-container:nth-of-type(2) {
    display: none;
  }
}
 @media (max-width: 768px) {
    .sidebar1, .sidebar2 {
      display: none !important;
    }
    
    .mobile-footer {
      display: block !important;
      position: fixed;
      bottom: 0;
      left: 0;
      right: 0;
      background-color: #1c1c1c;
      padding: 10px;
      z-index: 1000;
      border-top: 1px solid #333;
    }
    
    .mobile-footer-links {
      display: flex;
      justify-content: space-around;
      flex-wrap: wrap;
    }
    
    .mobile-footer-link {
      color: white;
      text-decoration: none;
      font-size: 12px;
      padding: 5px;
      text-align: center;
      flex: 1 0 25%;
    }
    
    .mobile-footer-link i {
      display: block;
      margin-bottom: 3px;
      font-size: 16px;
    }
    
    .main {
      padding-bottom: 70px; /* Make space for footer */
    }
  }
  
  /* Hide mobile footer on desktop */
  @media (min-width: 769px) {
    .mobile-footer {
      display: none !important;
    }
  }
  
  .mobile-footer {
    display: none;
  }
  /* Add to your existing CSS */
.navbar {
  z-index: 1100; /* Higher than other elements */
}

.dropdown-menu {
  z-index: 1101; /* Higher than navbar */
}

@media (max-width: 768px) {
  .navbar-collapse {
    background-color: #000; /* Match your navbar color */
    padding: 10px;
    margin-top: 5px;
    border-radius: 5px;
  }
  
  .dropdown-menu {
    position: static !important;
    transform: none !important;
    border: none;
    background-color: rgba(0, 0, 0, 0.8);
  }
}


@media (max-width: 768px) {
  .navbar-collapse {
    background-color: #1c1c1c;
    padding: 10px;
    margin-top: 5px;
    border-radius: 5px;
    box-shadow: 0 4px 8px rgba(0,0,0,0.3);
  }
  
  .dropdown-menu {
    position: static !important;
    transform: none !important;
    border: none;
    background-color: rgba(30, 30, 30, 0.95);
    margin-left: 15px;
    margin-top: 5px;
  }
  
  .dropdown-item {
    color: #e0e0e0 !important;
    padding: 8px 15px;
  }
  
  .dropdown-item:hover {
    background-color: rgba(0, 216, 255, 0.1) !important;
  }
}

  </style>

  <body>


    <div class="full-container">


      <div class="sidebar1">
        
        <ul>
          <li><a href="/cgpa" style="color: white; text-decoration: none;">CGPA/GPA Calculator</a></li>

         <li><a href="/tasks" style="color:white; text-decoration:none;">Study Planner</a></li>

          <li><a href="/quiz" style="color: white; text-decoration: none;">Flashcards & Quizlets</a></li>
          
          <li><a href="/api/rooms">Roommate Finder</a></li>
         <li><a href="/confessions" style="color: white; text-decoration: none;">Confessions Wall</a></li>

         
          <li><a href="/lost-and-found" style="color:white; text-decoration: none;">Lost & Found Board</a></li>
         
          <li><a href="/random-chat">Random Chat</a></li>
         
          
           <li><a href="/ffcs" style="color: white; text-decoration: none;">FFCS Planner</a></li>
          <li><a href="/faculty" style="color: white; text-decoration: none;">Faculty Review</a></li>
          
         <li class="nav-item">
  <a href="/api/pyq" class="nav-link">
    Previous Year Papers
  </a>
</li>

          <li><a href="/collab"  style="color: white; text-decoration: none;">Collab Requests </a></li>
           <li>Peer Notes Exchange(Coming Soon)</li>
           <li>Transport Tracker(Coming Soon)</li>
            <li>Event Reminders & RSVPs(Coming Soon)</li>
             <li>Ask a Senior (Mentor Q&A)(Coming Soon)</li>
        </ul>
      </div>


      <div class="main">
        <h5 class="feed-title">Feed</h5>

        <div class="create-post-button-container">
          <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#createPostModal">
            <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#e3e3e3">
              <path d="M440-440H200v-80h240v-240h80v240h240v80H520v240h-80v-240Z" />
            </svg>
          </button>
        </div>
        <div class="create-post-button-container">
          <button class="btn btn-success glow-button" data-bs-toggle="modal" data-bs-target="#createPostModal">
            <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#e3e3e3">
              <path d="M440-440H200v-80h240v-240h80v240h240v80H520v240h-80v-240Z" />
            </svg>
          </button>
        </div>



        <div class="feed-container">
    <% posts.forEach(post => { 
        const userLiked = post.likes.some(like => like.user && like.user._id.equals(currUser?._id));
        const commentsCount = post.comments ? post.comments.length : 0;
    %>
        <div class="feed-post" data-post-id="<%= post._id %>">
            <div class="feed-header">
    <img class="feed-avatar" src="<%= post.user.profilePhoto || '/images/default-avatar.png' %>" alt="User">
    <a href="/users/<%= post.user.username %>" class="feed-username" style="color: inherit; text-decoration: none;">
        <%= post.user.username %>
    </a>
    <span class="feed-time">
        <%= post.createdAt ? new Date(post.createdAt).toLocaleString('en-US', { 
            month: 'short', 
            day: 'numeric',
            hour: '2-digit', 
            minute: '2-digit' 
        }) : '' %>
    </span>
</div>

            <% if (post.imageUrl && post.imageUrl.trim() !== '') { %>
                <img class="feed-image" src="<%= post.imageUrl %>" alt="Feed Image">
            <% } %>
            
           <div class="feed-caption">
    <a href="/users/<%= post.user.username %>" style="color: inherit; text-decoration: none;">
        <span class="feed-username"><%= post.user.username %></span>
    </a>
    <%= post.caption %>
</div>

            <div class="feed-actions">
                <button class="btn btn-sm <%= userLiked ? 'btn-danger' : 'btn-outline-secondary' %> like-btn" 
                        data-post-id="<%= post._id %>">
                    <i class="bi bi-heart<%= userLiked ? '-fill' : '' %>"></i> 
                    <span class="like-count"><%= post.likes.length %></span>
                </button>
                
                <button class="btn btn-sm btn-outline-secondary comment-btn" 
                        data-post-id="<%= post._id %>"
                        data-bs-toggle="modal" 
                        data-bs-target="#commentsModal">
                    <i class="bi bi-chat"></i> 
                    <span class="comment-count"><%= commentsCount %></span>
                </button>
                
            </div>
             
        </div>
    <% }) %>
    
</div>
<button>
      
  </button>
      </div>

      <div class="sidebar2" style="text-align: center;">
        <h5><b>Announcements & Latest Updates</b></h5>
        

      </div>
    </div>
    </div>

    <!-- Create Post Modal -->
    <div class="modal fade" id="createPostModal" tabindex="-1" aria-labelledby="createPostModalLabel"
      aria-hidden="true">
      <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">

          <div class="modal-header">
            <h5 class="modal-title" id="createPostModalLabel">Create New Post</h5>
            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>

          <div class="modal-body">
           <form id="createPostForm" action="/posts" method="POST" enctype="multipart/form-data">
    <div class="mb-3">
        <label for="postCaption" class="form-label">Caption</label>
        <input type="text" class="form-control" id="postCaption" name="caption" required>
    </div>
    <div class="mb-3">
        <label for="postImage" class="form-label">Image</label>
        <input type="file" class="form-control" id="postImage" name="image" accept="image/*">
        <small class="text-muted">Upload an image (JPG, PNG, GIF)</small>
    </div>
</form>
          </div>

          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            <button type="submit" form="createPostForm" class="btn btn-primary">Post</button>
          </div>

        </div>
      </div>
    </div>


    <!-- Chat Modal -->
    <div class="modal fade" id="chatModal" tabindex="-1" aria-labelledby="chatModalLabel" aria-hidden="true">
      <br><br>
      <div class="modal-dialog modal-dialog-scrollable modal-lg">
        <div class="modal-content bg-dark text-white">
          <div class="modal-header">
           <h5 class="modal-title w-100 text-center" id="chatModalLabel">General Chat</h5>

            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <!-- Chat messages can be dynamically added here -->
            <div id="chatWindow" style="max-height: 400px; overflow-y: auto;">

            </div>
            <!-- Input -->
            <!-- Chat Input Section -->
            <div class="mt-3">
              <div class="input-group">
                <input type="text" class="form-control" id="chatInput" placeholder="Type a message..." <%=!currUser
                  ? 'disabled' : '' %> >
                <button class="btn btn-primary" onclick="sendMessage()" <%=!currUser ? 'onclick="redirectToLogin()"'
                  : '' %>>Send</button>
              </div>
            </div>

          </div>
        </div>
      </div>
    </div>
<div class="modal fade" id="commentsModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Comments</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="commentsModalBody" style="background-color: #000000;">
                    <!-- Comments will be loaded here -->
                    <div class="text-center py-3">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="input-group">
                        <input type="text" class="form-control" id="commentText" placeholder="Add a comment..." 
                               <%= !currUser ? 'disabled' : '' %>>
                        <button class="btn btn-primary" id="postCommentBtn" <%= !currUser ? 'disabled' : '' %>>Post</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
<!-- Chat Button (floating action button) -->
<div class="chat-button-container">
  <button class="btn blusi" data-bs-toggle="modal" data-bs-target="#chatModal">
    <i class="bi bi-chat-dots"></i>
  </button>
</div>
<div class="mobile-footer">
  <div class="mobile-footer-links">
    <!-- Existing Links -->
    <a href="/cgpa" class="mobile-footer-link">
      <i class="bi bi-calculator"></i>
      <span>CGPA</span>
    </a>
  
    <a href="/api/rooms" class="mobile-footer-link">
      <i class="bi bi-people"></i>
      <span>Roommates</span>
    </a>
    <a href="/lost-and-found" class="mobile-footer-link">
      <i class="bi bi-search"></i>
      Lost & Found
    </a>
    <a href="/random-chat" class="mobile-footer-link">
      <i class="bi bi-chat-dots"></i>
      Random Chat
    </a>
    <!-- New Links -->
    <a href="/collab" class="mobile-footer-link">
      <i class="bi bi-code-square"></i>
      <span>Project Collab</span>
    </a>
    <a href="/faculty" class="mobile-footer-link">
      <i class="bi bi-person-badge"></i>
      <span>Faculty Review</span>
    </a>
    <a href="/api/pyq" class="mobile-footer-link">
      <i class="bi bi-file-earmark-text"></i>
      <span>PYQs</span>
    </a>
    <a href="/confessions" class="mobile-footer-link">
      <i class="bi bi-chat-square-heart"></i>
      <span>Confessions</span>
    </a>
  </div>
</div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script>
      const socket = io();

     // Store generated colors to ensure consistency
  const userColors = {};

function getUsernameColor(username) {
  if (userColors[username]) return userColors[username];
  let hash = 0;
  for (let i = 0; i < username.length; i++) {
    hash = username.charCodeAt(i) + ((hash << 5) - hash);
  }
  const hue = Math.abs(hash % 360);
  const color = `hsl(${hue}, 60%, 50%)`;
  userColors[username] = color;
  return color;
}


      // Format timestamp (e.g., "10:35 PM")
      function formatTimestamp(timestamp) {
        const date = new Date(timestamp);
        return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
      }

      // Send message to server
      async function sendMessage() {
        const input = document.getElementById('chatInput');
        const message = input.value.trim();
        if (!message) return;

        const username = "<%= currUser ? currUser.username : 'Unknown' %>";
        const timestamp = new Date().toISOString();

        socket.emit('newMessage', { username, text: message, time: timestamp });
        input.value = '';
      }

      // Receive message from server
     socket.on('messageBroadcast', (msg) => {
    const chatWindow = document.getElementById('chatWindow');
    const p = document.createElement('p');
    const color = getUsernameColor(msg.username);
    const time = formatTimestamp(msg.createdAt || Date.now());

    p.innerHTML = `<strong style="color:${color}">${msg.username}</strong> <small style="color:gray;">[${time}]</small>: ${msg.text}`;
    chatWindow.appendChild(p);
    chatWindow.scrollTop = chatWindow.scrollHeight;
  });

      // Load previous messages when chat modal opens
      const chatModal = document.getElementById('chatModal');
  chatModal.addEventListener('shown.bs.modal', () => {
    fetch('/chat?room=general')
      .then(res => res.json())
      .then(messages => {
        const chatWindow = document.getElementById('chatWindow');
        chatWindow.innerHTML = '';
        messages.forEach(msg => {
          const p = document.createElement('p');
          const color = getUsernameColor(msg.username);
          const time = formatTimestamp(msg.createdAt || Date.now());

          p.innerHTML = `<strong style="color:${color}">${msg.username}</strong> <small style="color:gray;">[${time}]</small>: ${msg.text}`;
          chatWindow.appendChild(p);
        });

        chatWindow.scrollTop = chatWindow.scrollHeight;
      });
  });

  let currentPostId = null;
    let currentCommentId = null;

    // Load comments when modal is shown
    document.getElementById('commentsModal').addEventListener('show.bs.modal', function(event) {
        const button = event.relatedTarget;
        currentPostId = button.getAttribute('data-post-id');
        loadComments(currentPostId);
    });

    // Function to load comments
    // Function to load comments
async function loadComments(postId) {
    try {
        const response = await fetch(`/posts/${postId}/comments`);
        
        // Check if the response is OK
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        
        // Check if data exists and has the expected structure
        if (!data || !data.post || !Array.isArray(data.comments)) {
            throw new Error('Invalid response format');
        }

        const { post, comments } = data;
        let commentsHtml = '';
        
        if (comments.length > 0) {
            comments.forEach(comment => {
                // Safely check if user exists and has _id
                const commentUserId = comment.user && comment.user._id ? comment.user._id.toString() : null;
                const currUserId = '<%= currUser?._id %>' || null;
                
                const isLiked = comment.likes && comment.likes.some(like => 
                    like.user && like.user._id === currUserId
                );
                
                const hasReplies = comment.replies && comment.replies.length > 0;
                
                // Check if current user can delete this comment
                const canDelete = currUserId && (
                    currUserId === commentUserId || 
                    currUserId === (post.user && post.user._id ? post.user._id.toString() : null)
                );
                
                commentsHtml += `
                    <div class="card mb-2" data-comment-id="${comment._id}">
                        <div class="card-body">
                            <div class="d-flex justify-content-between">
                                <div class="d-flex align-items-center mb-2">
                                    <img src="${comment.user?.profilePhoto || '/images/default-avatar.png'}" 
                                         class="rounded-circle me-2" 
                                         style="width: 32px; height: 32px; object-fit: cover;">
                                    <strong>${comment.user?.username || 'Unknown'}</strong>
                                </div>
                                <div>
                                    <small class="text-muted me-2">
                                        ${comment.createdAt ? new Date(comment.createdAt).toLocaleString() : ''}
                                    </small>
                                    ${canDelete ? `
                                        <button class="btn btn-sm btn-outline-danger delete-comment-btn">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    ` : ''}
                                </div>
                            </div>
                            <p class="card-text">${comment.text || ''}</p>
                            
                            <div class="d-flex align-items-center">
                                <button class="btn btn-sm ${isLiked ? 'text-danger' : 'text-secondary'} like-comment-btn me-2">
                                    <i class="bi bi-heart${isLiked ? '-fill' : ''}"></i> 
                                    <span class="like-count">${comment.likes?.length || 0}</span>
                                </button>
                                <button class="btn btn-sm text-secondary reply-btn me-2">
                                    <i class="bi bi-reply"></i> Reply
                                </button>
                                ${hasReplies ? `
                                    <button class="btn btn-sm text-primary toggle-replies-btn" data-expanded="false">
                                        <i class="bi bi-chevron-down"></i> Show Replies (${comment.replies.length})
                                    </button>
                                ` : ''}
                            </div>
                            
                            ${hasReplies ? `
                                <div class="replies-container mt-3 ps-3 border-start" style="display: none;">
                                    ${comment.replies.map(reply => {
                                        const replyUserId = reply.user && reply.user._id ? reply.user._id.toString() : null;
                                        const isReplyLiked = reply.likes && reply.likes.some(like => 
                                            like.user && like.user._id === currUserId
                                        );
                                        const canDeleteReply = currUserId && (
                                            currUserId === replyUserId || 
                                            currUserId === commentUserId ||
                                            currUserId === (post.user && post.user._id ? post.user._id.toString() : null)
                                        );
                                        
                                        return `
                                            <div class="mb-2 reply-item" data-reply-id="${reply._id}">
                                                <div class="d-flex justify-content-between">
                                                    <div class="d-flex align-items-center">
                                                        <img src="${reply.user?.profilePhoto || '/images/default-avatar.png'}" 
                                                             class="rounded-circle me-2" 
                                                             style="width: 28px; height: 28px; object-fit: cover;">
                                                        <strong>${reply.user?.username || 'Unknown'}</strong>
                                                    </div>
                                                    <div>
                                                        <small class="text-muted me-2">
                                                            ${reply.createdAt ? new Date(reply.createdAt).toLocaleString() : ''}
                                                        </small>
                                                        ${canDeleteReply ? `
                                                            <button class="btn btn-sm btn-outline-danger delete-reply-btn">
                                                                <i class="bi bi-trash"></i>
                                                            </button>
                                                        ` : ''}
                                                    </div>
                                                </div>
                                                <p>${reply.text || ''}</p>
                                                <button class="btn btn-sm ${isReplyLiked ? 'text-danger' : 'text-secondary'} like-reply-btn">
                                                    <i class="bi bi-heart${isReplyLiked ? '-fill' : ''}"></i> 
                                                    <span class="like-count">${reply.likes?.length || 0}</span>
                                                </button>
                                            </div>
                                        `;
                                    }).join('')}
                                </div>
                            ` : ''}
                        </div>
                    </div>
                `;
            });
        } else {
            commentsHtml = '<p class="text-muted text-center py-3">No comments yet</p>';
        }
        
        document.getElementById('commentsModalBody').innerHTML = commentsHtml;
        setupCommentInteractions();
    } catch (error) {
        console.error('Error loading comments:', error);
        document.getElementById('commentsModalBody').innerHTML = `
            <div class="alert alert-danger">
                Failed to load comments. Please try again.
                ${error.message}
            </div>
        `;
    }
}

// Setup comment interactions (likes, replies)
function setupCommentInteractions() {
    // Like comment
    document.querySelectorAll('.like-comment-btn').forEach(btn => {
        btn.addEventListener('click', async function() {
            const commentId = this.closest('.card').getAttribute('data-comment-id');
            try {
                const response = await fetch(`/posts/${currentPostId}/comments/${commentId}/like`, {
                    method: 'POST'
                });
                
                const result = await response.json();
                
                if (result.success) {
                    const likeCountEl = this.querySelector('.like-count');
                    if (likeCountEl) {
                        likeCountEl.textContent = result.likesCount;
                    }
                    
                    const icon = this.querySelector('i');
                    if (icon) {
                        if (result.isLiked) {
                            this.classList.remove('text-secondary');
                            this.classList.add('text-danger');
                            icon.classList.remove('bi-heart');
                            icon.classList.add('bi-heart-fill');
                        } else {
                            this.classList.remove('text-danger');
                            this.classList.add('text-secondary');
                            icon.classList.remove('bi-heart-fill');
                            icon.classList.add('bi-heart');
                        }
                    }
                }
            } catch (error) {
                console.error('Error liking comment:', error);
            }
        });
    });

    // Toggle replies visibility
    document.querySelectorAll('.toggle-replies-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const card = this.closest('.card');
            const repliesContainer = card.querySelector('.replies-container');
            const isExpanded = this.getAttribute('data-expanded') === 'true';
            
            if (isExpanded) {
                repliesContainer.style.display = 'none';
                this.innerHTML = '<i class="bi bi-chevron-down"></i> Show Replies';
                this.setAttribute('data-expanded', 'false');
            } else {
                repliesContainer.style.display = 'block';
                this.innerHTML = '<i class="bi bi-chevron-up"></i> Hide Replies';
                this.setAttribute('data-expanded', 'true');
            }
        });
    });

    // Show reply form
    document.querySelectorAll('.reply-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const card = this.closest('.card');
            const replyForm = card.querySelector('.reply-form');
            
            // Hide all other reply forms first
            document.querySelectorAll('.reply-form').forEach(form => {
                if (form !== replyForm) {
                    form.style.display = 'none';
                }
            });
            
            // Toggle this reply form
            if (replyForm.style.display === 'none') {
                replyForm.style.display = 'block';
                replyForm.querySelector('.reply-input').focus();
            } else {
                replyForm.style.display = 'none';
            }
        });
    });

    // Post reply
    document.querySelectorAll('.post-reply-btn').forEach(btn => {
        btn.addEventListener('click', async function() {
            const card = this.closest('.card');
            const commentId = card.getAttribute('data-comment-id');
            const replyInput = card.querySelector('.reply-input');
            const replyText = replyInput.value.trim();
            
            if (!replyText) {
                alert('Please enter a reply');
                return;
            }
            
            try {
                const response = await fetch(`/posts/${currentPostId}/comments/${commentId}/replies`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ text: replyText })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    replyInput.value = '';
                    loadComments(currentPostId);
                } else {
                    alert(result.error || 'Failed to post reply');
                }
            } catch (error) {
                console.error('Error posting reply:', error);
                alert('Failed to post reply. Please try again.');
            }
        });
    });
   // Delete comment
 document.querySelectorAll('.delete-comment-btn').forEach(btn => {
                btn.addEventListener('click', async function() {
                    if (!confirm('Are you sure you want to delete this comment?')) {
                        return;
                    }

                    const card = this.closest('.card');
                    const commentId = card.getAttribute('data-comment-id');
                    
                    try {
                        const response = await fetch(`/posts/${currentPostId}/comments/${commentId}`, {
                            method: 'DELETE'
                        });
                        
                        const result = await response.json();
                        
                        if (result.success) {
                            card.remove();
                        } else {
                            alert('Failed to delete comment');
                        }
                    } catch (error) {
                        console.error('Error deleting comment:', error);
                        alert('Failed to delete comment. Please try again.');
                    }
                });
            });

            // Delete reply
            document.querySelectorAll('.delete-reply-btn').forEach(btn => {
                btn.addEventListener('click', async function() {
                    if (!confirm('Are you sure you want to delete this reply?')) {
                        return;
                    }

                    const replyItem = this.closest('.reply-item');
                    const replyId = replyItem.getAttribute('data-reply-id');
                    const commentId = replyItem.closest('.card').getAttribute('data-comment-id');
                    
                    try {
                        const response = await fetch(`/posts/${currentPostId}/comments/${commentId}/replies/${replyId}`, {
                            method: 'DELETE'
                        });
                        
                        const result = await response.json();
                        
                        if (result.success) {
                            replyItem.remove();
                        } else {
                            alert('Failed to delete reply');
                        }
                    } catch (error) {
                        console.error('Error deleting reply:', error);
                        alert('Failed to delete reply. Please try again.');
                    }
                });
            });
        
   document.querySelectorAll('.like-reply-btn').forEach(btn => {
    btn.addEventListener('click', async function() {
        // Element selection
        const replyItem = this.closest('.reply-item');
        const replyId = replyItem.getAttribute('data-reply-id');
        const commentId = replyItem.closest('.card').getAttribute('data-comment-id');
        
        try {
            // API call
            const response = await fetch(`/posts/${currentPostId}/comments/${commentId}/replies/${replyId}/like`, {
                method: 'POST' // Correct method
            });
            
            // Response handling
            const result = await response.json();
            
            if (result.success) {
                // Update like count
                const likeCountEl = this.querySelector('.like-count');
                if (likeCountEl) {
                    likeCountEl.textContent = result.likesCount;
                }
                
                // Update icon state
                const icon = this.querySelector('i');
                if (icon) {
                    if (result.isLiked) {
                        this.classList.remove('text-secondary');
                        this.classList.add('text-danger');
                        icon.classList.remove('bi-heart');
                        icon.classList.add('bi-heart-fill');
                    } else {
                        this.classList.remove('text-danger');
                        this.classList.add('text-secondary');
                        icon.classList.remove('bi-heart-fill');
                        icon.classList.add('bi-heart');
                    }
                }
            }
        } catch (error) {
            console.error('Error liking reply:', error);
        }
    });
});
}

    // Like post
    document.querySelectorAll('.like-btn').forEach(btn => {
        btn.addEventListener('click', async function() {
            const postId = this.getAttribute('data-post-id');
            try {
                const response = await fetch(`/posts/${postId}/like`, {
                    method: 'POST'
                });
                
                const result = await response.json();
                
                if (result.success) {
                    const likeCountEl = this.querySelector('.like-count');
                    if (likeCountEl) {
                        likeCountEl.textContent = result.likesCount;
                    }
                    
                    if (result.isLiked) {
                        this.classList.remove('btn-outline-secondary');
                        this.classList.add('btn-danger');
                        this.querySelector('i').classList.remove('bi-heart');
                        this.querySelector('i').classList.add('bi-heart-fill');
                    } else {
                        this.classList.remove('btn-danger');
                        this.classList.add('btn-outline-secondary');
                        this.querySelector('i').classList.remove('bi-heart-fill');
                        this.querySelector('i').classList.add('bi-heart');
                    }
                }
            } catch (error) {
                console.error('Error liking post:', error);
            }
        });
    });

     document.getElementById('postCommentBtn').addEventListener('click', async function() {
    const commentText = document.getElementById('commentText').value.trim();
    console.log('Attempting to post comment:', { postId: currentPostId, text: commentText });
    
    if (!commentText) {
        alert('Please enter a comment');
        return;
    }
    
    try {
        const response = await fetch(`/posts/${currentPostId}/comments`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('token')}` // Add if using JWT
            },
            body: JSON.stringify({ text: commentText })
        });
        
        console.log('Response status:', response.status);
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const result = await response.json();
        console.log('Comment result:', result);
        
        if (result.success) {
            document.getElementById('commentText').value = '';
            loadComments(currentPostId);
        } else {
            alert(result.error || 'Failed to post comment');
        }
    } catch (error) {
        console.error('Error posting comment:', {
            message: error.message,
            stack: error.stack
        });
        alert('Failed to post comment. Please try again.');
    }
});
// Update your form submission handler
// Wrap your form submission code in a DOMContentLoaded event listener
document.addEventListener('DOMContentLoaded', function() {
    const createPostForm = document.getElementById('createPostForm');
    
    if (createPostForm) { // Check if form exists before adding listener
        createPostForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const submitBtn = this.querySelector('[type="submit"]');
            
            try {
                if (submitBtn) {
                    submitBtn.disabled = true;
                    submitBtn.textContent = 'Posting...';
                }
                
                const response = await fetch('/posts', {
                    method: 'POST',
                    body: formData
                });
                
                const result = await response.json();
                
                if (result.success) {
                    // Close modal using Bootstrap's modal instance
                    const modal = bootstrap.Modal.getInstance(document.getElementById('createPostModal'));
                    if (modal) modal.hide();
                    window.location.reload();
                } else {
                    alert('Failed to create post: ' + (result.error || 'Unknown error'));
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Failed to create post. Please try again.');
            } finally {
                if (submitBtn) {
                    submitBtn.disabled = false;
                    submitBtn.textContent = 'Post';
                }
            }
        });
    }
});
    </script>






  </body>