<% layout('/layouts/boilerplate') %>
<style>
  /* ===== DARK THEME BASE ===== */
  body {
    background-color: #0a0a0a;
    color: white;
  }

  /* ===== MAIN BUTTON ===== */
  #randomChatButton {
    position: fixed;
    bottom: 30px;
    
    z-index: 1000;
    background: linear-gradient(90deg, #00d8ff, #008cff);
    border: none;
    border-radius: 50px;
    padding: 15px 30px;
    font-weight: 700;
    color: white;
    text-transform: uppercase;
    letter-spacing: 1px;
    box-shadow: 0 8px 25px rgba(0, 136, 255, 0.5);
    transition: all 0.3s ease;
    animation: pulse 2s infinite;
  }

  #randomChatButton:hover {
    transform: translateY(-3px);
    box-shadow: 0 12px 30px rgba(0, 136, 255, 0.7);
    animation: none;
  }

  @keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.05); }
    100% { transform: scale(1); }
  }

  /* ===== MODAL DIALOG ===== */
  #randomChatModal .modal-dialog {
    max-width: 600px;
    margin: 1.75rem auto;
  }

  #randomChatModal .modal-content {
    background: #121212;
    border: 1px solid #2a2a2a;
    border-radius: 12px;
    box-shadow: 0 15px 40px rgba(0, 0, 0, 0.6);
  }

  /* ===== MODAL HEADER ===== */
  #randomChatModal .modal-header {
    background: linear-gradient(90deg, #00d8ff, #008cff);
    color: white;
    border-bottom: none;
    padding: 20px;
    position: relative;
  }

  #randomChatModal .modal-title {
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 1px;
  }

  /* ===== CHAT MESSAGES ===== */
  #chatMessages {
    height: 350px;
    overflow-y: auto;
    padding: 20px;
    background: #0a0a0a;
    border-radius: 8px;
    margin-bottom: 20px;
    scrollbar-width: thin;
    scrollbar-color: #008cff #0a0a0a;
  }

  #chatMessages::-webkit-scrollbar {
    width: 8px;
  }

  #chatMessages::-webkit-scrollbar-track {
    background: #0a0a0a;
    border-radius: 10px;
  }

  #chatMessages::-webkit-scrollbar-thumb {
    background: linear-gradient(90deg, #00d8ff, #008cff);
    border-radius: 10px;
  }

  /* ===== MESSAGE BUBBLES ===== */
  .message-bubble {
    max-width: 80%;
    padding: 12px 18px;
    margin-bottom: 15px;
    position: relative;
    border-radius: 20px;
    word-break: break-word;
    animation: messageIn 0.3s ease-out;
    transition: all 0.2s ease;
  }

  @keyframes messageIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
  }

  .message-bubble.sent {
    background: linear-gradient(90deg, #00d8ff, #008cff);
    color: white;
    margin-left: auto;
    border-bottom-right-radius: 5px;
    box-shadow: 0 5px 15px rgba(0, 136, 255, 0.4);
  }

  .message-bubble.received {
    background: #2a2a2a;
    color: white;
    margin-right: auto;
    border-bottom-left-radius: 5px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
  }

  .message-bubble:hover {
    transform: translateY(-2px);
  }

  .message-content {
    font-size: 15px;
    line-height: 1.5;
  }

  .message-time {
    font-size: 11px;
    opacity: 0.7;
    margin-top: 5px;
    text-align: right;
  }

  /* ===== INPUT AREA ===== */
  #chatInputContainer {
    background: #121212;
    padding: 20px;
    border-radius: 8px;
    border: 1px solid #2a2a2a;
  }

  #chatMessageInput {
    background: #1e1e1e !important;
    border: 1px solid #2a2a2a !important;
    color: white !important;
    border-radius: 25px !important;
    padding: 12px 20px !important;
    transition: all 0.3s ease;
  }

  #chatMessageInput:focus {
    box-shadow: 0 0 0 3px rgba(0, 216, 255, 0.3) !important;
    border-color: #008cff !important;
  }

  #sendMessageBtn {
    border-radius: 25px;
    background: linear-gradient(90deg, #00d8ff, #008cff);
    border: none;
    padding: 12px 25px;
    margin-left: 10px;
    transition: all 0.3s ease;
  }

  #sendMessageBtn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 20px rgba(0, 136, 255, 0.5);
  }

  #endChatBtn {
    background: #ff3b30;
    border: none;
    border-radius: 25px;
    padding: 12px;
    margin-top: 15px;
    transition: all 0.3s ease;
  }

  #endChatBtn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 20px rgba(255, 59, 48, 0.5);
  }

  /* ===== STATUS AREA ===== */
  #chatStatus {
    background: #121212;
    padding: 20px;
    border-radius: 8px;
    border: 1px solid #2a2a2a;
    margin-bottom: 20px;
    text-align: center;
  }

  /* ===== LOADING SPINNER ===== */
  .spinner-border {
    width: 2.5rem;
    height: 2.5rem;
    border-width: 0.25em;
    color: #00d8ff;
  }
  .form-control{
    color: white !important;
  }
          body {
            font-family: 'Montserrat', 'Arial', sans-serif;
            background-color: var(--dark-bg);
            color: var(--cosmic-text);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            overflow-x: hidden;
            background-image: 
                radial-gradient(circle at 20% 30%, rgba(0, 140, 255, 0.15) 0%, transparent 25%),
                radial-gradient(circle at 80% 70%, rgba(0, 216, 255, 0.15) 0%, transparent 25%);
        }
        
        .cosmic-title {
            font-size: 7rem;
            font-weight: 900;
            background: var(--primary-gradient);
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
            text-shadow: var(--cosmic-glow);
            position: relative;
            margin-bottom: 1.5rem;
            letter-spacing: -0.05em;
            line-height: 1;
            animation: 
                cosmicFloat 8s var(--ease-bounce) infinite alternate,
                cosmicPulse 4s ease-in-out infinite alternate,
                fadeIn 1.5s var(--ease-power4) forwards;
            opacity: 0;
            transform: translateY(30px);
            padding: 0 2rem;
            text-align: center;
        }
        
        .cosmic-title::before,
        .cosmic-title::after {
            content: '';
            position: absolute;
            top: 50%;
            width: 50vw;
            height: 4px;
            background: var(--primary-gradient);
            transform: scaleX(0);
            transform-origin: right;
            z-index: -1;
            filter: blur(4px);
            opacity: 0.7;
        }
        
        .cosmic-title::before {
            left: 0;
            animation: cosmicLineExpand 1.5s var(--ease-power4) 0.5s forwards;
        }
        
        .cosmic-title::after {
            right: 0;
            animation: cosmicLineExpand 1.5s var(--ease-power4) 0.7s forwards;
        }
        
        .cosmic-tagline {
            font-size: 1.5rem;
            font-weight: 300;
            letter-spacing: 0.2em;
            text-transform: uppercase;
            color: var(--cosmic-text);
            opacity: 0;
            transform: translateY(20px);
            animation: 
                fadeIn 1s var(--ease-power4) 0.8s forwards,
                subtleGlow 4s ease-in-out infinite alternate;
            text-align: center;
            max-width: 80%;
            margin: 0 auto;
            position: relative;
        }
        
        .cosmic-tagline::after {
            content: '';
            position: absolute;
            bottom: -1rem;
            left: 50%;
            transform: translateX(-50%) scaleX(0);
            width: 30%;
            height: 2px;
            background: var(--primary-gradient);
            animation: cosmicLineExpand 1s var(--ease-power4) 1.2s forwards;
        }
        
        /* Cosmic Animations */
        @keyframes cosmicFloat {
            0%, 100% {
                transform: translateY(0);
            }
            50% {
                transform: translateY(-15px);
            }
        }
        
        @keyframes cosmicPulse {
            0%, 100% {
                text-shadow: 
                    0 0 10px rgba(0, 216, 255, 0.7),
                    0 0 20px rgba(0, 140, 255, 0.4);
            }
            50% {
                text-shadow: 
                    0 0 20px rgba(0, 216, 255, 0.9),
                    0 0 40px rgba(0, 140, 255, 0.6);
            }
        }
        
        @keyframes subtleGlow {
            0%, 100% {
                text-shadow: 0 0 8px rgba(0, 216, 255, 0.3);
            }
            50% {
                text-shadow: 0 0 12px rgba(0, 216, 255, 0.5);
            }
        }
        
        @keyframes cosmicLineExpand {
            to {
                transform: scaleX(1);
            }
        }
        
        @keyframes fadeIn {
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        /* Cosmic particles background */
        .cosmic-particle {
            position: absolute;
            background: var(--primary-light);
            border-radius: 50%;
            pointer-events: none;
            z-index: -1;
            opacity: 0;
            animation: cosmicDrift linear infinite;
        }
        
        @keyframes cosmicDrift {
            to {
                transform: translate(var(--tx), var(--ty));
            }
        }
        
        /* Responsive adjustments */
        @media (max-width: 768px) {
            .cosmic-title {
                font-size: 4rem;
                padding: 0 1rem;
            }
            
            .cosmic-tagline {
                font-size: 1rem;
                letter-spacing: 0.1em;
            }
        }
        .cosmic-quiz-actions {
    display: flex;
    align-items: center;
    gap: 1rem;
}

.cosmic-btn-danger {
    background: rgba(255, 76, 106, 0.1);
    color: var(--cosmic-error);
    border: 1px solid rgba(255, 76, 106, 0.3);
    padding: 0.8rem 1.5rem;
}

.cosmic-btn-danger:hover {
    background: rgba(255, 76, 106, 0.2);
    color: var(--cosmic-error);
}

.cosmic-icon {
    margin-right: 0.5rem;
}
:root {
            --primary-gradient: linear-gradient(90deg, #00d8ff, #008cff);
            --primary-gradient-reverse: linear-gradient(90deg, #008cff, #00d8ff);
            --primary-light: #00d8ff;
            --primary-dark: #008cff;
            --dark-bg: #0a0a0a;
            --darker-bg: #050505;
            --cosmic-text: rgba(255, 255, 255, 0.9);
            --cosmic-glow: 0 0 10px rgba(0, 216, 255, 0.7);
            
            /* Enhanced timing functions */
            --ease-elastic: cubic-bezier(0.68, -0.55, 0.265, 1.55);
            --ease-bounce: cubic-bezier(0.175, 0.885, 0.32, 1.275);
            --ease-power4: cubic-bezier(0.77, 0, 0.175, 1);
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        

        .back-btn {
    position: fixed;
    top: 20px;
    left: 20px;
    z-index: 1000;
    background: linear-gradient(90deg, #00d8ff, #008cff);
    border: none;
    border-radius: 10px;
    width: 100px;
    height: 50px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 1.5rem;
    cursor: pointer;
    transition: all 0.3s ease;
    backdrop-filter: blur(5px);
    margin-top: 3.5rem;
    text-decoration: none;
  }

  .back-btn:hover {
    background: rgba(0, 162, 255, 0.2);
    transform: translateX(-3px);
  }
  #chatMessageInput {
  color: white;
  background-color: #333; /* optional for visibility */
}

#chatMessageInput::placeholder {
  color: white;
  opacity: 1;
}

</style>
<a href="/" class="back-btn">
  Back
</a>
   <h1 class="cosmic-title" style="font-size: 7rem;">Feeling Alone?</h1>
        <p class="cosmic-tagline">Want to Talk to Strangers?</p>
   
    
<!-- Main Call-to-Action Button -->
<button id="randomChatButton" class="btn position-fixed">
  Start Random Chat Now
</button>

<!-- Chat Modal -->
<div class="modal fade" id="randomChatModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Random Chat</h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div id="chatStatus" class="text-center mb-3">
          <p>Click "Start Random Chat" to begin</p>
        </div>
        <div id="chatMessages" class="mb-3"></div>
        <div id="chatInputContainer" class="d-none">
          <div class="input-group">
            <input type="text" id="chatMessageInput" class="form-control" 
                   placeholder="Type your message...">
            <button id="sendMessageBtn" class="btn btn-primary">Send</button>
          </div>
          <button id="endChatBtn" class="btn btn-danger mt-2 w-100">End Chat</button>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Bootstrap JS Bundle with Popper -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script>
  // Initialize Socket.io client
  const socket = io();

  // Connect to user's room
  socket.emit('join', '<%= user._id %>');

  // DOM elements
  const randomChatButton = document.getElementById('randomChatButton');
  const randomChatModal = new bootstrap.Modal(document.getElementById('randomChatModal'));
  const chatStatus = document.getElementById('chatStatus');
  const chatMessages = document.getElementById('chatMessages');
  const chatInputContainer = document.getElementById('chatInputContainer');
  const chatMessageInput = document.getElementById('chatMessageInput');
  const sendMessageBtn = document.getElementById('sendMessageBtn');
  const endChatBtn = document.getElementById('endChatBtn');

  // Current chat state
  let currentChatId = null;

  // Open modal when button is clicked
  randomChatButton.addEventListener('click', () => {
    randomChatModal.show();
    checkChatStatus();
  });

  // Check current chat status
  async function checkChatStatus() {
    try {
      const response = await fetch('/random-chat/status');
      const data = await response.json();
      
      if (data.success) {
        updateChatUI(data.status, data.chatId);
        
        if (data.status === 'connected') {
          loadChatMessages(data.chatId);
        }
      }
    } catch (err) {
      console.error('Error checking chat status:', err);
    }
  }

  // Update UI based on chat status
  function updateChatUI(status, chatId = null) {
    currentChatId = chatId;
    
    switch(status) {
      case 'inactive':
        chatStatus.innerHTML = `
          <p>Click "Start Random Chat" to begin a conversation with a random user</p>
          <button id="startChatBtn" class="btn btn-primary">Start Random Chat</button>
        `;
        chatInputContainer.classList.add('d-none');
        document.getElementById('startChatBtn').addEventListener('click', startRandomChat);
        break;
        
      case 'waiting':
        chatStatus.innerHTML = `
          <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
          <p class="mt-2">Looking for someone to chat with...</p>
          <button id="cancelSearchBtn" class="btn btn-danger">Cancel</button>
        `;
        chatInputContainer.classList.add('d-none');
        document.getElementById('cancelSearchBtn').addEventListener('click', endRandomChat);
        break;
        
      case 'connected':
        chatStatus.innerHTML = `
          <p>You're now connected with a random user!</p>
          <p>
            Note: Try to end chat and then start again in case facing any issue.</p>
        `;
        chatInputContainer.classList.remove('d-none');
        socket.emit('joinRandomChat', currentChatId);
        break;
    }
  }

  // Start looking for a random chat
  async function startRandomChat() {
    try {
      const response = await fetch('/random-chat/start', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        }
      });
      
      const data = await response.json();
      
      if (data.success) {
        updateChatUI(data.status, data.chatId);
      }
    } catch (err) {
      console.error('Error starting random chat:', err);
    }
  }

  // End current chat
  async function endRandomChat() {
    try {
      await fetch('/random-chat/end', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        }
      });
      
      updateChatUI('inactive');
      chatMessages.innerHTML = '';
    } catch (err) {
      console.error('Error ending random chat:', err);
    }
  }

  // Load chat messages
  async function loadChatMessages(chatId) {
    try {
      const response = await fetch('/random-chat/messages', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ chatId })
      });
      
      const data = await response.json();
      
      if (data.success) {
        chatMessages.innerHTML = '';
        data.messages.forEach(message => {
          addMessageToChat(message.content, message.sender === '<%= user._id %>');
        });
      }
    } catch (err) {
      console.error('Error loading chat messages:', err);
    }
  }

  // Send message
 // Modify the sendMessage function to show messages immediately
async function sendMessage() {
  const content = chatMessageInput.value.trim();
  if (!content || !currentChatId) return;
  
  // Show message immediately on sender's side
  addMessageToChat(content, true);
  chatMessageInput.value = '';
  
  try {
    // Send to server
    await fetch('/random-chat/message', {
      method: 'POST',
      headers: {'Content-Type': 'application/json'},
      body: JSON.stringify({ content, chatId: currentChatId })
    });
    
  } catch (err) {
    console.error('Error sending message:', err);
    // Optionally show error indicator
  }
}

// Update the new_message listener to only show messages from others
socket.on('new_message', (message) => {
  // Only display if it's from the other user
  if (message.chatId === currentChatId && message.sender !== '<%= user._id %>') {
    addMessageToChat(message.content, false);
  }
});

  // Add message to chat UI
  function addMessageToChat(content, isCurrentUser) {
  const messageDiv = document.createElement('div');
  messageDiv.className = `message-bubble ${isCurrentUser ? 'sent' : 'received'}`;
  
  messageDiv.innerHTML = `
    <div class="message-content">${content}</div>
    <div class="message-time">${new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}</div>
  `;
  
  chatMessages.appendChild(messageDiv);
  chatMessages.scrollTop = chatMessages.scrollHeight;
}


  // Event listeners
  sendMessageBtn.addEventListener('click', sendMessage);
  endChatBtn.addEventListener('click', endRandomChat);
  chatMessageInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') sendMessage();
  });

  // Socket.io listeners
  socket.on('chat_started', (data) => {
    if (data.participants.includes('<%= user._id %>')) {
      updateChatUI('connected', data.chatId);
      loadChatMessages(data.chatId);
    }
  });

  

  socket.on('chat_ended', () => {
    updateChatUI('inactive');
    chatMessages.innerHTML = '';
    if (randomChatModal._isShown) {
      randomChatModal.hide();
    }
  });

  // Check status when modal is shown
  document.getElementById('randomChatModal').addEventListener('shown.bs.modal', checkChatStatus);
</script>