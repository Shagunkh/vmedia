<% layout("/layouts/boilerplate") %>
<style>
:root {
  --primary-gradient: linear-gradient(135deg, #00d8ff, #008cff, #00a8ff);
  --dark-bg: linear-gradient(135deg, #0f0f15 0%, #1a1a2e 100%);
  --darker-bg: #0a0a12;
  --card-bg: rgba(30, 30, 46, 0.6);
  --glass-bg: rgba(255, 255, 255, 0.05);
  --text-primary: rgba(255, 255, 255, 0.95);
  --text-secondary: rgba(180, 180, 220, 0.8);
  --accent: #00d8ff;
  --success: #00ff9d;
  --warning: #ffcc00;
  --danger: #ff3860;
  --neon-shadow: 0 0 10px rgba(0, 216, 255, 0.7);
  --neon-text-shadow: 0 0 5px rgba(0, 216, 255, 0.9);
}

/* Cosmic Background Animation */
body::before {
  content: '';
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: 
    radial-gradient(circle at 20% 30%, rgba(0, 216, 255, 0.15) 0%, transparent 25%),
    radial-gradient(circle at 80% 70%, rgba(0, 140, 255, 0.15) 0%, transparent 25%),
    radial-gradient(circle at 40% 60%, rgba(0, 168, 255, 0.15) 0%, transparent 25%);
  z-index: -2;
  animation: cosmicPulse 20s infinite alternate;
}

@keyframes cosmicPulse {
  0%, 100% {
    opacity: 0.8;
    transform: scale(1);
  }
  50% {
    opacity: 1;
    transform: scale(1.05);
  }
}

/* Floating Particles */
body::after {
  content: '';
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-image: 
    url("data:image/svg+xml,%3Csvg viewBox='0 0 200 200' xmlns='http://www.w3.org/2000/svg'%3E%3Ccircle fill='%2300d8ff' cx='20' cy='20' r='1'/%3E%3Ccircle fill='%23008cff' cx='80' cy='80' r='1.5'/%3E%3Ccircle fill='%2300a8ff' cx='140' cy='40' r='1'/%3E%3Ccircle fill='%2300d8ff' cx='180' cy='120' r='1.5'/%3E%3C/svg%3E");
  z-index: -1;
  opacity: 0.3;
  animation: particleMove 100s linear infinite;
}

@keyframes particleMove {
  0% {
    transform: translateY(0) translateX(0);
  }
  100% {
    transform: translateY(-1000px) translateX(500px);
  }
}

body {
  background: var(--dark-bg);
  color: var(--text-primary);
  font-family: 'Poppins', 'Segoe UI', sans-serif;
  min-height: 100vh;
  overflow-x: hidden;
  line-height: 1.6;
}

/* Glowing Container */
.container {
  padding: 2rem;
  max-width: 1400px;
  position: relative;
}

.container::before {
  content: '';
  position: absolute;
  top: -50px;
  left: -50px;
  right: -50px;
  bottom: -50px;
  background: radial-gradient(circle at center, rgba(0, 216, 255, 0.1) 0%, transparent 70%);
  z-index: -1;
  pointer-events: none;
  animation: glowPulse 8s infinite alternate;
}

@keyframes glowPulse {
  0% {
    opacity: 0.3;
  }
  100% {
    opacity: 0.7;
  }
}

/* Holographic Header */
h2 {
  font-weight: 800;
  font-size: 8rem;
  background: var(--primary-gradient);
  -webkit-background-clip: text;
  background-clip: text;
  -webkit-text-fill-color: transparent;
  position: relative;
  display: inline-block;
  margin-bottom: 2rem !important;
  text-shadow: var(--neon-text-shadow);
  animation: hologramFloat 6s ease-in-out infinite;
  perspective: 1000px;
}

@keyframes hologramFloat {
  0%, 100% {
    transform: translateY(0) rotateX(0deg);
  }
  50% {
    transform: translateY(-10px) rotateX(5deg);
  }
}

h2::after {
  content: '';
  position: absolute;
  bottom: -15px;
  left: 0;
  width: 100%;
  height: 4px;
  background: var(--primary-gradient);
  border-radius: 4px;
  transform: scaleX(0);
  transform-origin: left;
  transition: transform 0.6s cubic-bezier(0.68, -0.55, 0.265, 1.55);
  filter: drop-shadow(0 0 5px rgba(0, 216, 255, 0.7));
}

h2:hover::after {
  transform: scaleX(1);
}

/* Futuristic Input Group */
.input-group {
  box-shadow: 
    0 4px 30px rgba(0, 216, 255, 0.25),
    inset 0 2px 5px rgba(255, 255, 255, 0.1);
  border-radius: 50px;
  overflow: hidden;
  transition: all 0.4s cubic-bezier(0.25, 0.8, 0.25, 1);
  background: var(--glass-bg);
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.1);
}

.input-group:hover {
  box-shadow: 
    0 8px 40px rgba(0, 216, 255, 0.4),
    inset 0 2px 5px rgba(255, 255, 255, 0.15);
  transform: translateY(-3px);
}

.form-control {
  background-color: transparent;
  border: none;
  color: white;
  padding: 1rem 1.5rem;
  font-size: 1rem;
  backdrop-filter: blur(5px);
}

.form-control:focus {
  background-color: rgba(30, 30, 46, 0.3);
  color: white;
  box-shadow: 
    0 0 0 0.25rem rgba(0, 216, 255, 0.15),
    inset 0 2px 5px rgba(255, 255, 255, 0.1);
}

/* Cyberpunk Tabs */
.nav-tabs {
  border-bottom: 1px solid rgba(0, 216, 255, 0.3);
  position: relative;
}

.nav-tabs::after {
  content: '';
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  height: 1px;
  background: linear-gradient(90deg, transparent, var(--accent), transparent);
  opacity: 0.5;
}

.nav-link {
  color: var(--text-secondary);
  font-weight: 600;
  letter-spacing: 0.5px;
  padding: 0.75rem 1.5rem;
  border: none;
  position: relative;
  background: transparent;
  transition: all 0.3s ease;
  text-transform: uppercase;
  font-size: 0.85rem;
}

.nav-link::before {
  content: '';
  position: absolute;
  bottom: 0;
  left: 50%;
  transform: translateX(-50%);
  width: 0;
  height: 3px;
  background: var(--primary-gradient);
  transition: all 0.3s ease;
}

.nav-link:hover {
  color: var(--text-primary);
  transform: translateY(-2px);
}

.nav-link.active {
  color: var(--accent);
  background: transparent;
  border: none;
}

.nav-link.active::before {
  width: 80%;
}

/* Holographic Cards */
.card {
  background: var(--card-bg);
  border: none;
  border-radius: 15px;
  overflow: hidden;
  transition: all 0.5s cubic-bezier(0.175, 0.885, 0.32, 1.275);
  box-shadow: 
    0 8px 32px rgba(0, 0, 0, 0.3),
    inset 0 4px 10px rgba(255, 255, 255, 0.05);
  position: relative;
  z-index: 1;
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.1);
  transform-style: preserve-3d;
  perspective: 1000px;
}

.card::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: var(--primary-gradient);
  opacity: 0;
  z-index: -1;
  transition: opacity 0.5s ease;
}

.card:hover {
  transform: translateY(-15px) scale(1.03) rotateX(2deg);
  box-shadow: 
    0 15px 50px rgba(0, 216, 255, 0.3),
    inset 0 4px 15px rgba(255, 255, 255, 0.1);
}

.card:hover::before {
  opacity: 0.1;
}

.card-header {
  background: rgba(30, 30, 46, 0.7);
  border-bottom: 1px solid rgba(0, 216, 255, 0.2);
  padding: 1.25rem 1.5rem;
  position: relative;
  overflow: hidden;
  backdrop-filter: blur(5px);
}

.card-header::after {
  content: '';
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  height: 2px;
  background: var(--primary-gradient);
  transform: scaleX(0);
  transform-origin: left;
  transition: transform 0.6s cubic-bezier(0.68, -0.55, 0.265, 1.55);
}

.card:hover .card-header::after {
  transform: scaleX(1);
}

.card-body {
  padding: 1.5rem;
  position: relative;
}

.card-footer {
  background: rgba(30, 30, 46, 0.5);
  border-top: 1px solid rgba(0, 216, 255, 0.1);
  backdrop-filter: blur(5px);
}

/* Cyber Badges */
.badge {
  font-weight: 700;
  letter-spacing: 1px;
  padding: 0.5em 1em;
  border-radius: 50px;
  text-transform: uppercase;
  font-size: 0.7rem;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
}

.badge::before {
  content: '';
  position: absolute;
  top: -50%;
  left: -50%;
  width: 200%;
  height: 200%;
  background: linear-gradient(
    to bottom right,
    rgba(255, 255, 255, 0.3) 0%,
    rgba(255, 255, 255, 0) 60%
  );
  transform: rotate(30deg);
  transition: all 0.3s ease;
}

.badge:hover::before {
  left: 100%;
}

/* Holographic Buttons */
.btn {
  border-radius: 50px;
  font-weight: 700;
  letter-spacing: 1px;
  padding: 0.75rem 1.75rem;
  transition: all 0.4s cubic-bezier(0.25, 0.8, 0.25, 1);
  position: relative;
  overflow: hidden;
  border: none;
  text-transform: uppercase;
  font-size: 0.85rem;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
  transform-style: preserve-3d;
  perspective: 1000px;
}

.btn::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: linear-gradient(
    to right,
    rgba(255, 255, 255, 0.1) 0%,
    rgba(255, 255, 255, 0.3) 100%
  );
  transform: translateX(-100%) skewX(-15deg);
  transition: transform 0.6s cubic-bezier(0.23, 1, 0.32, 1);
}

.btn:hover::before {
  transform: translateX(100%) skewX(-15deg);
}

.btn:hover {
  transform: translateY(-3px) rotateX(5deg);
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
}

.btn:active {
  transform: translateY(1px);
}

.btn-primary {
  background: var(--primary-gradient);
  box-shadow: 
    0 4px 20px rgba(0, 216, 255, 0.4),
    inset 0 2px 5px rgba(255, 255, 255, 0.2);
}

.btn-primary:hover {
  box-shadow: 
    0 8px 30px rgba(0, 216, 255, 0.6),
    inset 0 2px 10px rgba(255, 255, 255, 0.3);
}

.btn-success {
  background: linear-gradient(135deg, #00ff9d, #00c853);
  box-shadow: 0 4px 20px rgba(0, 255, 157, 0.4);
}

.btn-danger {
  background: linear-gradient(135deg, #ff3860, #dd2c00);
  box-shadow: 0 4px 20px rgba(255, 56, 96, 0.4);
}

.btn-outline-danger {
  border: 2px solid var(--danger);
  color: var(--danger);
  background: transparent;
  box-shadow: none;
}

.btn-outline-danger:hover {
  background: var(--danger);
  color: white;
  box-shadow: 0 4px 20px rgba(255, 56, 96, 0.4);
}

/* Futuristic Modal */
.modal-content {
  background: var(--darker-bg);
  border: 1px solid rgba(0, 216, 255, 0.3);
  border-radius: 15px;
  overflow: hidden;
  box-shadow: 
    0 20px 50px rgba(0, 0, 0, 0.7),
    inset 0 4px 15px rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(15px);
  transform-style: preserve-3d;
  perspective: 1000px;
  animation: modalEntrance 0.6s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
}

@keyframes modalEntrance {
  0% {
    opacity: 0;
    transform: translateY(50px) rotateX(30deg);
  }
  100% {
    opacity: 1;
    transform: translateY(0) rotateX(0);
  }
}

.modal-header {
  border-bottom: 1px solid rgba(0, 216, 255, 0.3);
  background: rgba(10, 10, 18, 0.8);
}

.modal-footer {
  border-top: 1px solid rgba(0, 216, 255, 0.3);
  background: rgba(10, 10, 18, 0.8);
}

/* Cyber Chat Modal */
#chatModal .modal-content {
  background: linear-gradient(135deg, #121220 0%, #1a1a3e 100%);
  border: 1px solid rgba(0, 216, 255, 0.5);
  box-shadow: 
    0 0 30px rgba(0, 216, 255, 0.3),
    inset 0 0 20px rgba(0, 216, 255, 0.1);
}

#chatWindow {
  background: rgba(10, 10, 20, 0.7);
  border-radius: 10px;
  padding: 1.5rem;
  margin-bottom: 1rem;
  min-height: 400px;
  max-height: 500px;
  overflow-y: auto;
  scroll-behavior: smooth;
  border: 1px solid rgba(0, 216, 255, 0.2);
  box-shadow: inset 0 0 15px rgba(0, 216, 255, 0.1);
}

#chatWindow::-webkit-scrollbar {
  width: 6px;
}

#chatWindow::-webkit-scrollbar-thumb {
  background: rgba(0, 216, 255, 0.5);
  border-radius: 3px;
}

#scrollToBottomBtn {
  background: var(--primary-gradient);
  border: none;
  width: 45px;
  height: 45px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  box-shadow: 
    0 4px 20px rgba(0, 216, 255, 0.4),
    0 0 10px rgba(0, 216, 255, 0.6);
  transition: all 0.3s ease;
  position: absolute;
  right: 20px;
  bottom: 90px;
  z-index: 10;
  opacity: 0;
  transform: translateY(10px);
  animation: pulse 2s infinite;
}

@keyframes pulse {
  0%, 100% {
    box-shadow: 
      0 4px 20px rgba(0, 216, 255, 0.4),
      0 0 10px rgba(0, 216, 255, 0.6);
  }
  50% {
    box-shadow: 
      0 4px 25px rgba(0, 216, 255, 0.6),
      0 0 15px rgba(0, 216, 255, 0.8);
  }
}

#scrollToBottomBtn.visible {
  opacity: 1;
  transform: translateY(0);
}

#scrollToBottomBtn:hover {
  transform: scale(1.1) translateY(0);
}

/* Avatar Hover Effect */
.rounded-circle {
  transition: all 0.5s cubic-bezier(0.175, 0.885, 0.32, 1.275);
  border: 2px solid transparent;
  box-shadow: 0 0 10px rgba(0, 216, 255, 0);
}

.rounded-circle:hover {
  transform: scale(1.2) rotateY(180deg);
  border-color: var(--accent);
  box-shadow: 
    0 0 20px rgba(0, 216, 255, 0.7),
    0 0 40px rgba(0, 216, 255, 0.4);
}

/* Floating Animation */
@keyframes float {
  0%, 100% {
    transform: translateY(0) rotate(0deg);
  }
  50% {
    transform: translateY(-15px) rotate(2deg);
  }
}

.floating {
  animation: float 6s ease-in-out infinite;
}

/* Responsive Adjustments */
@media (max-width: 1200px) {
  h2 {
    font-size: 6rem;
  }
}

@media (max-width: 992px) {
  h2 {
    font-size: 4.5rem;
  }
  
  .card {
    margin-bottom: 2rem;
  }
}

@media (max-width: 768px) {
  h2 {
    font-size: 3.5rem;
  }
  
  .container {
    padding: 1.5rem;
  }
  
  .nav-link {
    padding: 0.5rem 1rem;
    font-size: 0.75rem;
  }
}

@media (max-width: 576px) {
  h2 {
    font-size: 2.5rem;
  }
  
  .btn {
    padding: 0.5rem 1.25rem;
    font-size: 0.75rem;
  }
}

/* Text Visibility Enhancements */
.card-body, .card-header, .card-footer, .modal-body, .modal-header, .modal-footer {
  color: var(--text-primary) !important;
}

.card-subtitle.text-muted {
  color: var(--text-secondary) !important;
}

.form-label {
  color: var(--text-primary) !important;
  text-transform: uppercase;
  letter-spacing: 1px;
  font-size: 0.85rem;
  margin-bottom: 0.5rem;
}

/* Chat Message Styling */
#chatWindow div {
  padding: 0.75rem 1rem;
  margin-bottom: 0.75rem;
  background: rgba(255, 255, 255, 0.05);
  border-radius: 8px;
  border-left: 3px solid var(--accent);
  transition: all 0.3s ease;
  animation: messageAppear 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275) forwards;
  transform-origin: bottom;
  opacity: 0;
}

@keyframes messageAppear {
  0% {
    opacity: 0;
    transform: translateY(10px) scale(0.95);
  }
  100% {
    opacity: 1;
    transform: translateY(0) scale(1);
  }
}

#chatWindow strong {
  font-weight: 700;
  position: relative;
}

#chatWindow strong::after {
  content: '';
  position: absolute;
  bottom: -2px;
  left: 0;
  width: 100%;
  height: 1px;
  background: currentColor;
  opacity: 0.5;
}

#chatWindow small {
  font-size: 0.7rem;
  opacity: 0.7;
  margin-left: 0.5rem;
}

/* Neon Pulse Effect */
.neon-pulse {
  animation: neonPulse 2s infinite alternate;
}

@keyframes neonPulse {
  from {
    text-shadow: 0 0 5px rgba(0, 216, 255, 0.5);
  }
  to {
    text-shadow: 0 0 15px rgba(0, 216, 255, 0.9);
  }
}

/* Loading Animation */
.loading-spinner {
  display: inline-block;
  width: 2rem;
  height: 2rem;
  border: 3px solid rgba(0, 216, 255, 0.3);
  border-radius: 50%;
  border-top-color: var(--accent);
  animation: spin 1s ease-in-out infinite;
  box-shadow: 0 0 10px rgba(0, 216, 255, 0.5);
}

@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}

/* 3D Card Effect on Hover */
.card-3d {
  transition: transform 0.5s ease, box-shadow 0.5s ease;
  transform-style: preserve-3d;
}

.card-3d:hover {
  transform: perspective(1000px) rotateX(5deg) rotateY(5deg) translateZ(20px);
  box-shadow: 
    0 30px 50px rgba(0, 216, 255, 0.3),
    0 0 50px rgba(0, 216, 255, 0.1) inset;
}

/* Glitch Effect (for special elements) */
.glitch {
  position: relative;
}

.glitch::before, .glitch::after {
  content: attr(data-text);
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  opacity: 0.8;
}

.glitch::before {
  color: #0ff;
  z-index: -1;
  animation: glitch-effect 3s infinite;
}

.glitch::after {
  color: #f0f;
  z-index: -2;
  animation: glitch-effect 2s infinite reverse;
}

@keyframes glitch-effect {
  0% {
    transform: translate(0);
  }
  20% {
    transform: translate(-3px, 3px);
  }
  40% {
    transform: translate(-3px, -3px);
  }
  60% {
    transform: translate(3px, 3px);
  }
  80% {
    transform: translate(3px, -3px);
  }
  100% {
    transform: translate(0);
  }
}

/* Special Title Effect */
.special-title {
  position: relative;
  display: inline-block;
}

.special-title::after {
  content: '';
  position: absolute;
  bottom: -10px;
  left: 0;
  width: 100%;
  height: 3px;
  background: var(--primary-gradient);
  border-radius: 3px;
  transform: scaleX(0);
  transform-origin: right;
  transition: transform 0.6s cubic-bezier(0.68, -0.55, 0.265, 1.55);
}

.special-title:hover::after {
  transform: scaleX(1);
  transform-origin: left;
}

/* Futuristic Checkbox */
.form-check-input {
  width: 1.2em;
  height: 1.2em;
  background-color: transparent;
  border: 2px solid var(--accent);
  position: relative;
}

.form-check-input:checked {
  background-color: var(--accent);
  border-color: var(--accent);
  box-shadow: 0 0 10px var(--accent);
}

.form-check-input:checked::after {
  content: '';
  position: absolute;
  top: 50%;
  left: 50%;
  width: 70%;
  height: 70%;
  background: white;
  transform: translate(-50%, -50%) rotate(45deg);
  clip-path: polygon(
    14% 44%,
    0 65%,
    50% 100%,
    100% 16%,
    80% 0%,
    43% 62%
  );
}
:root {
            --primary-gradient:  linear-gradient(135deg, #00d8ff, #008cff, #00a8ff);
            --secondary-gradient: linear-gradient(135deg, #00d8ff, #008cff, #00a8ff);
            --dark-bg: #0f0f1a;
            --darker-bg: #0a0a12;
            --neon-accent: #00f2ff;
            --text-primary: rgba(255,255,255,0.92);
            --text-secondary: rgba(255,255,255,0.7);
        }
        
        body {
            background-color: var(--dark-bg);
            color: var(--text-primary);
            font-family: 'Segoe UI', system-ui, -apple-system, sans-serif;
            overflow-x: hidden;
            background-image: 
                radial-gradient(circle at 25% 25%, rgba(110, 142, 251, 0.15) 0%, transparent 50%),
                radial-gradient(circle at 75% 75%, rgba(167, 119, 227, 0.15) 0%, transparent 50%);
            min-height: 100vh;
        }
        
        /* Cosmic Header */
        .cosmic-header {
            position: relative;
            padding: 6rem 0 4rem;
            width: 100%;
            text-align: center;
            overflow: hidden;
           
            margin-bottom: 3rem;
            z-index: 1;
        }
        
        .cosmic-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: 
                url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 100 100"><circle cx="50" cy="50" r="1" fill="white" opacity="0.1"/></svg>') repeat,
                url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="200" height="200" viewBox="0 0 200 200"><circle cx="100" cy="100" r="2" fill="white" opacity="0.15"/></svg>') repeat;
            opacity: 0.5;
            z-index: -1;
            animation: starfield 100s linear infinite;
        }
        
        @keyframes starfield {
            0% { background-position: 0 0, 0 0; }
            100% { background-position: -1000px 1000px, 500px 500px; }
        }
        
        .main-title {
            font-size: 6rem;
            font-weight: 800;
            background: linear-gradient(to right, #fff 20%, var(--neon-accent) 40%, var(--neon-accent) 60%, #fff 80%);
            background-size: 200% auto;
            color: transparent;
            -webkit-background-clip: text;
            background-clip: text;
            animation: shine 3s linear infinite;
            margin-bottom: 1.5rem;
            text-shadow: 0 0 10px rgba(0, 242, 255, 0.3);
            letter-spacing: -0.05em;
        }
        
        @keyframes shine {
            to { background-position: 200% center; }
        }
        
        .subtitle {
            font-size: 2.5rem;
            font-weight: 300;
            opacity: 0.9;
            margin-bottom: 3rem;
            position: relative;
            display: inline-block;
        }
        
        .subtitle::after {
            content: '';
            position: absolute;
            bottom: -10px;
            left: 0;
            width: 100%;
            height: 3px;
            background: var(--neon-accent);
            transform: scaleX(0);
            transform-origin: right;
            transition: transform 0.5s ease;
        }
        
        .subtitle:hover::after {
            transform: scaleX(1);
            transform-origin: left;
        }
        
        /* Holographic Buttons */
        .holographic-btn {
            position: relative;
            border: none;
            padding: 1rem 2rem;
            font-size: 1.2rem;
            font-weight: 500;
            border-radius: 50px;
            background: linear-gradient(135deg, #00d8ff, #008cff, #00a8ff);
            color: white;
            overflow: hidden;
            transition: all 0.3s ease;
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2), 
                        0 0 0 1px rgba(255, 255, 255, 0.1),
                        0 0 20px rgba(110, 142, 251, 0.3);
            z-index: 1;
            transform: translateY(0);
            backdrop-filter: blur(5px);
        }
        
        .holographic-btn::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: linear-gradient(
                to bottom right,
                rgba(255, 255, 255, 0) 0%,
                rgba(255, 255, 255, 0) 37%,
                rgba(255, 255, 255, 0.3) 45%,
                rgba(255, 255, 255, 0) 50%,
                rgba(255, 255, 255, 0) 100%
            );
            transform: rotate(30deg);
            animation: holographic 3s infinite;
            z-index: -1;
        }
        
        @keyframes holographic {
            0% { transform: rotate(30deg) translate(-30%, -30%); }
            100% { transform: rotate(30deg) translate(30%, 30%); }
        }
        
      
        @keyframes float {
            to { transform: translateY(-100vh) rotate(360deg); }
        }
        
        /* Responsive Adjustments */
        @media (max-width: 992px) {
            .main-title {
                font-size: 4.5rem;
            }
            
            .subtitle {
                font-size: 2rem;
            }
        }
        
        @media (max-width: 768px) {
            .main-title {
                font-size: 3.5rem;
            }
            
            .subtitle {
                font-size: 1.5rem;
            }
            
            .holographic-btn {
                padding: 0.8rem 1.5rem;
                font-size: 1rem;
            }
        }
        
        /* Micro-interactions */
        .bi-x {
            transition: transform 0.3s ease;
        }
        
        #clearSearchBtn:hover .bi-x {
            transform: rotate(90deg) scale(1.2);
        }
         .futuristic-search input::placeholder {
        color: rgba(255, 255, 255, 0.6) !important;
        transition: all 0.3s ease;
    }
    
    .futuristic-search input:focus::placeholder {
        color: rgba(255, 255, 255, 0.3) !important;
    }
    
    /* Enhanced search container */
    .futuristic-search {
        position: relative;
        border-radius: 50px;
        background: linear-gradient(135deg, rgba(110, 142, 251, 0.1), rgba(167, 119, 227, 0.1));
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.1);
        transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.1);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1),
                   inset 0 1px 1px rgba(255, 255, 255, 0.05);
    }
    
    .futuristic-search:focus-within {
        transform: scale(1.02);
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2),
                    inset 0 1px 1px rgba(255, 255, 255, 0.1),
                    0 0 0 2px rgba(0, 242, 255, 0.3);
        border-color: rgba(0, 242, 255, 0.5);
    }
    
    /* Enhanced input field */
    .futuristic-search input {
        background: transparent !important;
        border: none !important;
        color: white !important;
        padding: 1.1rem 1.5rem;
        font-size: 1.1rem;
        z-index: 2;
    }
    
    .futuristic-search input:focus {
        box-shadow: none !important;
    }
    
    /* Enhanced clear button */
    .futuristic-search .input-group-text {
        background: transparent;
        border: none;
        color: rgba(255, 255, 255, 0.6);
        padding: 0 1.5rem;
        cursor: pointer;
        transition: all 0.3s ease;
        z-index: 3;
    }
    
    .futuristic-search .input-group-text:hover {
        color: var(--neon-accent);
        transform: scale(1.1);
    }
    
    /* Optional: Add a glowing effect when typing */
    @keyframes pulse-glow {
        0% { box-shadow: 0 0 5px rgba(0, 242, 255, 0); }
        50% { box-shadow: 0 0 15px rgba(0, 242, 255, 0.3); }
        100% { box-shadow: 0 0 5px rgba(0, 242, 255, 0); }
    }
    
    .futuristic-search.active {
        animation: pulse-glow 2s infinite;
    }

      #addDropForm input.form-control {
        background-color: rgba(255, 255, 255, 0.9) !important;
        color: #333 !important;
        border: 1px solid #6c757d;
        padding: 10px;
        border-radius: 5px;
    }
    
    /* Placeholder text styling */
    #addDropForm input.form-control::placeholder {
        color: #6c757d !important;
        opacity: 1 !important;
    }
    
    /* Form labels styling */
    #addDropForm label.form-label {
        color: #fff !important;
        font-weight: 500;
    }
    
    /* Modal content background */
    .modal-content {
        background-color: #343a40;
        color: #fff;
    }
    
    /* Modal header styling */
    .modal-header {
        border-bottom: 1px solid #495057;
    }
    
    /* Modal footer styling */
    .modal-footer {
        border-top: 1px solid #495057;
    }
    
    /* Input focus state */
    #addDropForm input.form-control:focus {
        background-color: #fff !important;
        color: #000 !important;
        border-color: #86b7fe;
        box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
    }

      #chatWindow small.text-muted {
        color: rgba(255, 255, 255, 0.7) !important;
    }
    
    /* Style for chat input placeholder */
    #chatInput::placeholder {
        color: rgba(255, 255, 255, 0.6) !important;
    }
    
    /* Style for chat input when focused */
    #chatInput:focus::placeholder {
        color: rgba(255, 255, 255, 0.3) !important;
    }
    
    /* Style for the chat input text */
    #chatInput {
        color: white !important;
        background-color: rgba(255, 255, 255, 0.1) !important;
        border: 1px solid rgba(255, 255, 255, 0.2) !important;
    }
    
    /* Style for the chat input when focused */
    #chatInput:focus {
        border-color: var(--accent) !important;
        box-shadow: 0 0 0 0.25rem rgba(0, 216, 255, 0.25) !important;
    }

</style>
<div class="container mt-4">
     <header class="cosmic-header">
            <h1 class="main-title">FFCS Swap Hub</h1>
            <p class="subtitle">Smart Add & Drop Requests</p>
        </header>
        
        <div class="row mb-5">
            <div class="col-md-6 mb-3 mb-md-0">
                <button class="holographic-btn" data-bs-toggle="modal" data-bs-target="#createAddDropModal">
                    <i class="bi bi-plus-circle"></i> Create New Request
                </button>
            </div>
            <div class="col-md-6">
                <div class="futuristic-search input-group">
                    <input type="text" class="form-control" id="searchAddDrop" placeholder="Search by subject, teacher or slot...">
                    <button class="input-group-text" id="clearSearchBtn">
                        <i class="bi bi-x"></i>
                    </button>
                </div>
            </div>
        </div>
    
    <!-- Tabs Navigation -->
    <ul class="nav nav-tabs mb-4" id="requestsTabs" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link active" id="all-tab" data-bs-toggle="tab" data-bs-target="#all" type="button" role="tab">
                All Requests
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="my-tab" data-bs-toggle="tab" data-bs-target="#my" type="button" role="tab">
                My Requests
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="live-tab" data-bs-toggle="tab" data-bs-target="#live" type="button" role="tab">
                Live Requests
            </button>
        </li>
    </ul>
    
    <!-- Tabs Content -->
    <div class="tab-content" id="requestsTabsContent">
        <!-- All Requests Tab -->
        <div class="tab-pane fade show active" id="all" role="tabpanel">
            <div class="row" id="addDropContainer">
                <% addDrops.forEach(request => { %>
                    <div class="col-md-6 mb-4">
                        <div class="card">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h5 class="mb-0"><%= request.currentSubject %> (<%= request.currentSlot %>)</h5>
                                <span class="badge bg-<%= request.status === 'open' ? 'success' : request.status === 'in-progress' ? 'warning' : 'danger' %>">
                                    <%= request.status === 'open' ? 'Open' : request.status === 'in-progress' ? 'In Progress' : 'Closed' %>
                                </span>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <h6 class="card-subtitle mb-2 text-muted">Current:</h6>
                                    <p class="mb-1"><strong>Teacher:</strong> <%= request.currentTeacher %></p>
                                    <p class="mb-1"><strong>Slot:</strong> <%= request.currentSlot %></p>
                                </div>
                                <div class="mb-3">
                                    <h6 class="card-subtitle mb-2 text-muted">Desired:</h6>
                                    <p class="mb-1"><strong>Teacher:</strong> <%= request.desiredTeacher %></p>
                                    <p class="mb-1"><strong>Slot:</strong> <%= request.desiredSlot %></p>
                                </div>
                                <div class="d-flex justify-content-between align-items-center">
                                    <div class="d-flex align-items-center">
                                        <img src="<%= request.user.profilePhoto || '/images/default-avatar.png' %>" 
                                             class="rounded-circle me-2" 
                                             style="width: 32px; height: 32px; object-fit: cover;">
                                        <small><%= request.user.username %></small>
                                    </div>
                                    
                                    <% if (request.status === 'open' && request.user._id.toString() !== currUser._id.toString()) { %>
                                        <button class="btn btn-sm btn-primary start-chat-btn" data-request-id="<%= request._id %>">
                                            <i class="bi bi-chat-left"></i> Interested
                                        </button>
                                    <% } else if (request.status === 'in-progress') { %>
                                        <% if (request.user._id.toString() === currUser._id.toString()) { %>
                                            <div>
                                                <button class="btn btn-sm btn-success open-chat-btn me-2" data-room-id="<%= request.chatRoomId %>">
                                                    <i class="bi bi-chat-left-text"></i> Chat
                                                </button>
                                                <button class="btn btn-sm btn-danger close-chat-btn" data-request-id="<%= request._id %>">
                                                    <i class="bi bi-x-circle"></i> Dismiss
                                                </button>
                                            </div>
                                        <% } else if (request.interestedUser && request.interestedUser._id.toString() === currUser._id.toString()) { %>
                                            <button class="btn btn-sm btn-success open-chat-btn" data-room-id="<%= request.chatRoomId %>">
                                                <i class="bi bi-chat-left-text"></i> Chat
                                            </button>
                                        <% } %>
                                    <% } %>
                                    
                                    <% if (request.user._id.toString() === currUser._id.toString()) { %>
                                        <button class="btn btn-sm btn-outline-danger delete-request-btn" data-request-id="<%= request._id %>">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    <% } %>
                                </div>
                            </div>
                            <div class="card-footer text-muted">
                                <small>Posted <%= new Date(request.createdAt).toLocaleString() %></small>
                            </div>
                        </div>
                    </div>
                <% }); %>
            </div>
        </div>
        
        <!-- My Requests Tab -->
        <div class="tab-pane fade" id="my" role="tabpanel">
            <div class="row" id="myRequestsContainer">
                <% addDrops.filter(request => request.user._id.toString() === currUser._id.toString()).forEach(request => { %>
                    <div class="col-md-6 mb-4">
                        <div class="card">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h5 class="mb-0"><%= request.currentSubject %> (<%= request.currentSlot %>)</h5>
                                <span class="badge bg-<%= request.status === 'open' ? 'success' : request.status === 'in-progress' ? 'warning' : 'danger' %>">
                                    <%= request.status === 'open' ? 'Open' : request.status === 'in-progress' ? 'In Progress' : 'Closed' %>
                                </span>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <h6 class="card-subtitle mb-2 text-muted">Current:</h6>
                                    <p class="mb-1"><strong>Teacher:</strong> <%= request.currentTeacher %></p>
                                    <p class="mb-1"><strong>Slot:</strong> <%= request.currentSlot %></p>
                                </div>
                                <div class="mb-3">
                                    <h6 class="card-subtitle mb-2 text-muted">Desired:</h6>
                                    <p class="mb-1"><strong>Teacher:</strong> <%= request.desiredTeacher %></p>
                                    <p class="mb-1"><strong>Slot:</strong> <%= request.desiredSlot %></p>
                                </div>
                                <div class="d-flex justify-content-between align-items-center">
                                    <div class="d-flex align-items-center">
                                        <img src="<%= request.user.profilePhoto || '/images/default-avatar.png' %>" 
                                             class="rounded-circle me-2" 
                                             style="width: 32px; height: 32px; object-fit: cover;">
                                        <small><%= request.user.username %></small>
                                    </div>
                                    
                                    <% if (request.status === 'in-progress') { %>
                                        <div>
                                            <button class="btn btn-sm btn-success open-chat-btn me-2" data-room-id="<%= request.chatRoomId %>">
                                                <i class="bi bi-chat-left-text"></i> Chat
                                            </button>
                                            <button class="btn btn-sm btn-danger close-chat-btn" data-request-id="<%= request._id %>">
                                                <i class="bi bi-x-circle"></i> Dismiss
                                            </button>
                                        </div>
                                    <% } %>
                                    
                                    <button class="btn btn-sm btn-outline-danger delete-request-btn" data-request-id="<%= request._id %>">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            </div>
                            <div class="card-footer text-muted">
                                <small>Posted <%= new Date(request.createdAt).toLocaleString() %></small>
                            </div>
                        </div>
                    </div>
                <% }); %>
                
                <% if (!addDrops.some(request => request.user._id.toString() === currUser._id.toString())) { %>
                    <div class="col-12 text-center py-5">
                        <i class="bi bi-info-circle fs-1 text-muted"></i>
                        <p class="mt-3">You haven't created any requests yet</p>
                    </div>
                <% } %>
            </div>
        </div>
        
        <!-- Live Requests Tab -->
        <div class="tab-pane fade" id="live" role="tabpanel">
            <div class="row" id="liveRequestsContainer">
                <% addDrops.filter(request => 
                    request.status === 'in-progress' && 
                    (
                        request.user._id.toString() === currUser._id.toString() || 
                        (request.interestedUser && request.interestedUser._id.toString() === currUser._id.toString())
                    )
                ).forEach(request => { %>
                    <div class="col-md-6 mb-4">
                        <div class="card">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h5 class="mb-0"><%= request.currentSubject %> (<%= request.currentSlot %>)</h5>
                                <span class="badge bg-warning">
                                    In Progress
                                </span>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <h6 class="card-subtitle mb-2 text-muted">Current:</h6>
                                    <p class="mb-1"><strong>Teacher:</strong> <%= request.currentTeacher %></p>
                                    <p class="mb-1"><strong>Slot:</strong> <%= request.currentSlot %></p>
                                </div>
                                <div class="mb-3">
                                    <h6 class="card-subtitle mb-2 text-muted">Desired:</h6>
                                    <p class="mb-1"><strong>Teacher:</strong> <%= request.desiredTeacher %></p>
                                    <p class="mb-1"><strong>Slot:</strong> <%= request.desiredSlot %></p>
                                </div>
                                <div class="d-flex justify-content-between align-items-center">
                                    <div class="d-flex align-items-center">
                                        <img src="<%= request.user.profilePhoto || '/images/default-avatar.png' %>" 
                                             class="rounded-circle me-2" 
                                             style="width: 32px; height: 32px; object-fit: cover;">
                                        <small><%= request.user.username %></small>
                                    </div>
                                    
                                    <button class="btn btn-sm btn-success open-chat-btn" data-room-id="<%= request.chatRoomId %>">
                                        <i class="bi bi-chat-left-text"></i> Chat
                                    </button>
                                    
                                    <% if (request.user._id.toString() === currUser._id.toString()) { %>
                                        <button class="btn btn-sm btn-outline-danger delete-request-btn" data-request-id="<%= request._id %>">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    <% } %>
                                </div>
                            </div>
                            <div class="card-footer text-muted">
                                <small>Posted <%= new Date(request.createdAt).toLocaleString() %></small>
                            </div>
                        </div>
                    </div>
                <% }); %>
                
                <% if (!addDrops.some(request => 
                    request.status === 'in-progress' && 
                    (
                        request.user._id.toString() === currUser._id.toString() || 
                        (request.interestedUser && request.interestedUser._id.toString() === currUser._id.toString())
                    )
                )) { %>
                    <div class="col-12 text-center py-5">
                        <i class="bi bi-info-circle fs-1 text-muted"></i>
                        <p class="mt-3">You don't have any active requests</p>
                    </div>
                <% } %>
            </div>
        </div>
    </div>
</div>

<!-- Create Request Modal -->
<div class="modal fade" id="createAddDropModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create Add/Drop Request</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addDropForm">
                    <div class="mb-3">
                        <label class="form-label">Current Subject</label>
                        <input type="text" class="form-control" name="currentSubject" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Current Teacher</label>
                        <input type="text" class="form-control" name="currentTeacher" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Current Slot</label>
                        <input type="text" class="form-control" name="currentSlot" placeholder="e.g., F1+TF1" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Desired Subject</label>
                        <input type="text" class="form-control" name="desiredSubject" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Desired Teacher</label>
                        <input type="text" class="form-control" name="desiredTeacher" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Desired Slot</label>
                        <input type="text" class="form-control" name="desiredSlot" placeholder="e.g., F2+TF2" required>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="submit" form="addDropForm" class="btn btn-primary">Create Request</button>
            </div>
        </div>
    </div>
</div>

<!-- Chat Modal -->
<div class="modal fade" id="chatModal" tabindex="-1" aria-labelledby="chatModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-scrollable modal-lg">
        <div class="modal-content bg-dark text-white">
            <div class="modal-header">
                <h5 class="modal-title w-100 text-center" id="chatModalLabel">Add/Drop Chat</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body position-relative">
                <button id="scrollToBottomBtn" class="btn btn-primary btn-sm position-absolute end-0 me-3" 
                    style="bottom: 70px; z-index: 10; display: none;">
                    <i class="bi bi-arrow-down"></i> 
                </button>
                <div id="chatWindow" style="max-height: 400px; overflow-y: auto;"></div>
                <div class="mt-3">
                    <div class="input-group">
                        <input type="text" class="form-control" id="chatInput" placeholder="Type a message...">
                        <button class="btn btn-primary" id="sendChatBtn">Send</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script>
      document.addEventListener('DOMContentLoaded', function() {
            const particlesContainer = document.getElementById('particles');
            const particleCount = 50;
            
            for (let i = 0; i < particleCount; i++) {
                const particle = document.createElement('div');
                particle.classList.add('particle');
                
                // Random properties
                const size = Math.random() * 5 + 1;
                const posX = Math.random() * 100;
                const posY = Math.random() * 100;
                const opacity = Math.random() * 0.5 + 0.1;
                const duration = Math.random() * 30 + 10;
                const delay = Math.random() * -20;
                
                particle.style.width = `${size}px`;
                particle.style.height = `${size}px`;
                particle.style.left = `${posX}%`;
                particle.style.top = `${posY}%`;
                particle.style.opacity = opacity;
                particle.style.animationDuration = `${duration}s`;
                particle.style.animationDelay = `${delay}s`;
                
                particlesContainer.appendChild(particle);
            }
            
            // Search input animation
            const searchInput = document.getElementById('searchAddDrop');
            searchInput.addEventListener('focus', function() {
                this.parentElement.style.transform = 'scale(1.02)';
            });
            
            searchInput.addEventListener('blur', function() {
                this.parentElement.style.transform = 'scale(1)';
            });
        });
$(document).ready(function() {
    // Initialize socket.io connection
    const socket = io();
    let currentChatRoom = null;

    // Create new request
    $('#addDropForm').submit(async function(e) {
        e.preventDefault();
        const formData = $(this).serialize();
        
        try {
            const response = await fetch('/add-drop', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: formData
            });
            
            const data = await response.json();
            
            if (response.ok) {
                $('#createAddDropModal').modal('hide');
                location.reload();
            } else {
                alert('Failed to create request: ' + (data.message || 'Unknown error'));
            }
        } catch (error) {
            console.error('Error:', error);
            alert('Failed to create request');
        }
    });
    
    // Search requests
    $('#searchAddDrop').on('input', debounce(async function() {
        const searchTerm = $(this).val();
        await loadAddDrops(searchTerm);
    }, 300));
    
    // Clear search
    $('#clearSearchBtn').click(function() {
        $('#searchAddDrop').val('');
        loadAddDrops();
    });
    
    // Start chat
    $(document).on('click', '.start-chat-btn', async function() {
        const requestId = $(this).data('request-id');
        
        try {
            const response = await fetch(`/add-drop/${requestId}/chat`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            });
            
            const data = await response.json();
            
            if (response.ok) {
                openChatModal(data.chatRoomId);
                location.reload();
            } else {
                alert('Failed to start chat: ' + (data.message || 'Unknown error'));
            }
        } catch (error) {
            console.error('Error:', error);
            alert('Failed to start chat');
        }
    });
    
    // Open chat
    $(document).on('click', '.open-chat-btn', function() {
        const roomId = $(this).data('room-id');
        openChatModal(roomId);
    });
    
    // Close chat
    $(document).on('click', '.close-chat-btn', async function() {
        const requestId = $(this).data('request-id');
        
        if (!confirm('Are you sure you want to dismiss this chat? The request will be available for others.')) return;
        
        try {
            const response = await fetch(`/add-drop/${requestId}/close`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            });
            
            if (response.ok) {
                location.reload();
            } else {
                const data = await response.json();
                alert('Failed to dismiss chat: ' + (data.message || 'Unknown error'));
            }
        } catch (error) {
            console.error('Error:', error);
            alert('Failed to dismiss chat');
        }
    });
    
    // Delete request
    $(document).on('click', '.delete-request-btn', async function() {
        const requestId = $(this).data('request-id');
        
        if (!confirm('Are you sure you want to delete this request?')) return;
        
        try {
            const response = await fetch(`/add-drop/${requestId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                }
            });
            
            if (response.ok) {
                location.reload();
            } else {
                const data = await response.json();
                alert('Failed to delete request: ' + (data.message || 'Unknown error'));
            }
        } catch (error) {
            console.error('Error:', error);
            alert('Failed to delete request');
        }
    });
    
    // Load add/drop requests
    async function loadAddDrops(searchTerm = '') {
        try {
            const url = searchTerm ? `/add-drop?search=${encodeURIComponent(searchTerm)}` : '/add-drop';
            const response = await fetch(url);
            const result = await response.json();
            
            if (!response.ok) {
                throw new Error(result.message || 'Failed to load requests');
            }
            
            $('#addDropContainer').empty();
            $('#myRequestsContainer').empty();
            $('#liveRequestsContainer').empty();
            
            if (!result.addDrops || result.addDrops.length === 0) {
                $('#addDropContainer').html(`
                    <div class="col-12 text-center py-5">
                        <i class="bi bi-info-circle fs-1 text-muted"></i>
                        <p class="mt-3">No requests found</p>
                    </div>
                `);
                $('#myRequestsContainer').html(`
                    <div class="col-12 text-center py-5">
                        <i class="bi bi-info-circle fs-1 text-muted"></i>
                        <p class="mt-3">You haven't created any requests yet</p>
                    </div>
                `);
                $('#liveRequestsContainer').html(`
                    <div class="col-12 text-center py-5">
                        <i class="bi bi-info-circle fs-1 text-muted"></i>
                        <p class="mt-3">You don't have any active requests</p>
                    </div>
                `);
                return;
            }
            
            // All Requests Tab
            result.addDrops.forEach(request => {
                const isOwner = request.user._id.toString() === '<%= currUser._id.toString() %>';
                const isInterestedUser = request.interestedUser && 
                                       request.interestedUser._id.toString() === '<%= currUser._id.toString() %>';
                
                const cardHtml = `
                    <div class="col-md-6 mb-4">
                        <div class="card">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h5 class="mb-0">${request.currentSubject} (${request.currentSlot})</h5>
                                <span class="badge bg-${request.status === 'open' ? 'success' : request.status === 'in-progress' ? 'warning' : 'danger'}">
                                    ${request.status === 'open' ? 'Open' : request.status === 'in-progress' ? 'In Progress' : 'Closed'}
                                </span>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <h6 class="card-subtitle mb-2 text-muted">Current:</h6>
                                    <p class="mb-1"><strong>Teacher:</strong> ${request.currentTeacher}</p>
                                    <p class="mb-1"><strong>Slot:</strong> ${request.currentSlot}</p>
                                </div>
                                <div class="mb-3">
                                    <h6 class="card-subtitle mb-2 text-muted">Desired:</h6>
                                    <p class="mb-1"><strong>Teacher:</strong> ${request.desiredTeacher}</p>
                                    <p class="mb-1"><strong>Slot:</strong> ${request.desiredSlot}</p>
                                </div>
                                <div class="d-flex justify-content-between align-items-center">
                                    <div class="d-flex align-items-center">
                                        <img src="${request.user.profilePhoto || '/images/default-avatar.png'}" 
                                             class="rounded-circle me-2" 
                                             style="width: 32px; height: 32px; object-fit: cover;">
                                        <small>${request.user.username}</small>
                                    </div>
                                    
                                    ${request.status === 'open' && !isOwner ? `
                                        <button class="btn btn-sm btn-primary start-chat-btn" data-request-id="${request._id}">
                                            <i class="bi bi-chat-left"></i> Interested
                                        </button>
                                    ` : request.status === 'in-progress' ? `
                                        ${isOwner ? `
                                            <div>
                                                <button class="btn btn-sm btn-success open-chat-btn me-2" data-room-id="${request.chatRoomId}">
                                                    <i class="bi bi-chat-left-text"></i> Chat
                                                </button>
                                                <button class="btn btn-sm btn-danger close-chat-btn" data-request-id="${request._id}">
                                                    <i class="bi bi-x-circle"></i> Dismiss
                                                </button>
                                            </div>
                                        ` : isInterestedUser ? `
                                            <button class="btn btn-sm btn-success open-chat-btn" data-room-id="${request.chatRoomId}">
                                                <i class="bi bi-chat-left-text"></i> Chat
                                            </button>
                                        ` : ''}
                                    ` : ''}
                                    
                                    ${isOwner ? `
                                        <button class="btn btn-sm btn-outline-danger delete-request-btn" data-request-id="${request._id}">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    ` : ''}
                                </div>
                            </div>
                            <div class="card-footer text-muted">
                                <small>Posted ${new Date(request.createdAt).toLocaleString()}</small>
                            </div>
                        </div>
                    </div>
                `;
                $('#addDropContainer').append(cardHtml);
                
                // My Requests Tab
                if (isOwner) {
                    const myRequestHtml = `
                        <div class="col-md-6 mb-4">
                            <div class="card">
                                <div class="card-header d-flex justify-content-between align-items-center">
                                    <h5 class="mb-0">${request.currentSubject} (${request.currentSlot})</h5>
                                    <span class="badge bg-${request.status === 'open' ? 'success' : request.status === 'in-progress' ? 'warning' : 'danger'}">
                                        ${request.status === 'open' ? 'Open' : request.status === 'in-progress' ? 'In Progress' : 'Closed'}
                                    </span>
                                </div>
                                <div class="card-body">
                                    <div class="mb-3">
                                        <h6 class="card-subtitle mb-2 text-muted">Current:</h6>
                                        <p class="mb-1"><strong>Teacher:</strong> ${request.currentTeacher}</p>
                                        <p class="mb-1"><strong>Slot:</strong> ${request.currentSlot}</p>
                                    </div>
                                    <div class="mb-3">
                                        <h6 class="card-subtitle mb-2 text-muted">Desired:</h6>
                                        <p class="mb-1"><strong>Teacher:</strong> ${request.desiredTeacher}</p>
                                        <p class="mb-1"><strong>Slot:</strong> ${request.desiredSlot}</p>
                                    </div>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div class="d-flex align-items-center">
                                            <img src="${request.user.profilePhoto || '/images/default-avatar.png'}" 
                                                 class="rounded-circle me-2" 
                                                 style="width: 32px; height: 32px; object-fit: cover;">
                                            <small>${request.user.username}</small>
                                        </div>
                                        
                                        ${request.status === 'in-progress' ? `
                                            <div>
                                                <button class="btn btn-sm btn-success open-chat-btn me-2" data-room-id="${request.chatRoomId}">
                                                    <i class="bi bi-chat-left-text"></i> Chat
                                                </button>
                                                <button class="btn btn-sm btn-danger close-chat-btn" data-request-id="${request._id}">
                                                    <i class="bi bi-x-circle"></i> Dismiss
                                                </button>
                                            </div>
                                        ` : ''}
                                        
                                        <button class="btn btn-sm btn-outline-danger delete-request-btn" data-request-id="${request._id}">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </div>
                                </div>
                                <div class="card-footer text-muted">
                                    <small>Posted ${new Date(request.createdAt).toLocaleString()}</small>
                                </div>
                            </div>
                        </div>
                    `;
                    $('#myRequestsContainer').append(myRequestHtml);
                }
                
                // Live Requests Tab
                if (request.status === 'in-progress' && (isOwner || isInterestedUser)) {
                    const liveRequestHtml = `
                        <div class="col-md-6 mb-4">
                            <div class="card">
                                <div class="card-header d-flex justify-content-between align-items-center">
                                    <h5 class="mb-0">${request.currentSubject} (${request.currentSlot})</h5>
                                    <span class="badge bg-warning">
                                        In Progress
                                    </span>
                                </div>
                                <div class="card-body">
                                    <div class="mb-3">
                                        <h6 class="card-subtitle mb-2 text-muted">Current:</h6>
                                        <p class="mb-1"><strong>Teacher:</strong> ${request.currentTeacher}</p>
                                        <p class="mb-1"><strong>Slot:</strong> ${request.currentSlot}</p>
                                    </div>
                                    <div class="mb-3">
                                        <h6 class="card-subtitle mb-2 text-muted">Desired:</h6>
                                        <p class="mb-1"><strong>Teacher:</strong> ${request.desiredTeacher}</p>
                                        <p class="mb-1"><strong>Slot:</strong> ${request.desiredSlot}</p>
                                    </div>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div class="d-flex align-items-center">
                                            <img src="${request.user.profilePhoto || '/images/default-avatar.png'}" 
                                                 class="rounded-circle me-2" 
                                                 style="width: 32px; height: 32px; object-fit: cover;">
                                            <small>${request.user.username}</small>
                                        </div>
                                        
                                        <button class="btn btn-sm btn-success open-chat-btn" data-room-id="${request.chatRoomId}">
                                            <i class="bi bi-chat-left-text"></i> Chat
                                        </button>
                                        
                                        ${isOwner ? `
                                            <button class="btn btn-sm btn-outline-danger delete-request-btn" data-request-id="${request._id}">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        ` : ''}
                                    </div>
                                </div>
                                <div class="card-footer text-muted">
                                    <small>Posted ${new Date(request.createdAt).toLocaleString()}</small>
                                </div>
                            </div>
                        </div>
                    `;
                    $('#liveRequestsContainer').append(liveRequestHtml);
                }
            });
            
            // Show empty states if no content in tabs
            if ($('#myRequestsContainer').children().length === 0) {
                $('#myRequestsContainer').html(`
                    <div class="col-12 text-center py-5">
                        <i class="bi bi-info-circle fs-1 text-muted"></i>
                        <p class="mt-3">You haven't created any requests yet</p>
                    </div>
                `);
            }
            
            if ($('#liveRequestsContainer').children().length === 0) {
                $('#liveRequestsContainer').html(`
                    <div class="col-12 text-center py-5">
                        <i class="bi bi-info-circle fs-1 text-muted"></i>
                        <p class="mt-3">You don't have any active requests</p>
                    </div>
                `);
            }
        } catch (error) {
            console.error('Error:', error);
            $('#addDropContainer').html(`
                <div class="col-12 text-center py-5">
                    <i class="bi bi-exclamation-triangle fs-1 text-danger"></i>
                    <p class="mt-3">Failed to load requests: ${error.message}</p>
                </div>
            `);
        }
    }
    
    // Debounce function for search
    function debounce(func, wait) {
        let timeout;
        return function() {
            const context = this, args = arguments;
            clearTimeout(timeout);
            timeout = setTimeout(() => func.apply(context, args), wait);
        };
    }
    
    // Open chat modal with specific room
    function openChatModal(roomId) {
        currentChatRoom = roomId;
        $('#chatModal').modal('show');
        $('#chatWindow').empty();
        
        // Join the room
        socket.emit('joinAddDropRoom', roomId);
        
        // Load previous messages
        fetch(`/add-drop/${roomId}/messages`)
            .then(response => response.json())
            .then(messages => {
                messages.forEach(msg => {
                    addMessageToChat(msg);
                });
            })
            .catch(error => {
                console.error('Error loading messages:', error);
            });
    }
    
    // Handle sending messages
    $('#sendChatBtn').click(sendMessage);
    $('#chatInput').keypress(function(e) {
        if (e.which === 13) {
            sendMessage();
        }
    });
    
    function sendMessage() {
        const message = $('#chatInput').val().trim();
        if (!message || !currentChatRoom) return;
        
        // Save the message to the database first
        fetch(`/add-drop/${currentChatRoom}/messages`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                username: '<%= currUser.username %>',
                text: message
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Emit the message via Socket.IO
                socket.emit('addDropMessage', {
                    roomId: currentChatRoom,
                    message: {
                        username: '<%= currUser.username %>',
                        text: message,
                        time: new Date().toISOString()
                    }
                });
                $('#chatInput').val('');
            }
        })
        .catch(error => {
            console.error('Error sending message:', error);
        });
    }
    
    // Add message to chat window
    function addMessageToChat(msg) {
        const color = getUsernameColor(msg.username);
        const time = formatTimestamp(msg.time || msg.createdAt);
        
        const messageHtml = `
            <div class="mb-2">
                <strong style="color:${color}">${msg.username}</strong>
                <small class="text-muted">[${time}]</small>: ${msg.text}
            </div>
        `;
        
        $('#chatWindow').append(messageHtml);
        scrollToBottom();
    }
    
    // Socket.io message handler
    socket.on('addDropMessage', function(msg) {
        if (msg.roomId === currentChatRoom) {
            addMessageToChat(msg.message);
        }
    });
    
    // Helper functions
    function getUsernameColor(username) {
        // Simple hash function to generate consistent color for a username
        let hash = 0;
        for (let i = 0; i < username.length; i++) {
            hash = username.charCodeAt(i) + ((hash << 5) - hash);
        }
        const hue = Math.abs(hash % 360);
        return `hsl(${hue}, 70%, 60%)`;
    }
    
    function formatTimestamp(timestamp) {
        const date = new Date(timestamp);
        return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    }
    
    function scrollToBottom() {
        const chatWindow = $('#chatWindow')[0];
        chatWindow.scrollTop = chatWindow.scrollHeight;
    }
});
</script>
