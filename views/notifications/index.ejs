<% layout("/layouts/boilerplate") %>

<style>
    html, body {
        background-color: #0a0a0a;
        color: #fff;
    }

    /* Cosmic gradient animation for the background */
    @keyframes cosmicBackground {
        0% { background-position: 0% 0%; }
        50% { background-position: 100% 100%; }
        100% { background-position: 0% 0%; }
    }

    /* Glow pulse animation */
    @keyframes glowPulse {
        0% { box-shadow: 0 0 5px rgba(0, 216, 255, 0.5); }
        50% { box-shadow: 0 0 20px rgba(0, 216, 255, 0.9); }
        100% { box-shadow: 0 0 5px rgba(0, 216, 255, 0.5); }
    }

    /* Floating animation */
    @keyframes float {
        0% { transform: translateY(0px); }
        50% { transform: translateY(-8px); }
        100% { transform: translateY(0px); }
    }

    /* Particle animation */
    @keyframes particleMove {
        0% { transform: translate(0, 0); opacity: 0; }
        20% { opacity: 1; }
        100% { transform: translate(var(--tx), var(--ty)); opacity: 0; }
    }

    /* Main container with cosmic background */
    .notifications-container {
        max-width: 800px;
        margin: 2rem auto;
        padding: 2rem;
        position: relative;
        overflow: hidden;
        background: radial-gradient(ellipse at center, #1a1a1a 0%, #0a0a0a 100%);
        border-radius: 20px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
        border: 1px solid rgba(0, 216, 255, 0.1);
    }

    /* Cosmic particles effect */
    .notifications-container::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: 
            radial-gradient(2px 2px at 20% 30%, rgba(0, 216, 255, 0.8), rgba(0, 216, 255, 0)),
            radial-gradient(2px 2px at 80% 70%, rgba(0, 140, 255, 0.8), rgba(0, 140, 255, 0)),
            radial-gradient(3px 3px at 40% 80%, rgba(0, 216, 255, 0.8), rgba(0, 216, 255, 0)),
            radial-gradient(2px 2px at 60% 10%, rgba(0, 140, 255, 0.8), rgba(0, 140, 255, 0));
        background-repeat: no-repeat;
        animation: cosmicBackground 20s infinite linear;
        z-index: 0;
        pointer-events: none;
    }

    /* Header with holographic effect */
    .notification-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
        position: relative;
        z-index: 1;
    }

    .notification-header h2 {
        font-size: 2.2rem;
        background: linear-gradient(90deg, #00d8ff, #008cff, #00d8ff);
        -webkit-background-clip: text;
        background-clip: text;
        color: transparent;
        margin: 0;
        text-shadow: 0 0 15px rgba(0, 216, 255, 0.3);
        letter-spacing: 1px;
        position: relative;
        display: inline-block;
    }

    .notification-header h2::after {
        content: '';
        position: absolute;
        bottom: -5px;
        left: 0;
        width: 100%;
        height: 2px;
        background: linear-gradient(90deg, transparent, #00d8ff, transparent);
        transform: scaleX(0);
        transform-origin: right;
        transition: transform 0.6s cubic-bezier(0.645, 0.045, 0.355, 1);
    }

    .notification-header:hover h2::after {
        transform: scaleX(1);
        transform-origin: left;
    }

    /* Futuristic button with animated gradient */
    .mark-all-read-btn {
        background: linear-gradient(90deg, #00d8ff, #008cff, #00d8ff);
        background-size: 200% 200%;
        border: none;
        padding: 0.8rem 1.8rem;
        border-radius: 50px;
        color: #000;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
        box-shadow: 0 4px 20px rgba(0, 216, 255, 0.4);
        position: relative;
        overflow: hidden;
        text-transform: uppercase;
        letter-spacing: 1px;
        font-size: 0.85rem;
        animation: glowPulse 3s infinite;
        z-index: 1;
    }

    .mark-all-read-btn::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
        transition: 0.6s;
        z-index: -1;
    }

    .mark-all-read-btn:hover {
        transform: translateY(-3px);
        box-shadow: 0 8px 30px rgba(0, 216, 255, 0.6);
        animation: glowPulse 1.5s infinite, gradientPulse 3s ease infinite;
    }

    .mark-all-read-btn:hover::before {
        left: 100%;
    }

    /* Notification list with depth effect */
    .notification-list {
        display: grid;
        gap: 1.5rem;
        position: relative;
        z-index: 1;
    }

    /* Holographic notification cards */
    .notification-item {
        display: flex;
        padding: 1.8rem;
       
        background: rgba(15, 15, 15, 0.7);
        backdrop-filter: blur(12px);
        transition: all 0.6s cubic-bezier(0.23, 1, 0.32, 1);
        position: relative;
        overflow: hidden;
        border: 1px solid rgba(0, 216, 255, 0.1);
        box-shadow: 0 8px 40px rgba(0, 0, 0, 0.4);
    }

    /* Holographic edge glow */
    .notification-item::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 1px;
        background: linear-gradient(90deg, transparent, #00d8ff, transparent);
        box-shadow: 0 0 10px #00d8ff;
        opacity: 0;
        transition: opacity 0.4s ease;
    }

    .notification-item:hover::before {
        opacity: 1;
    }

    /* Particle effects for unread notifications */
    .notification-item.unread::after {
        content: '';
        position: absolute;
        top: -10px;
        right: -10px;
        width: 20px;
        height: 20px;
        background: #00d8ff;
        border-radius: 50%;
        box-shadow: 0 0 15px #00d8ff, 0 0 30px #00d8ff;
        animation: float 3s ease-in-out infinite;
        z-index: 1000;
    }

    /* Avatar with animated border */
    .notification-avatar {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        margin-right: 1.5rem;
        object-fit: cover;
        border: 2px solid transparent;
        background: linear-gradient(45deg, #00d8ff, #008cff) border-box;
        box-shadow: 0 0 15px rgba(0, 216, 255, 0.3);
        transition: all 0.5s ease;
        flex-shrink: 0;
        position: relative;
        z-index: 1;
    }

    .notification-avatar::before {
        content: '';
        position: absolute;
        top: -3px;
        left: -3px;
        right: -3px;
        bottom: -3px;
        border-radius: 50%;
        background: linear-gradient(45deg, #00d8ff, #008cff, #00d8ff);
        background-size: 200% 200%;
        z-index: -1;
        opacity: 0;
        transition: opacity 0.4s ease;
        animation: gradientPulse 4s ease infinite;
    }

    .notification-item:hover .notification-avatar {
        transform: scale(1.1);
        box-shadow: 0 0 25px rgba(0, 216, 255, 0.6);
    }

    .notification-item:hover .notification-avatar::before {
        opacity: 1;
    }

    /* Content styling */
    .notification-content {
        flex: 1;
        position: relative;
    }

    .notification-message {
        margin-bottom: 0.8rem;
        font-size: 1.1rem;
        line-height: 1.6;
        color: #fff;
        font-weight: 400;
        position: relative;
    }

    .notification-message strong {
        color: #00d8ff;
        font-weight: 500;
        text-shadow: 0 0 10px rgba(0, 216, 255, 0.3);
    }

    .notification-time {
        color: rgba(255, 255, 255, 0.7);
        font-size: 0.85rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-family: 'Courier New', monospace;
    }

    .notification-time::before {
        content: '';
        display: inline-block;
        width: 5px;
        height: 5px;
        background: #00d8ff;
        border-radius: 50%;
        box-shadow: 0 0 5px #00d8ff;
    }

    /* Post preview with hover effect */
    .notification-post-preview {
        width: 90px;
        height: 90px;
        border-radius: 10px;
        object-fit: cover;
        margin-left: 1.5rem;
        border: 1px solid rgba(0, 216, 255, 0.2);
        transition: all 0.5s cubic-bezier(0.23, 1, 0.32, 1);
        flex-shrink: 0;
        position: relative;
        overflow: hidden;
    }

    .notification-post-preview::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(135deg, rgba(0, 216, 255, 0.2), transparent);
        opacity: 0;
        transition: opacity 0.4s ease;
    }

    .notification-item:hover .notification-post-preview {
        transform: scale(1.08) rotate(2deg);
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.5);
    }

    .notification-item:hover .notification-post-preview::before {
        opacity: 1;
    }

    /* Empty state with cosmic design */
    .empty-state {
        text-align: center;
        padding: 4rem 2rem;
        background: rgba(15, 15, 15, 0.6);
        border-radius: 20px;
        border: 1px dashed rgba(0, 216, 255, 0.2);
        margin-top: 2rem;
        position: relative;
        overflow: hidden;
        backdrop-filter: blur(5px);
    }

    .empty-state::before {
        content: '';
        position: absolute;
        top: -50%;
        left: -50%;
        width: 200%;
        height: 200%;
        background: radial-gradient(circle, rgba(0, 216, 255, 0.05) 0%, rgba(0, 0, 0, 0) 70%);
        animation: cosmicBackground 15s linear infinite;
        z-index: -1;
    }

    .empty-state i {
        font-size: 4.5rem;
        margin-bottom: 1.5rem;
        background: linear-gradient(90deg, #00d8ff, #008cff);
        -webkit-background-clip: text;
        background-clip: text;
        color: transparent;
        display: inline-block;
        animation: float 5s ease-in-out infinite;
        filter: drop-shadow(0 0 10px rgba(0, 216, 255, 0.5));
    }

    .empty-state h3 {
        font-size: 1.8rem;
        color: #fff;
        margin-bottom: 0.8rem;
        text-shadow: 0 0 10px rgba(0, 216, 255, 0.3);
    }

    .empty-state p {
        color: rgba(255, 255, 255, 0.7);
        max-width: 400px;
        margin: 0 auto;
        line-height: 1.6;
        font-size: 1.1rem;
    }

    /* Responsive design */
    @media (max-width: 768px) {
        .notifications-container {
            padding: 1.5rem;
            margin: 1rem;
            border-radius: 15px;
        }

        .notification-item {
            flex-direction: column;
            padding: 1.5rem;
        }

        .notification-avatar {
            margin-right: 0;
            margin-bottom: 1.2rem;
            width: 70px;
            height: 70px;
        }

        .notification-post-preview {
            margin-left: 0;
            margin-top: 1.2rem;
            width: 100%;
            height: 150px;
        }

        .notification-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 1rem;
        }

        .notification-header h2 {
            font-size: 1.8rem;
        }
    }
     .particles {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        pointer-events: none;
        z-index: 0;
        overflow: hidden;
    }

    .particle {
        position: absolute;
        width: 2px;
        height: 2px;
        background: #00d8ff;
        border-radius: 50%;
        animation: particleMove 1.5s ease-out forwards;
        box-shadow: 0 0 5px #00d8ff;
    }
</style>
<br><br>
<div class="notifications-container">
    <div class="notification-header">
        <h2>Notifications</h2>
        <% if (notifications.length > 0) { %>
            <button class="mark-all-read-btn" id="markAllReadBtn">
                Mark All as Read
            </button>
        <% } %>
    </div>
    
    <% if (notifications.length > 0) { %>
        <% notifications.forEach(notification => { %>
            <div class="notification-item <%= notification.isRead ? '' : 'unread' %>">
                <!-- Debug output (remove in production) -->
                <% console.log('Notification:', notification) %>
                
                <img src="<%= notification.sender?.profilePhoto || '/images/default-avatar.png' %>" 
                     class="notification-avatar" 
                     alt="<%= notification.sender?.username || 'User' %>">
                
                <div class="notification-content">
                    <div class="notification-message">
                        <!-- Fallback message if notification.message is empty -->
                        <%= notification.message || 
                            `${notification.sender?.username || 'Someone'} performed an action` %>
                    </div>
                    
                    <div class="notification-time">
                        <%= new Date(notification.createdAt).toLocaleString() %>
                    </div>
                    
                    <!-- Show action button for relevant notification types -->
                    <% if (notification.relatedPost) { %>
                        <div class="notification-actions">
                            
                        </div>
                    <% } %>
                </div>
                
                <!-- Show post preview if available -->
                <% if (notification.relatedPost?.imageUrl) { %>
                    <img src="<%= notification.relatedPost.imageUrl %>" 
                         class="notification-post-preview" 
                         alt="Post preview">
                <% } %>
            </div>
        <% }) %>
    <% } else { %>
        <div class="empty-state">
            <i class="bi bi-bell"></i>
            <h3>No notifications yet</h3>
            <p>When you get notifications, they'll appear here</p>
        </div>
    <% } %>
</div>

<script>
    // Mark all notifications as read
   document.getElementById('markAllReadBtn')?.addEventListener('click', async () => {
        try {
            const response = await fetch('/notifications/mark-all-read', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            
            const result = await response.json();
            
            if (result.success) {
                // Remove unread styling from all notifications
                document.querySelectorAll('.notification-item.unread').forEach(item => {
                    item.classList.remove('unread');
                });
            }
        } catch (error) {
            console.error('Error marking all as read:', error);
        }
    });
    // Handle notification clicks
    document.querySelectorAll('.notification-item').forEach(item => {
        item.addEventListener('click', (e) => {
            // Don't navigate if user clicked on a button inside the notification
            if (e.target.tagName === 'BUTTON' || e.target.tagName === 'A') {
                return;
            }
            
            // Navigate based on notification type
            // You can add more specific navigation logic here
            window.location.href = '/notifications';
        });
    });
     document.querySelectorAll('.notification-item').forEach(item => {
        // Add particles on hover
        item.addEventListener('mouseenter', function() {
            if (this.querySelector('.particles')) return;
            
            const particles = document.createElement('div');
            particles.className = 'particles';
            this.appendChild(particles);
            
            // Create 5 particles
            for (let i = 0; i < 5; i++) {
                const particle = document.createElement('div');
                particle.className = 'particle';
                particle.style.setProperty('--tx', `${Math.random() * 100 - 50}px`);
                particle.style.setProperty('--ty', `${Math.random() * 100 - 50}px`);
                particle.style.left = `${Math.random() * 100}%`;
                particle.style.top = `${Math.random() * 100}%`;
                particle.style.animationDelay = `${Math.random() * 0.5}s`;
                particles.appendChild(particle);
            }
        });
        
        // Clean up particles when mouse leaves
        item.addEventListener('mouseleave', function() {
            const particles = this.querySelector('.particles');
            if (particles) {
                setTimeout(() => {
                    particles.remove();
                }, 1000);
            }
        });
    });
</script>
