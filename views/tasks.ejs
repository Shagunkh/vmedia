<% layout("/layouts/boilerplate") %>
<head>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css"/>
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
    @import url('https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;500;600;700&display=swap');
    
    :root {
      --primary-gradient: linear-gradient(135deg, #00d8ff, #008cff, #a100ff);
      --dark-bg: #0f0f1a;
      --darker-bg: #080811;
      --card-bg: rgba(30, 42, 59, 0.6);
      --text-primary: #f8fafc;
      --text-secondary: #f6f6f6;
      --neon-blue: #00f0ff;
      --neon-purple: #a100ff;
      --glass-border: rgba(255, 255, 255, 0.1);
    }
    
    body {
      font-family: 'Space Grotesk', sans-serif;
      background-color: var(--dark-bg);
      color: var(--text-primary);
      min-height: 100vh;
      overflow-x: hidden;
      margin: 0;
      padding: 0;
      background-image: 
        radial-gradient(circle at 10% 20%, rgba(0, 216, 255, 0.05) 0%, transparent 20%),
        radial-gradient(circle at 90% 80%, rgba(161, 0, 255, 0.05) 0%, transparent 20%);
    }
    
    /* Floating background elements */
    body::before {
      content: '';
      position: fixed;
      top: -50vh;
      left: -50vw;
      width: 200vw;
      height: 200vh;
      background: 
        radial-gradient(circle at 20% 30%, rgba(0, 216, 255, 0.03) 0%, transparent 25%),
        radial-gradient(circle at 80% 70%, rgba(161, 0, 255, 0.03) 0%, transparent 25%);
      z-index: -1;
      animation: floatBackground 60s linear infinite alternate;
    }
    html, body {
  height: 100%;
  overflow-y: auto; /* enables vertical scroll */
  overflow-x: hidden; /* optional: disables horizontal scroll */
  margin: 0;
  padding: 0;
}

    
    @keyframes floatBackground {
      0% { transform: translate(0, 0) rotate(0deg); }
      25% { transform: translate(-5vw, 5vh) rotate(2deg); }
      50% { transform: translate(5vw, -5vh) rotate(-2deg); }
      75% { transform: translate(-3vw, 3vh) rotate(1deg); }
      100% { transform: translate(3vw, -3vh) rotate(-1deg); }
    }
    
    .gradient-text {
      background: var(--primary-gradient);
      -webkit-background-clip: text;
      background-clip: text;
      color: transparent;
      text-shadow: 0 0 10px rgba(0, 216, 255, 0.3);
    }
    
    .gradient-bg {
      background: var(--primary-gradient);
      box-shadow: 0 0 15px rgba(0, 216, 255, 0.3);
    }
    
    .card {
      background: var(--card-bg);
      backdrop-filter: blur(12px);
      -webkit-backdrop-filter: blur(12px);
      border-radius: 16px;
      border: 1px solid var(--glass-border);
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
      transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.1);
      overflow: hidden;
      position: relative;
    }
    
    .card::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 3px;
      background: var(--primary-gradient);
      opacity: 0.7;
      transition: all 0.4s ease;
    }
    
    .card:hover {
      transform: translateY(-5px) scale(1.01);
      box-shadow: 0 12px 40px rgba(0, 0, 0, 0.4);
    }
    
    .card:hover::before {
      opacity: 1;
      height: 5px;
    }
    
    .task-item {
      transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
      border-left: 3px solid transparent;
      background-color: rgba(30, 41, 59, 0.4);
      backdrop-filter: blur(5px);
      position: relative;
      overflow: hidden;
    }
    
    .task-item::after {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, rgba(0, 216, 255, 0.1), rgba(161, 0, 255, 0.1));
      opacity: 0;
      transition: opacity 0.3s ease;
    }
    
    .task-item:hover {
      transform: translateX(8px);
      border-left-color: var(--neon-blue);
      background-color: rgba(30, 41, 59, 0.7);
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
    }
    
    .task-item:hover::after {
      opacity: 0.3;
    }
    
    .task-checkbox:checked ~ .ml-3 .font-medium {
      text-decoration: line-through;
      color: var(--text-secondary);
    }
    
    .timer-display {
      font-family: 'Space Grotesk', sans-serif;
      font-weight: 700;
      letter-spacing: 2px;
      text-shadow: 0 0 15px rgba(0, 240, 255, 0.7);
      font-size: 5rem;
      background: var(--primary-gradient);
      -webkit-background-clip: text;
      background-clip: text;
      color: transparent;
      animation: glow 2s infinite alternate;
    }
    
    @keyframes glow {
      from { text-shadow: 0 0 10px rgba(0, 240, 255, 0.7); }
      to { text-shadow: 0 0 20px rgba(161, 0, 255, 0.7); }
    }
    
    .timer-btn {
      transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
      transform-style: preserve-3d;
      position: relative;
    }
    
    .timer-btn::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: inherit;
      border-radius: inherit;
      filter: blur(5px);
      opacity: 0.7;
      z-index: -1;
      transform: translateZ(-1px);
    }
    
    .timer-btn:hover {
      transform: translateY(-3px) scale(1.05);
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
    }
    
    .task-actions {
      transition: all 0.3s ease;
      opacity: 0;
      transform: translateX(10px);
    }
    
    .fade-in {
      animation: fadeIn 0.5s cubic-bezier(0.39, 0.575, 0.565, 1) both;
    }
    
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(20px); }
      to { opacity: 1; transform: translateY(0); }
    }
    
    .pulse {
      animation: pulse 2s infinite cubic-bezier(0.4, 0, 0.6, 1);
    }
    
    @keyframes pulse {
      0%, 100% { transform: scale(1); box-shadow: 0 0 0 0 rgba(0, 216, 255, 0.7); }
      50% { transform: scale(1.05); box-shadow: 0 0 0 15px rgba(0, 216, 255, 0); }
    }
    
    /* Floating animation */
    .float {
      animation: float 6s ease-in-out infinite;
    }
    
    @keyframes float {
      0% { transform: translateY(0px); }
      50% { transform: translateY(-10px); }
      100% { transform: translateY(0px); }
    }
    
    /* Custom scrollbar */
    ::-webkit-scrollbar {
      width: 8px;
    }
    
    ::-webkit-scrollbar-track {
      background: var(--darker-bg);
      border-radius: 10px;
    }
    
    ::-webkit-scrollbar-thumb {
      background: linear-gradient(var(--neon-blue), var(--neon-purple));
      border-radius: 10px;
    }
    
    ::-webkit-scrollbar-thumb:hover {
      background: linear-gradient(var(--neon-blue), #8000ff);
    }
    
    /* Layout with flex instead of grid */
    .dashboard-container {
      display: flex;
      flex-direction: column;
      min-height: 100vh;
      padding: 2rem;
      gap: 1.5rem;
    }
    
    .header-section {
      display: flex;
      justify-content: space-between;
      align-items: flex-end;
      flex-wrap: wrap;
      gap: 1rem;
    }
    
    .content-section {
      display: flex;
      flex-wrap: wrap;
      gap: 1.5rem;
      color: #f6f6f6;
    }
    
    .content-column {
      flex: 1;
      min-width: 300px;
      display: flex;
      flex-direction: column;
      gap: 1.5rem;
    }
    
    .footer-section {
      display: flex;
      justify-content: center;
      margin-top: auto;
    }
    
    /* Glass morphism effect */
    .glass {
      background: rgba(30, 33, 59, 0.3);
      backdrop-filter: blur(10px);
      -webkit-backdrop-filter: blur(10px);
      border: 1px solid rgba(255, 255, 255, 0.1);
    }
    
    /* Neon border effect */
    .neon-border {
      position: relative;
    }
    
    .neon-border::after {
      content: '';
      position: absolute;
      top: -2px;
      left: -2px;
      right: -2px;
      bottom: -2px;
      border-radius: inherit;
      background: var(--primary-gradient);
      z-index: -1;
      opacity: 0;
      transition: opacity 0.3s ease;
    }
    
    .neon-border:hover::after {
      opacity: 0.7;
    }
    
    /* Input styles */
    input, textarea, select {
      background: rgba(50, 50, 51, 0.7) !important;
      border: 1px solid rgba(255, 255, 255, 0.1) !important;
      transition: all 0.3s ease !important;
      color: white !important;
    }
    
    input:focus, textarea:focus, select:focus {
      border-color: var(--neon-blue) !important;
      box-shadow: 0 0 0 2px rgba(0, 240, 255, 0.2) !important;
      outline: none !important;
    }
    
    input::placeholder {
      color: white !important;
      opacity: 0.7 !important;
    }
    
    /* Button styles */
    .btn {
      transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
      position: relative;
      overflow: hidden;
    }
    
    .btn::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
      transition: all 0.5s ease;
    }
    
    .btn:hover::before {
      left: 100%;
    }
    
    /* Modal styles */
    .modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.8);
      z-index: 1000;
      justify-content: center;
      align-items: center;
      backdrop-filter: blur(5px);
    }
    
    .modal-content {
      background: var(--darker-bg);
      border-radius: 20px;
      padding: 2rem;
      width: 90%;
      max-width: 500px;
      box-shadow: 0 25px 50px rgba(0, 0, 0, 0.5);
      animation: modalFadeIn 0.4s cubic-bezier(0.39, 0.575, 0.565, 1) both;
      border: 1px solid var(--glass-border);
      position: relative;
      overflow: hidden;
    }
    
    .modal-content::before {
      content: '';
      position: absolute;
      top: -50%;
      left: -50%;
      width: 200%;
      height: 200%;
      background: radial-gradient(circle, rgba(0, 240, 255, 0.1) 0%, transparent 70%);
      animation: rotate 20s linear infinite;
      z-index: -1;
    }
    
    @keyframes rotate {
      from { transform: rotate(0deg); }
      to { transform: rotate(360deg); }
    }
    
    @keyframes modalFadeIn {
      from { opacity: 0; transform: translateY(-30px) scale(0.95); }
      to { opacity: 1; transform: translateY(0) scale(1); }
    }
    
    /* Checkbox styles */
    .task-checkbox {
      -webkit-appearance: none;
      -moz-appearance: none;
      appearance: none;
      width: 20px;
      height: 20px;
      border: 2px solid var(--neon-blue);
      border-radius: 4px;
      outline: none;
      cursor: pointer;
      position: relative;
      transition: all 0.2s ease;
      color: white;
    }
    
    .task-checkbox:checked {
      background-color: var(--neon-blue);
      border-color: var(--neon-blue);
    }
    
    .task-checkbox:checked::after {
      content: '✓';
      position: absolute;
      color: white;
      font-size: 14px;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
    }
    
    /* Responsive adjustments */
    @media (max-width: 768px) {
      .content-section {
        flex-direction: column;
      }
      
      .timer-display {
        font-size: 3rem;
      }
      
      .dashboard-container {
        padding: 1rem;
      }
    }
    
    /* Special effects */
    .particle {
      position: absolute;
      background: var(--neon-blue);
      border-radius: 50%;
      pointer-events: none;
      z-index: -1;
    }
    
    .confetti {
      position: fixed;
      width: 10px;
      height: 10px;
      background: var(--neon-blue);
      opacity: 0;
      z-index: 9999;
      animation: confettiFall 3s ease-in-out forwards;
    }
    
    @keyframes confettiFall {
      0% { transform: translateY(-100vh) rotate(0deg); opacity: 1; }
      100% { transform: translateY(100vh) rotate(360deg); opacity: 0; }
    }
    
    /* Shake animation */
    @keyframes shake {
      0%, 100% { transform: translateX(0); }
      10%, 30%, 50%, 70%, 90% { transform: translateX(-5px); }
      20%, 40%, 60%, 80% { transform: translateX(5px); }
    }
    
    .animate-shake {
      animation: shake 0.5s cubic-bezier(0.36, 0.07, 0.19, 0.97) both;
    }
    
    /* Floating elements */
    .floating-element {
      animation: floatElement 8s ease-in-out infinite;
    }
    
    @keyframes floatElement {
      0%, 100% { transform: translateY(0) rotate(0deg); }
      50% { transform: translateY(-20px) rotate(2deg); }
    }
    /* Add these styles to fix the functionality */

/* Ensure task items and their interactive elements are always clickable */
.task-item {
  pointer-events: auto !important;
  position: relative;
  z-index: 1;
  color: #f6f6f6;
}

/* Make sure checkboxes and delete buttons are always accessible */
.task-checkbox {
  pointer-events: auto !important;
  z-index: 2;
  position: relative;
}



/* Fix for hover effects not interfering with clicks */
.task-item:hover .task-actions {
  opacity: 1 !important;
  transform: translateX(0) !important;
  pointer-events: auto !important;
}

/* Ensure animations don't block interactions */
.animate__animated {
  pointer-events: auto !important;
}

/* Fix for checkbox styling */
.task-checkbox {
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  width: 20px;
  height: 20px;
  border: 2px solid var(--neon-blue);
  border-radius: 4px;
  outline: none;
  cursor: pointer;
  position: relative;
  transition: all 0.2s ease;
  background-color: rgba(15, 15, 26, 0.7);
  color: white;
}

.task-checkbox:checked {
  background-color: var(--neon-blue);
  border-color: var(--neon-blue);
}

.task-checkbox:checked::after {
  content: '✓';
  position: absolute;
  color: white;
  font-size: 14px;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}


.colorp {
    color: #f6f6f6;
}
.timesize{
    font-size: 28px;
}
:root {
      --primary-gradient: linear-gradient(90deg, #00d8ff, #008cff);
      --dark-bg: #0a0a0a;
      --darker-bg: #050505;
      --card-bg: rgba(30, 42, 59, 0.6);
      --text-primary: #f8fafc;
      --text-secondary: #f6f6f6;
      --neon-blue: #00d8ff;
      --neon-purple: #008cff;
      --glass-border: rgba(255, 255, 255, 0.1);
    }
    
    body {
      font-family: 'Space Grotesk', sans-serif;
      background-color: var(--dark-bg);
      color: var(--text-primary);
      min-height: 100vh;
      overflow-x: hidden;
      margin: 0;
      padding: 0;
      background-image: 
        radial-gradient(circle at 10% 20%, rgba(0, 216, 255, 0.05) 0%, transparent 20%),
        radial-gradient(circle at 90% 80%, rgba(0, 140, 255, 0.05) 0%, transparent 20%);
    }
    
    /* Floating background elements */
    body::before {
      content: '';
      position: fixed;
      top: -50vh;
      left: -50vw;
      width: 200vw;
      height: 200vh;
      background: 
        radial-gradient(circle at 20% 30%, rgba(0, 216, 255, 0.03) 0%, transparent 25%),
        radial-gradient(circle at 80% 70%, rgba(0, 140, 255, 0.03) 0%, transparent 25%);
      z-index: -1;
      animation: floatBackground 60s linear infinite alternate;
    }
    html, body {
  height: 100%;
  overflow-y: auto; /* enables vertical scroll */
  overflow-x: hidden; /* optional: disables horizontal scroll */
  margin: 0;
  padding: 0;
}

    
    @keyframes floatBackground {
      0% { transform: translate(0, 0) rotate(0deg); }
      25% { transform: translate(-5vw, 5vh) rotate(2deg); }
      50% { transform: translate(5vw, -5vh) rotate(-2deg); }
      75% { transform: translate(-3vw, 3vh) rotate(1deg); }
      100% { transform: translate(3vw, -3vh) rotate(-1deg); }
    }
    
    .gradient-text {
      background: var(--primary-gradient);
      -webkit-background-clip: text;
      background-clip: text;
      color: transparent;
      text-shadow: 0 0 10px rgba(0, 216, 255, 0.3);
    }
    
    .gradient-bg {
      background: var(--primary-gradient);
      box-shadow: 0 0 15px rgba(0, 216, 255, 0.3);
    }
    
    .card {
      background: var(--card-bg);
      backdrop-filter: blur(12px);
      -webkit-backdrop-filter: blur(12px);
      border-radius: 16px;
      border: 1px solid var(--glass-border);
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
      transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.1);
      overflow: hidden;
      position: relative;
    }
    
    .card::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 3px;
      background: var(--primary-gradient);
      opacity: 0.7;
      transition: all 0.4s ease;
    }
    
    .card:hover {
      transform: translateY(-5px) scale(1.01);
      box-shadow: 0 12px 40px rgba(0, 0, 0, 0.4);
    }
    
    .card:hover::before {
      opacity: 1;
      height: 5px;
    }
    
    .task-item {
      transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
      border-left: 3px solid transparent;
      background-color: rgba(30, 41, 59, 0.4);
      backdrop-filter: blur(5px);
      position: relative;
      overflow: hidden;
    }
    
    .task-item::after {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, rgba(0, 216, 255, 0.1), rgba(0, 140, 255, 0.1));
      opacity: 0;
      transition: opacity 0.3s ease;
    }
    
    .task-item:hover {
      transform: translateX(8px);
      border-left-color: var(--neon-blue);
      background-color: rgba(30, 41, 59, 0.7);
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
    }
    
    .task-item:hover::after {
      opacity: 0.3;
    }
    
    .task-checkbox:checked ~ .ml-3 .font-medium {
      text-decoration: line-through;
      color: var(--text-secondary);
    }
    
    .timer-display {
      font-family: 'Space Grotesk', sans-serif;
      font-weight: 700;
      letter-spacing: 2px;
      text-shadow: 0 0 15px rgba(0, 216, 255, 0.7);
      font-size: 5rem;
      background: var(--primary-gradient);
      -webkit-background-clip: text;
      background-clip: text;
      color: transparent;
      animation: glow 2s infinite alternate;
    }
    
    @keyframes glow {
      from { text-shadow: 0 0 10px rgba(0, 216, 255, 0.7); }
      to { text-shadow: 0 0 20px rgba(0, 140, 255, 0.7); }
    }
    
    .timer-btn {
      transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
      transform-style: preserve-3d;
      position: relative;
    }
    
    .timer-btn::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: inherit;
      border-radius: inherit;
      filter: blur(5px);
      opacity: 0.7;
      z-index: -1;
      transform: translateZ(-1px);
    }
    
    .timer-btn:hover {
      transform: translateY(-3px) scale(1.05);
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
    }
    
    .task-actions {
      transition: all 0.3s ease;
      opacity: 0;
      transform: translateX(10px);
    }
    
    .fade-in {
      animation: fadeIn 0.5s cubic-bezier(0.39, 0.575, 0.565, 1) both;
    }
    
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(20px); }
      to { opacity: 1; transform: translateY(0); }
    }
    
    .pulse {
      animation: pulse 2s infinite cubic-bezier(0.4, 0, 0.6, 1);
    }
    
    @keyframes pulse {
      0%, 100% { transform: scale(1); box-shadow: 0 0 0 0 rgba(0, 216, 255, 0.7); }
      50% { transform: scale(1.05); box-shadow: 0 0 0 15px rgba(0, 216, 255, 0); }
    }
    
    /* Floating animation */
    .float {
      animation: float 6s ease-in-out infinite;
    }
    
    @keyframes float {
      0% { transform: translateY(0px); }
      50% { transform: translateY(-10px); }
      100% { transform: translateY(0px); }
    }
    
    /* Custom scrollbar */
    ::-webkit-scrollbar {
      width: 8px;
    }
    
    ::-webkit-scrollbar-track {
      background: var(--darker-bg);
      border-radius: 10px;
    }
    
    ::-webkit-scrollbar-thumb {
      background: var(--primary-gradient);
      border-radius: 10px;
    }
    
    ::-webkit-scrollbar-thumb:hover {
      background: linear-gradient(90deg, #00d8ff, #0062ff);
    }
    
    /* Layout with flex instead of grid */
    .dashboard-container {
      display: flex;
      flex-direction: column;
      min-height: 100vh;
      padding: 2rem;
      gap: 1.5rem;
    }
    
    .header-section {
      display: flex;
      justify-content: space-between;
      align-items: flex-end;
      flex-wrap: wrap;
      gap: 1rem;
    }
    
    .content-section {
      display: flex;
      flex-wrap: wrap;
      gap: 1.5rem;
      color: #f6f6f6;
    }
    
    .content-column {
      flex: 1;
      min-width: 300px;
      display: flex;
      flex-direction: column;
      gap: 1.5rem;
    }
    
    .footer-section {
      display: flex;
      justify-content: center;
      margin-top: auto;
    }
    
    /* Glass morphism effect */
    .glass {
      background: rgba(30, 33, 59, 0.3);
      backdrop-filter: blur(10px);
      -webkit-backdrop-filter: blur(10px);
      border: 1px solid rgba(255, 255, 255, 0.1);
    }
    
    /* Neon border effect */
    .neon-border {
      position: relative;
    }
    
    .neon-border::after {
      content: '';
      position: absolute;
      top: -2px;
      left: -2px;
      right: -2px;
      bottom: -2px;
      border-radius: inherit;
      background: var(--primary-gradient);
      z-index: -1;
      opacity: 0;
      transition: opacity 0.3s ease;
    }
    
    .neon-border:hover::after {
      opacity: 0.7;
    }
    
    /* Input styles */
    input, textarea, select {
      background: rgba(0, 0, 0, 0.7) !important;
      border: 1px solid rgba(255, 255, 255, 0.1) !important;
      transition: all 0.3s ease !important;
      color: white !important;
    }
    
    input:focus, textarea:focus, select:focus {
      border-color: var(--neon-blue) !important;
      box-shadow: 0 0 0 2px rgba(0, 216, 255, 0.2) !important;
      outline: none !important;
    }
    
    input::placeholder {
      color: white !important;
      opacity: 0.7 !important;
    }
    
    /* Button styles */
    .btn {
      transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
      position: relative;
      overflow: hidden;
    }
    
    .btn::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
      transition: all 0.5s ease;
    }
    
    .btn:hover::before {
      left: 100%;
    }
    
    /* Modal styles */
    .modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.8);
      z-index: 1000;
      justify-content: center;
      align-items: center;
      backdrop-filter: blur(5px);
    }
    
    .modal-content {
      background: var(--darker-bg);
      border-radius: 20px;
      padding: 2rem;
      width: 90%;
      max-width: 500px;
      box-shadow: 0 25px 50px rgba(0, 0, 0, 0.5);
      animation: modalFadeIn 0.4s cubic-bezier(0.39, 0.575, 0.565, 1) both;
      border: 1px solid var(--glass-border);
      position: relative;
      overflow: hidden;
    }
    
    .modal-content::before {
      content: '';
      position: absolute;
      top: -50%;
      left: -50%;
      width: 200%;
      height: 200%;
      background: radial-gradient(circle, rgba(0, 216, 255, 0.1) 0%, transparent 70%);
      animation: rotate 20s linear infinite;
      z-index: -1;
    }
    
    @keyframes rotate {
      from { transform: rotate(0deg); }
      to { transform: rotate(360deg); }
    }
    
    @keyframes modalFadeIn {
      from { opacity: 0; transform: translateY(-30px) scale(0.95); }
      to { opacity: 1; transform: translateY(0) scale(1); }
    }
    
    /* Checkbox styles */
    .task-checkbox {
      -webkit-appearance: none;
      -moz-appearance: none;
      appearance: none;
      width: 20px;
      height: 20px;
      border: 2px solid var(--neon-blue);
      border-radius: 4px;
      outline: none;
      cursor: pointer;
      position: relative;
      transition: all 0.2s ease;
      color: white;
    }
    
    .task-checkbox:checked {
      background-color: var(--neon-blue);
      border-color: var(--neon-blue);
    }
    
    .task-checkbox:checked::after {
      content: '✓';
      position: absolute;
      color: white;
      font-size: 14px;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
    }
    
    /* Responsive adjustments */
    @media (max-width: 768px) {
      .content-section {
        flex-direction: column;
      }
      
      .timer-display {
        font-size: 3rem;
      }
      
      .dashboard-container {
        padding: 1rem;
      }
    }
    
    /* Special effects */
    .particle {
      position: absolute;
      background: var(--neon-blue);
      border-radius: 50%;
      pointer-events: none;
      z-index: -1;
    }
    
    .confetti {
      position: fixed;
      width: 10px;
      height: 10px;
      background: var(--neon-blue);
      opacity: 0;
      z-index: 9999;
      animation: confettiFall 3s ease-in-out forwards;
    }
    
    @keyframes confettiFall {
      0% { transform: translateY(-100vh) rotate(0deg); opacity: 1; }
      100% { transform: translateY(100vh) rotate(360deg); opacity: 0; }
    }
    
    /* Shake animation */
    @keyframes shake {
      0%, 100% { transform: translateX(0); }
      10%, 30%, 50%, 70%, 90% { transform: translateX(-5px); }
      20%, 40%, 60%, 80% { transform: translateX(5px); }
    }
    
    .animate-shake {
      animation: shake 0.5s cubic-bezier(0.36, 0.07, 0.19, 0.97) both;
    }
    
    /* Floating elements */
    .floating-element {
      animation: floatElement 8s ease-in-out infinite;
    }
    
    @keyframes floatElement {
      0%, 100% { transform: translateY(0) rotate(0deg); }
      50% { transform: translateY(-20px) rotate(2deg); }
    }
    /* Add these styles to fix the functionality */

/* Ensure task items and their interactive elements are always clickable */
.task-item {
  pointer-events: auto !important;
  position: relative;
  z-index: 1;
  color: #f6f6f6;
}

/* Make sure checkboxes and delete buttons are always accessible */
.task-checkbox {
  pointer-events: auto !important;
  z-index: 2;
  position: relative;
}
.dashboard-container {
  position: relative; /* Add this to make the absolute positioning work */
  /* ... your existing dashboard-container styles ... */
}
.back-btn {
      padding: 0.8rem 1.5rem;
      background: rgb(0, 34, 40);
      color: white;
      font-weight: 600;
      border: 1px solid var(--neon-blue);
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.3s ease;
      margin: 1rem auto;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
    
    }

    .back-btn:hover {
      background: rgba(0, 208, 255, 0.3);
      transform: translateX(-5px);
    }
  </style>
</head>
<body>
    <br><br>
  <div class="dashboard-container">
    <!-- Header with time and greeting -->
     <br>
     <div class="absolute top-4 right-4 back-btn">
      <br>
  <a href="/" class="flex items-center text-slate-300 hover:text-white transition-colors">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
    </svg>
    Home
  </a>
</div>
    <div class="header-section">
      <div class="flex flex-col">
        <div class="text-3xl font-bold gradient-text timesize" id="current-time">2:50 PM</div>
        <div class="text-md text-slate-400" id="current-date">May 17, 2025</div>
        <h1 class="text-4xl font-bold mt-2 animate__animated animate__fadeIn">Good Afternoon<span class="animate__animated animate__tada animate__infinite" style="display: inline-block;">.</span></h1>
        <div class="text-xl font-semibold mt-3 text-slate-300">You have <span class="gradient-text font-bold" id="tasks-count">0</span> tasks due today.</div>
      </div>
      
      <!-- Quick add task form -->
      <form id="quick-add-form" class="flex items-center w-full max-w-md glass p-1 rounded-full border border-transparent hover:border-cyan-400 transition-all duration-300 neon-border">
        <input type="text" id="quick-task-input" placeholder="Quick add task" 
               class="flex-grow px-5 py-3 bg-transparent text-slate-100 rounded-l-full focus:outline-none focus:ring-0 border-none">
        <button type="submit" class="gradient-bg text-white px-6 py-3 rounded-r-full hover:opacity-90 transition-opacity font-medium btn">
          Add
        </button>
      </form>
    </div>
    
    <!-- Content section -->
    <div class="content-section">
      <!-- Tasks column -->
      <div class="content-column">
        <!-- Tasks section -->
        <div class="card p-6 tasks-container floating-element">
          <div class="flex justify-between items-center mb-4">
            <h2 class="text-xl font-semibold flex items-center">
              <span class="gradient-text">Today's Tasks</span>
              <span class="ml-2 text-xs px-2 py-1 bg-cyan-900/30 text-cyan-400 rounded-full animate__animated animate__pulse animate__infinite" style="color: white; background-color: red;">LIVE</span>
            </h2>
            <button id="show-full-form" class="text-cyan-400 hover:text-cyan-300 transition-colors text-sm btn colorp">
              + Detailed Task
            </button>
          </div>
          
          <div id="tasks-list" class="space-y-3">
            <!-- Tasks will be loaded here -->
          </div>
          
          <!-- Full add task form (hidden by default) -->
          <div id="full-add-form" class="hidden mt-4 fade-in glass p-4 rounded-xl">
            <form id="task-form" class="space-y-4">
              <div>
                <label for="task-title" class="block text-sm font-medium text-slate-300 mb-2  colorp">Task Title</label>
                <input type="text" id="task-title" required
                       class="w-full px-4 py-3 rounded-xl focus:outline-none transition-all duration-200">
                <p class="mt-1 text-xs text-red-400 hidden" id="title-error">Field is required</p>
              </div>
              
              <div>
                <label for="task-subject" class="block text-sm font-medium text-slate-300 mb-2 colorp">Subject</label>
                <input type="text" id="task-subject" required
                       class="w-full px-4 py-3 rounded-xl focus:outline-none transition-all duration-200">
                <p class="mt-1 text-xs text-red-400 hidden" id="subject-error">Field is required</p>
              </div>
              
              <div>
                <label class="block text-sm font-medium text-slate-300 mb-2 colorp">Due Date</label>
                <div class="flex space-x-2 mb-2">
                  <button type="button" class="date-option px-3 py-1.5 bg-slate-800 text-slate-200 rounded-lg hover:bg-slate-700 transition-colors text-xs btn" style="color: #f6f6f6;" data-value="today">Today</button>
                  <button type="button" class="date-option px-3 py-1.5 bg-slate-800 text-slate-200 rounded-lg hover:bg-slate-700 transition-colors text-xs btn"  style="color: #f6f6f6;" data-value="tomorrow">Tomorrow</button>
                  <button type="button" class="date-option px-3 py-1.5 bg-slate-800 text-slate-200 rounded-lg hover:bg-slate-700 transition-colors text-xs btn" style="color: #f6f6f6;"  data-value="week">Next Week</button>
                </div>
                <input type="date" id="task-date" 
                       class="w-full px-4 py-3 rounded-xl focus:outline-none transition-all duration-200">
                <p class="mt-1 text-xs text-red-400 hidden" id="date-error">Field is required</p>
              </div>
              
              <div>
                <label for="task-time" class="block text-sm font-medium text-slate-300 mb-2 colorp">Time</label>
                <input type="time" id="task-time" required
                       class="w-full px-4 py-3 rounded-xl focus:outline-none transition-all duration-200">
                <p class="mt-1 text-xs text-red-400 hidden" id="time-error">Field is required</p>
              </div>
              
              <div class="flex justify-end space-x-3 pt-2">
                <button type="button" id="cancel-add" class="px-4 py-2 border border-slate-600 text-slate-300 rounded-lg hover:bg-slate-700 transition-colors text-sm btn colorp">
                  Cancel
                </button>
                <button type="submit" class="gradient-bg text-white px-5 py-2 rounded-lg hover:opacity-90 transition-opacity font-medium text-sm btn">
                  Add Task
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
      
      <!-- Exams column -->
      <div class="content-column">
        <!-- Exams section -->
        <div class="card p-6 exams-container floating-element" style="animation-delay: 0.3s;">
          <div class="flex justify-between items-center mb-4">
            <h2 class="text-xl font-semibold gradient-text">Upcoming Exams</h2>
            <button id="add-exam-btn" class="text-cyan-400 hover:text-cyan-300 transition-colors text-sm btn colorp">
              + Add Exam
            </button>
          </div>
          
          <div id="exams-list" class="space-y-3">
            <!-- Exams will be loaded here -->
          </div>
          
          <!-- Add exam form (hidden by default) -->
          <div id="add-exam-form" class="hidden mt-4 space-y-4 fade-in glass p-4 rounded-xl">
            <div>
              <label for="exam-subject" class="block text-sm font-medium text-slate-300 mb-2 colorp">Subject</label>
              <input type="text" id="exam-subject" required
                     class="w-full px-4 py-3 rounded-xl focus:outline-none transition-all duration-200">
            </div>
            
            <div>
              <label for="exam-date" class="block text-sm font-medium text-slate-300 mb-2 colorp">Exam Date</label>
              <input type="date" id="exam-date" required
                     class="w-full px-4 py-3 rounded-xl focus:outline-none transition-all duration-200">
            </div>
            
            <div>
              <label for="exam-slot" class="block text-sm font-medium text-slate-300 mb-2 colorp">Slot (optional)</label>
              <input type="text" id="exam-slot"
                     class="w-full px-4 py-3 rounded-xl focus:outline-none transition-all duration-200">
            </div>
            
            <div class="flex justify-end space-x-3 pt-2">
              <button type="button" id="cancel-exam" class="px-4 py-2 border border-slate-600 text-slate-300 rounded-lg hover:bg-slate-700 transition-colors text-sm btn colorp">
                Cancel
              </button>
              <button type="button" id="save-exam" class="gradient-bg text-white px-5 py-2 rounded-lg hover:opacity-90 transition-opacity font-medium text-sm btn">
                Save Exam
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Focus timer button -->
    <div class="footer-section">
      <button id="show-timer-modal" 
        class="gradient-bg text-white px-8 py-3 rounded-full hover:opacity-90 transition-opacity font-medium text-lg btn pulse floating-element">
        🚀 Focus Timer
      </button>
    </div>
  </div>
  
  <!-- Timer Modal -->
  <div id="timer-modal" class="modal">
    <div class="modal-content">
      <div class="flex justify-between items-center mb-6">
        <h2 class="text-2xl font-semibold gradient-text">Deep Focus Mode</h2>
        <button id="close-timer-modal" class="text-slate-400 hover:text-slate-200 transition-colors text-2xl">
          ✕
        </button>
      </div>
      
      <div class="text-center py-6">
        <div id="timer-display" class="font-bold mb-8 timer-display">25:00</div>
        <div class="flex justify-center space-x-6">
          <button id="start-timer" class="timer-btn gradient-bg text-white px-8 py-3 rounded-full hover:opacity-90 transition-all font-medium text-lg pulse">
            Start Focus
          </button>
          <button id="stop-timer" class="timer-btn bg-red-500 text-white px-8 py-3 rounded-full hover:bg-red-600 transition-all font-medium text-lg hidden">
            Stop
          </button>
        </div>
      </div>
      
      <div class="text-center text-slate-400 text-sm mt-6">
        <p>Pro tip: Use headphones for maximum concentration</p>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  <script>
    // Current user ID
    const userId = '<%= user._id %>';
    
    // DOM elements
    const quickAddForm = document.getElementById('quick-add-form');
    const quickTaskInput = document.getElementById('quick-task-input');
    const fullAddForm = document.getElementById('full-add-form');
    const taskForm = document.getElementById('task-form');
    const cancelAdd = document.getElementById('cancel-add');
    const tasksList = document.getElementById('tasks-list');
    const examsList = document.getElementById('exams-list');
    const addExamBtn = document.getElementById('add-exam-btn');
    const addExamForm = document.getElementById('add-exam-form');
    const cancelExam = document.getElementById('cancel-exam');
    const saveExam = document.getElementById('save-exam');
    const timerDisplay = document.getElementById('timer-display');
    const startTimer = document.getElementById('start-timer');
    const stopTimer = document.getElementById('stop-timer');
    const tasksCount = document.getElementById('tasks-count');
    const showFullFormBtn = document.getElementById('show-full-form');
    const timerModal = document.getElementById('timer-modal');
    const showTimerModalBtn = document.getElementById('show-timer-modal');
    const closeTimerModalBtn = document.getElementById('close-timer-modal');
    
    // Create floating particles
    function createParticles() {
      const colors = ['#00F0FF', '#A100FF', '#FFFFFF'];
      
      for (let i = 0; i < 30; i++) {
        const particle = document.createElement('div');
        particle.classList.add('particle');
        
        // Random properties
        const size = Math.random() * 5 + 1;
        const posX = Math.random() * window.innerWidth;
        const posY = Math.random() * window.innerHeight;
        const color = colors[Math.floor(Math.random() * colors.length)];
        const opacity = Math.random() * 0.5 + 0.1;
        const duration = Math.random() * 20 + 10;
        const delay = Math.random() * 5;
        
        // Apply styles
        particle.style.width = `${size}px`;
        particle.style.height = `${size}px`;
        particle.style.left = `${posX}px`;
        particle.style.top = `${posY}px`;
        particle.style.background = color;
        particle.style.opacity = opacity;
        particle.style.animation = `float ${duration}s ease-in-out ${delay}s infinite`;
        
        document.body.appendChild(particle);
      }
    }
    
    // Create confetti effect
    function createConfetti() {
      for (let i = 0; i < 50; i++) {
        const confetti = document.createElement('div');
        confetti.classList.add('confetti');
        
        // Random properties
        const left = Math.random() * window.innerWidth;
        const size = Math.random() * 10 + 5;
        const color = `hsl(${Math.random() * 60 + 180}, 100%, 50%)`;
        const delay = Math.random() * 0.5;
        const duration = Math.random() * 3 + 2;
        
        // Apply styles
        confetti.style.left = `${left}px`;
        confetti.style.width = `${size}px`;
        confetti.style.height = `${size}px`;
        confetti.style.background = color;
        confetti.style.animationDelay = `${delay}s`;
        confetti.style.animationDuration = `${duration}s`;
        
        document.body.appendChild(confetti);
      }
      
      // Remove confetti after animation
      setTimeout(() => {
        document.querySelectorAll('.confetti').forEach(el => el.remove());
      }, 3000);
    }
    
    // Date and time display with smooth transitions
    function updateDateTime() {
      const now = new Date();
      const timeOptions = { hour: 'numeric', minute: 'numeric' };
      const dateOptions = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
      
      document.getElementById('current-time').textContent = now.toLocaleTimeString('en-US', timeOptions);
      document.getElementById('current-date').textContent = now.toLocaleDateString('en-US', dateOptions);
      
      // Update greeting based on time
      const hour = now.getHours();
      const greeting = document.querySelector('h1');
      let newGreeting = 'Good ';
      
      if (hour < 12) newGreeting += 'Morning';
      else if (hour < 18) newGreeting += 'Afternoon';
      else newGreeting += 'Evening';
      
      if (!greeting.textContent.includes(newGreeting)) {
        greeting.textContent = newGreeting;
        greeting.classList.add('animate__animated', 'animate__rubberBand');
        setTimeout(() => {
          greeting.classList.remove('animate__animated', 'animate__rubberBand');
        }, 1000);
      }
    }
    
    setInterval(updateDateTime, 1000);
    updateDateTime();
    
    // Load tasks and exams with animations
    async function loadTasks() {
      try {
        const response = await axios.get('/tasks/api');
        
        if (!response.data || !response.data.success) {
          throw new Error('Failed to load tasks');
        }
        
        const { tasks, exams } = response.data.data;
        
        // Update tasks count with animation
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        const todayTasks = (tasks || []).filter(task => {
          if (!task || !task.dueDate) return false;
          const taskDate = new Date(task.dueDate);
          taskDate.setHours(0, 0, 0, 0);
          return taskDate.getTime() === today.getTime();
        });
        
        // Animate count change
        const countElement = tasksCount;
        countElement.classList.add('animate__animated', 'animate__pulse');
        setTimeout(() => {
          countElement.classList.remove('animate__animated', 'animate__pulse');
        }, 1000);
        tasksCount.textContent = todayTasks.length;
        
        // Render tasks with staggered animations
        tasksList.innerHTML = tasks && tasks.length > 0 
          ? tasks.map((task, i) => {
              const delay = i * 0.1;
              return `
                <div class="fade-in" style="animation-delay: ${delay}s">
                  ${renderTask(task)}
                </div>
              `;
            }).join('')
          : `
            <div class="text-center py-8 fade-in">
              <div class="text-5xl mb-4">📝</div>
              <p class="text-gray-500">No tasks yet</p>
              <p class="text-sm text-gray-600 mt-1">Add your first task to get started</p>
            </div>
          `;
        
        // Render exams with staggered animations
        examsList.innerHTML = exams && exams.length > 0 
          ? exams.map((exam, i) => {
              const delay = i * 0.1;
              return `
                <div class="fade-in" style="animation-delay: ${delay}s">
                  ${renderExam(exam)}
                </div>
              `;
            }).join('')
          : `
            <div class="text-center py-8 fade-in">
              <div class="text-5xl mb-4">📚</div>
              <p class="text-gray-500">No exams scheduled</p>
              <p class="text-sm text-gray-600 mt-1">Add upcoming exams to track them</p>
            </div>
          `;
        
      } catch (error) {
        console.error('Error loading tasks:', error);
        tasksList.innerHTML = `
          <div class="text-center py-8 animate__animated animate__shakeX">
            <div class="text-5xl mb-4">⚠️</div>
            <p class="text-red-400">Error loading tasks</p>
            <p class="text-sm text-red-300 mt-1">Please try again later</p>
          </div>
        `;
      }
    }
    
    // Render a single task with enhanced design
    function renderTask(task) {
      const dueDate = new Date(task.dueDate);
      const formattedDate = dueDate.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
      const isToday = new Date().toDateString() === dueDate.toDateString();
      
      return `
        <div class="task-item flex items-center justify-between p-4 rounded-xl">
          <div class="flex items-center">
            <input type="checkbox" ${task.isCompleted ? 'checked' : ''} 
                   data-id="${task._id}"
                   class="task-checkbox h-5 w-5 rounded focus:ring-0 cursor-pointer">
            <div class="ml-4">
              <div class="font-medium ${task.isCompleted ? 'line-through text-slate-500' : 'text-slate-200'}">
                ${task.title}
              </div>
              <div class="text-sm flex items-center mt-1">
                <span class="text-cyan-400 bg-cyan-900/20 px-2 py-0.5 rounded-md text-xs mr-2">${task.subject}</span>
                <span class="text-slate-400">
                  ${isToday ? 'Today' : formattedDate} at ${task.time}
                </span>
              </div>
            </div>
          </div>
          <div class="task-actions">
            <button data-id="${task._id}" class="delete-task text-red-400 hover:text-red-300 transition-colors text-sm">
              ✕
            </button>
          </div>
        </div>
      `;
    }
    
    // Render a single exam with enhanced design
    function renderExam(exam) {
      const examDate = new Date(exam.examDate);
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      
      const diffTime = examDate - today;
      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
      
      let dayText = '';
      if (diffDays === 0) dayText = 'Today';
      else if (diffDays === 1) dayText = 'Tomorrow';
      else if (diffDays < 7) dayText = `In ${diffDays} days`;
      else dayText = examDate.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
      
      return `
        <div class="exam-item flex items-center justify-between p-4 rounded-xl">
          <div>
            <div class="font-medium text-slate-200 flex items-center">
              ${exam.subject}
              ${diffDays <= 3 ? '<span class="ml-2 text-xs px-2 py-0.5 bg-purple-900/30 text-purple-400 rounded-full animate-pulse">SOON</span>' : ''}
            </div>
            <div class="text-sm text-slate-400 mt-1">
              ${dayText} ${exam.slot ? '• Slot: ' + exam.slot : ''}
            </div>
          </div>
          <button data-id="${exam._id}" class="delete-exam text-red-400 hover:text-red-300 transition-colors text-sm">
            ✕
          </button>
        </div>
      `;
    }
    
    // Quick add task form
    quickAddForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      const title = quickTaskInput.value.trim();
      
      if (title) {
        try {
          // Add visual feedback
          quickAddForm.classList.add('animate__animated', 'animate__pulse');
          setTimeout(() => quickAddForm.classList.remove('animate__animated', 'animate__pulse'), 1000);
          
          await axios.post('/tasks', {
            title,
            subject: 'General',
            dueDate: new Date(),
            time: '23:59'
          });
          
          quickTaskInput.value = '';
          loadTasks();
          
          // Create particles animation
          createParticles();
        } catch (error) {
          console.error('Error adding quick task:', error);
          quickAddForm.classList.add('animate__animated', 'animate__shakeX');
          setTimeout(() => quickAddForm.classList.remove('animate__animated', 'animate__shakeX'), 1000);
        }
      } else {
        quickAddForm.classList.add('animate__animated', 'animate__shakeX');
        setTimeout(() => quickAddForm.classList.remove('animate__animated', 'animate__shakeX'), 1000);
      }
    });
    
    // Show full add task form with animation
    showFullFormBtn.addEventListener('click', () => {
      fullAddForm.classList.remove('hidden');
      fullAddForm.classList.add('animate__animated', 'animate__fadeIn');
      showFullFormBtn.classList.add('hidden');
    });
    
    cancelAdd.addEventListener('click', () => {
      fullAddForm.classList.add('hidden');
      showFullFormBtn.classList.remove('hidden');
      taskForm.reset();
    });
    
    // Handle task form submission
    taskForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      // Validate form
      const title = document.getElementById('task-title').value.trim();
      const subject = document.getElementById('task-subject').value.trim();
      const date = document.getElementById('task-date').value;
      const time = document.getElementById('task-time').value;
      
      let isValid = true;
      
      if (!title) {
        document.getElementById('title-error').classList.remove('hidden');
        document.getElementById('task-title').classList.add('border-red-500');
        isValid = false;
      } else {
        document.getElementById('title-error').classList.add('hidden');
        document.getElementById('task-title').classList.remove('border-red-500');
      }
      
      if (!subject) {
        document.getElementById('subject-error').classList.remove('hidden');
        document.getElementById('task-subject').classList.add('border-red-500');
        isValid = false;
      } else {
        document.getElementById('subject-error').classList.add('hidden');
        document.getElementById('task-subject').classList.remove('border-red-500');
      }
      
      if (!date) {
        document.getElementById('date-error').classList.remove('hidden');
        document.getElementById('task-date').classList.add('border-red-500');
        isValid = false;
      } else {
        document.getElementById('date-error').classList.add('hidden');
        document.getElementById('task-date').classList.remove('border-red-500');
      }
      
      if (!time) {
        document.getElementById('time-error').classList.remove('hidden');
        document.getElementById('task-time').classList.add('border-red-500');
        isValid = false;
      } else {
        document.getElementById('time-error').classList.add('hidden');
        document.getElementById('task-time').classList.remove('border-red-500');
      }
      
      if (!isValid) {
        taskForm.classList.add('animate__animated', 'animate__shakeX');
        setTimeout(() => taskForm.classList.remove('animate__animated', 'animate__shakeX'), 1000);
        return;
      }
      
      try {
        await axios.post('/tasks', {
          title,
          subject,
          dueDate: date,
          time
        });
        
        taskForm.reset();
        fullAddForm.classList.add('hidden');
        showFullFormBtn.classList.remove('hidden');
        loadTasks();
        
        // Celebration effect
        createConfetti();
      } catch (error) {
        console.error('Error adding task:', error);
      }
    });
    
    // Date option buttons
    document.querySelectorAll('.date-option').forEach(button => {
      button.addEventListener('click', () => {
        const dateInput = document.getElementById('task-date');
        const today = new Date();
        
        if (button.dataset.value === 'today') {
          dateInput.valueAsDate = today;
        } else if (button.dataset.value === 'tomorrow') {
          const tomorrow = new Date(today);
          tomorrow.setDate(tomorrow.getDate() + 1);
          dateInput.valueAsDate = tomorrow;
        } else if (button.dataset.value === 'week') {
          const nextWeek = new Date(today);
          nextWeek.setDate(nextWeek.getDate() + 7);
          dateInput.valueAsDate = nextWeek;
        }
        
        // Add visual feedback
        button.classList.add('gradient-bg', 'text-white');
        setTimeout(() => button.classList.remove('gradient-bg', 'text-white'), 300);
      });
    });
    
    // Handle task completion
    tasksList.addEventListener('change', async (e) => {
      if (e.target.classList.contains('task-checkbox')) {
        const taskId = e.target.dataset.id;
        const isCompleted = e.target.checked;
        
        try {
          await axios.patch(`/tasks/${taskId}/complete`, {
            isCompleted
          });
          
          // Add visual feedback
          const taskItem = e.target.closest('.task-item');
          if (isCompleted) {
            taskItem.classList.add('animate__animated', 'animate__bounceOut');
            setTimeout(() => {
              taskItem.classList.remove('animate__animated', 'animate__bounceOut');
              loadTasks();
            }, 500);
          } else {
            taskItem.classList.add('animate__animated', 'animate__bounceIn');
            setTimeout(() => {
              taskItem.classList.remove('animate__animated', 'animate__bounceIn');
            }, 500);
          }
        } catch (error) {
          console.error('Error updating task:', error);
        }
      }
    });
    
    // Handle task deletion
   document.body.addEventListener('click', async (e) => {
  if (e.target.classList.contains('delete-task')) {
    const taskId = e.target.dataset.id;
    const taskItem = e.target.closest('.task-item');
    
    try {
      // Visual feedback
      
      
      await axios.delete(`/tasks/${taskId}`);
      
      // Remove after animation
      setTimeout(() => {
        taskItem.remove();
        updateTasksCount();
      }, 500);
      
    } catch (error) {
      console.error('Error deleting task:', error);
      
    }
  }
});

    
    // Show add exam form
    addExamBtn.addEventListener('click', () => {
      addExamForm.classList.remove('hidden');
      addExamForm.classList.add('animate__animated', 'animate__fadeIn');
      addExamBtn.classList.add('hidden');
    });
    
    // Cancel add exam
    cancelExam.addEventListener('click', () => {
      addExamForm.classList.add('hidden');
      addExamBtn.classList.remove('hidden');
      document.getElementById('exam-subject').value = '';
      document.getElementById('exam-date').value = '';
      document.getElementById('exam-slot').value = '';
    });
    
    // Save exam
    saveExam.addEventListener('click', async () => {
      const subject = document.getElementById('exam-subject').value.trim();
      const date = document.getElementById('exam-date').value;
      const slot = document.getElementById('exam-slot').value.trim();
      
      if (!subject || !date) {
        saveExam.classList.add('animate__animated', 'animate__shakeX');
        setTimeout(() => saveExam.classList.remove('animate__animated', 'animate__shakeX'), 1000);
        return;
      }
      
      try {
        await axios.post('/tasks/exams', {
          subject,
          examDate: date,
          slot
        });
        
        addExamForm.classList.add('hidden');
        addExamBtn.classList.remove('hidden');
        document.getElementById('exam-subject').value = '';
        document.getElementById('exam-date').value = '';
        document.getElementById('exam-slot').value = '';
        
        // Celebration effect
        saveExam.classList.add('animate__animated', 'animate__bounce');
        setTimeout(() => {
          saveExam.classList.remove('animate__animated', 'animate__bounce');
          loadTasks();
        }, 1000);
      } catch (error) {
        console.error('Error adding exam:', error);
      }
    });
    
    // Handle exam deletion
    examsList.addEventListener('click', async (e) => {
      if (e.target.classList.contains('delete-exam')) {
        const examId = e.target.dataset.id;
        
        try {
          const examItem = e.target.closest('.exam-item');
          examItem.classList.add('animate__animated', 'animate__zoomOut');
          
          await axios.delete(`/tasks/exams/${examId}`);
          
          setTimeout(() => loadTasks(), 500);
        } catch (error) {
          console.error('Error deleting exam:', error);
        }
      }
    });
    
    // Timer modal controls
    showTimerModalBtn.addEventListener('click', () => {
      timerModal.style.display = 'flex';
      document.body.style.overflow = 'hidden';
    });
    
    closeTimerModalBtn.addEventListener('click', () => {
      timerModal.style.display = 'none';
      document.body.style.overflow = 'auto';
    });
    
    window.addEventListener('click', (e) => {
      if (e.target === timerModal) {
        timerModal.style.display = 'none';
        document.body.style.overflow = 'auto';
      }
    });
    
    // Focus timer functionality
    let timerInterval;
    let secondsLeft = 25 * 60; // 25 minutes
    let currentSessionId = null;
    
    function updateTimerDisplay() {
      const minutes = Math.floor(secondsLeft / 60);
      const seconds = secondsLeft % 60;
      timerDisplay.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
      
      // Add pulsing effect when under 5 minutes
      if (minutes < 5) {
        timerDisplay.style.animation = 'glow 1s infinite alternate';
      } else {
        timerDisplay.style.animation = '';
      }
    }
    
    startTimer.addEventListener('click', async () => {
      // Start a new focus session
      try {
        const response = await axios.post('/tasks/focus', {
          duration: 25 // 25 minutes
        });
        
        currentSessionId = response.data._id;
        startTimer.classList.add('hidden');
        stopTimer.classList.remove('hidden');
        startTimer.classList.remove('pulse');
        
        secondsLeft = 25 * 60;
        updateTimerDisplay();
        
        timerInterval = setInterval(() => {
          secondsLeft--;
          updateTimerDisplay();
          
          if (secondsLeft <= 0) {
            clearInterval(timerInterval);
            
            // Celebration effect
            timerDisplay.classList.add('animate__animated', 'animate__tada');
            createConfetti();
            
            // Play sound (if you want to add it)
            // new Audio('/sounds/complete.mp3').play();
            
            // Auto-stop
            setTimeout(() => stopTimer.click(), 2000);
          }
        }, 1000);
      } catch (error) {
        console.error('Error starting focus session:', error);
      }
    });
    
    stopTimer.addEventListener('click', async () => {
      clearInterval(timerInterval);
      startTimer.classList.remove('hidden');
      stopTimer.classList.add('hidden');
      timerDisplay.style.animation = '';
      timerDisplay.classList.remove('animate__animated', 'animate__tada');
      
      try {
        // End the current focus session
        await axios.patch('/tasks/focus/current/end');
        currentSessionId = null;
      } catch (error) {
        console.error('Error ending focus session:', error);
      }
    });
    
    // Add hover effects for task actions
    document.addEventListener('mouseover', (e) => {
      if (e.target.closest('.task-item')) {
        const taskItem = e.target.closest('.task-item');
        const actions = taskItem.querySelector('.task-actions');
        if (actions) {
          actions.classList.remove('opacity-0', 'translate-x-4');
          actions.classList.add('opacity-100', 'translate-x-0');
        }
      }
    });
    
    document.addEventListener('mouseout', (e) => {
      if (e.target.closest('.task-item')) {
        const taskItem = e.target.closest('.task-item');
        const actions = taskItem.querySelector('.task-actions');
        if (actions) {
          actions.classList.add('opacity-0', 'translate-x-4');
          actions.classList.remove('opacity-100', 'translate-x-0');
        }
      }
    });
    
    // Initialize
    document.addEventListener('DOMContentLoaded', () => {
      loadTasks();
      createParticles();
      
      // Add floating animation to random elements
      document.querySelectorAll('.card, .btn').forEach((el, i) => {
        el.style.animationDelay = `${i * 0.2}s`;
      });
    });
  </script>
</body>
</html>