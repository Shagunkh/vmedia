<% layout("/layouts/boilerplate") %>

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Lost and Found Board</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
  <style>
    :root {
      --primary-gradient: linear-gradient(90deg, #00d8ff, #008cff);
      --primary-gradient-reverse: linear-gradient(90deg, #008cff, #00d8ff);
      --dark-bg: #0a0a0a;
      --darker-bg: #050505;
      --card-bg: #000000;
      --text-primary: #f8f9fa;
      --text-secondary: #adb5bd;
      --accent-color: #00d8ff;
      --danger-color: #ff4d4d;
      --neon-glow: 0 0 10px rgba(0, 216, 255, 0.8);
    }

    body {
      background-color: var(--dark-bg);
      font-family: 'Orbitron', 'Segoe UI', sans-serif;
      color: var(--text-primary);
      min-height: 100vh;
      overflow-x: hidden;
    }

    /* Futuristic Title Animation */
    .hero-title {
      font-size: 6rem;
      font-weight: 900;
      text-transform: uppercase;
      background: var(--primary-gradient);
      -webkit-background-clip: text;
      background-clip: text;
      color: transparent;
      text-shadow: var(--neon-glow);
      position: relative;
      margin: 2rem 0;
      animation: titleFloat 6s ease-in-out infinite, titleGlow 3s ease-in-out infinite alternate;
    }

    @keyframes titleFloat {
      0%, 100% { transform: translateY(0); }
      50% { transform: translateY(-20px); }
    }

    @keyframes titleGlow {
      0% { text-shadow: 0 0 10px rgba(0, 216, 255, 0.8); }
      100% { text-shadow: 0 0 20px rgba(0, 216, 255, 1), 0 0 30px rgba(0, 216, 255, 0.5); }
    }

    .hero-subtitle {
      font-size: 1.5rem;
      color: var(--accent-color);
      text-transform: uppercase;
      letter-spacing: 5px;
      margin-bottom: 3rem;
      animation: subtitleFade 4s ease-in-out infinite;
    }

    @keyframes subtitleFade {
      0%, 100% { opacity: 0.7; }
      50% { opacity: 1; }
    }

    /* Cyberpunk Option Cards */
    .option-card {
      cursor: pointer;
      transition: all 0.5s cubic-bezier(0.175, 0.885, 0.32, 1.275);
      height: 100%;
      background: rgba(0, 0, 0, 0.7);
      color: var(--text-primary);
      border: 1px solid rgba(0, 216, 255, 0.3);
      border-radius: 0;
      box-shadow: 0 0 15px rgba(0, 216, 255, 0.2);
      position: relative;
      overflow: hidden;
      backdrop-filter: blur(10px);
      transform-style: preserve-3d;
      perspective: 1000px;
    }

    .option-card::before {
      content: '';
      position: absolute;
      top: -50%;
      left: -50%;
      width: 200%;
      height: 200%;
      background: linear-gradient(
        to bottom right,
        rgba(0, 216, 255, 0) 0%,
        rgba(0, 216, 255, 0.1) 50%,
        rgba(0, 0, 0, 0) 100%
      );
      transform: rotate(30deg);
      transition: all 0.7s ease;
      z-index: 1;
    }

    .option-card:hover {
      transform: translateY(-10px) scale(1.05) rotateX(5deg);
      box-shadow: 0 20px 40px rgba(0, 216, 255, 0.4);
      border-color: var(--accent-color);
    }

    .option-card:hover::before {
      left: 100%;
    }

    .option-card h3 {
      font-weight: 700;
      background: var(--primary-gradient);
      -webkit-background-clip: text;
      background-clip: text;
      color: transparent;
      transition: all 0.5s ease;
      position: relative;
      z-index: 2;
    }

    .option-card:hover h3 {
      text-shadow: 0 0 10px rgba(0, 216, 255, 0.8);
    }

    /* Holographic Item Cards */
    .item-card {
      margin-bottom: 2rem;
      background: rgba(0, 0, 0, 0.7);
      border: 1px solid rgba(0, 216, 255, 0.3);
      border-radius: 0;
      box-shadow: 0 0 20px rgba(0, 216, 255, 0.1);
      transition: all 0.5s cubic-bezier(0.25, 0.8, 0.25, 1);
      position: relative;
      overflow: hidden;
      backdrop-filter: blur(5px);

    }

    .item-card::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 3px;
      background: var(--primary-gradient);
      transform: scaleX(0);
      transform-origin: left;
      transition: transform 0.5s ease;
    }

    .item-card:hover {
      transform: translateY(-10px) scale(1.02);
      box-shadow: 0 15px 35px rgba(0, 216, 255, 0.3);
      border-color: var(--accent-color);
    }

    .item-card:hover::before {
      transform: scaleX(1);
    }

    .item-img {
      height: 200px;
      object-fit: cover;
      transition: all 0.5s ease;
      filter: grayscale(30%) contrast(110%);
    }

    .item-card:hover .item-img {
      transform: scale(1.05);
      filter: grayscale(0%) contrast(120%);
    }

    /* Cyberpunk Buttons */
    .btn-primary {
      background: transparent;
      border: 2px solid var(--accent-color);
      color: var(--accent-color);
      font-weight: 700;
      letter-spacing: 1px;
      text-transform: uppercase;
      transition: all 0.4s ease;
      position: relative;
      overflow: hidden;
      box-shadow: 0 0 10px rgba(0, 216, 255, 0.3);
    }

    .btn-primary::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: var(--primary-gradient);
      transition: all 0.4s ease;
      z-index: -1;
    }

    .btn-primary:hover {
      color: #000;
      transform: translateY(-3px);
      box-shadow: 0 0 20px rgba(0, 216, 255, 0.6);
    }

    .btn-primary:hover::before {
      left: 0;
    }

    .btn-success {
      background: transparent;
      border: 2px solid #00ff88;
      color: #00ff88;
      font-weight: 700;
      letter-spacing: 1px;
      text-transform: uppercase;
      transition: all 0.4s ease;
      position: relative;
      overflow: hidden;
      box-shadow: 0 0 10px rgba(0, 255, 136, 0.3);
    }

    .btn-success::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, #00ff88, #00c8ff);
      transition: all 0.4s ease;
      z-index: -1;
    }

    .btn-success:hover {
      color: #000;
      transform: translateY(-3px);
      box-shadow: 0 0 20px rgba(0, 255, 136, 0.6);
    }

    .btn-success:hover::before {
      left: 0;
    }

    .btn-danger {
      background: transparent;
      border: 2px solid var(--danger-color);
      color: var(--danger-color);
      font-weight: 700;
      letter-spacing: 1px;
      text-transform: uppercase;
      transition: all 0.4s ease;
      position: relative;
      overflow: hidden;
      box-shadow: 0 0 10px rgba(255, 77, 77, 0.3);
    }

    .btn-danger::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, #ff4d4d, #ff1a1a);
      transition: all 0.4s ease;
      z-index: -1;
    }

    .btn-danger:hover {
      color: #000;
      transform: translateY(-3px);
      box-shadow: 0 0 20px rgba(255, 77, 77, 0.6);
    }

    .btn-danger:hover::before {
      left: 0;
    }

    /* Futuristic Modals */
    .modal-content {
      background: rgba(21, 21, 21, 0.95);
      color: var(--text-primary);
      border: 1px solid rgba(0, 216, 255, 0.3);
      border-radius: 0;
      box-shadow: 0 0 30px rgba(0, 216, 255, 0.4);
      backdrop-filter: blur(10px);
    }

    .modal-header {
      border-bottom: 1px solid rgba(0, 216, 255, 0.3);
    }

    .modal-footer {
      border-top: 1px solid rgba(0, 216, 255, 0.3);
    }

    /* Cyberpunk Form Elements */
    .form-control, .form-select {
      background-color: rgba(42, 42, 42, 0.7);
      border: 1px solid rgba(0, 216, 255, 0.3);
      color: var(--text-primary);
      border-radius: 0;
      transition: all 0.3s ease;
    }

    .form-control:focus, .form-select:focus {
      background-color: rgba(51, 51, 51, 0.8);
      color: var(--text-primary);
      border-color: var(--accent-color);
      box-shadow: 0 0 0 0.25rem rgba(0, 216, 255, 0.25);
    }

    .form-label {
      color: var(--accent-color);
      text-transform: uppercase;
      letter-spacing: 1px;
      font-size: 0.9rem;
    }

    /* Special animations */
    @keyframes scanline {
      0% { transform: translateY(-100%); }
      100% { transform: translateY(100%); }
    }

    .scanlines {
      position: relative;
      overflow: hidden;
    }

    .scanlines::after {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 100%;
      background: linear-gradient(
        to bottom,
        transparent 0%,
        rgba(0, 216, 255, 0.05) 50%,
        transparent 100%
      );
      animation: scanline 8s linear infinite;
      pointer-events: none;
    }

    /* Particle Background */
    .particles {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: -1;
      pointer-events: none;
    }

    .particle {
      position: absolute;
      width: 2px;
      height: 2px;
      background: var(--accent-color);
      border-radius: 50%;
      opacity: 0;
      animation: particleFloat linear infinite;
    }

    @keyframes particleFloat {
      0% {
        transform: translateY(0) translateX(0);
        opacity: 0;
      }
      10% {
        opacity: 1;
      }
      90% {
        opacity: 1;
      }
      100% {
        transform: translateY(-100vh) translateX(100px);
        opacity: 0;
      }
    }

    /* Critical functional overrides */
    .delete-btn {
      opacity: 1 !important;
      pointer-events: auto !important;
      z-index: 10 !important;
      position: relative !important;
      transform: none !important;
    }

    /* Responsive adjustments */
    @media (max-width: 768px) {
      .hero-title {
        font-size: 3rem;
      }
      
      .hero-subtitle {
        font-size: 1rem;
      }
      
      .option-card:hover {
        transform: translateY(-5px) scale(1.02);
      }
      
      .item-card:hover {
        transform: translateY(-5px) scale(1.01);
      }
    }
    .itemsContainer {
      color: white;
    }
    /* Enhanced Gallery Item Cards */
.item-card {
  margin-bottom: 2rem;
  background:  rgba(35, 82, 91, 0.05);
  border: 1px solid rgba(0, 216, 255, 0.3);
  border-radius: 20px;
  box-shadow: 0 0 20px rgba(0, 216, 255, 0.1);
  transition: all 0.5s cubic-bezier(0.25, 0.8, 0.25, 1);
  position: relative;
  overflow: hidden;
  backdrop-filter: blur(5px);
  transform-style: preserve-3d;
  perspective: 1000px;
}

.item-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 3px;
  background:  rgba(0, 216, 255, 0.05);
  transform: scaleX(0);
  transform-origin: left;
  transition: transform 0.5s ease;
}

.item-card:hover {
  transform: translateY(-10px) scale(1.02) rotateX(2deg);
  box-shadow: 0 15px 35px rgba(0, 216, 255, 0.3), 
              0 0 50px rgba(0, 216, 255, 0.1) inset;
  border-color: var(--accent-color);
  z-index: 10;
}

.item-card:hover::before {
  transform: scaleX(1);
}

/* Card Header Effect */
.item-card::after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: linear-gradient(
    135deg,
    rgba(0, 216, 255, 0.05) 0%,
    rgba(0, 216, 255, 0.01) 50%,
    rgba(0, 216, 255, 0.05) 100%
  );
  pointer-events: none;
  z-index: -1;
}

/* Image Styling */
.item-img {
  height: 200px;
  object-fit: cover;
  transition: all 0.5s ease;
  filter: grayscale(30%) contrast(110%) brightness(0.8);
  border-bottom: 1px solid rgba(0, 216, 255, 0.2);
}

.item-card:hover .item-img {
  transform: scale(1.03);
  filter: grayscale(0%) contrast(120%) brightness(1);
}

/* Card Body Styling */
.card-body {
  padding: 1.5rem;
  position: relative;
  background: linear-gradient(
    to bottom,
    rgba(0, 0, 0, 0.7) 0%,
    rgba(0, 10, 20, 0.8) 100%
  );
}

.card-title {
  font-size: 1.4rem;
  font-weight: 700;
  margin-bottom: 1rem;
  color: var(--accent-color);
  text-transform: uppercase;
  letter-spacing: 1px;
  position: relative;
  display: inline-block;
}

.card-title::after {
  content: '';
  position: absolute;
  bottom: -5px;
  left: 0;
  width: 100%;
  height: 2px;
  background: var(--primary-gradient);
  transform: scaleX(0);
  transform-origin: left;
  transition: transform 0.3s ease;
}

.item-card:hover .card-title::after {
  transform: scaleX(1);
}

.card-text {
  color: var(--text-secondary);
  margin-bottom: 0.8rem;
  font-size: 0.95rem;
  line-height: 1.5;
}

/* Status Indicator */
.status-indicator {
  position: absolute;
  top: 1rem;
  right: 1rem;
  padding: 0.25rem 0.75rem;
  border-radius: 20px;
  font-size: 0.75rem;
  font-weight: bold;
  text-transform: uppercase;
  letter-spacing: 1px;
}

.status-lost {
  background: rgba(255, 77, 77, 0.2);
  color: var(--danger-color);
  border: 1px solid var(--danger-color);
}

.status-found {
  background: rgba(0, 255, 136, 0.2);
  color: #00ff88;
  border: 1px solid #00ff88;
}

/* Button Container */
.card-buttons {
  display: flex;
  justify-content: space-between;
  margin-top: 1.5rem;
  gap: 0.5rem;
}

/* Holographic Effect on Hover */
.item-card:hover {
  animation: hologramEffect 3s infinite alternate;
}

@keyframes hologramEffect {
  0% {
    box-shadow: 0 0 10px rgba(0, 216, 255, 0.5),
                0 0 20px rgba(0, 216, 255, 0.3),
                0 0 30px rgba(0, 216, 255, 0.1);
  }
  100% {
    box-shadow: 0 0 15px rgba(0, 216, 255, 0.7),
                0 0 30px rgba(0, 216, 255, 0.4),
                0 0 45px rgba(0, 216, 255, 0.2);
  }
}

/* Glitch Effect on Hover */
.item-card:hover .card-title {
  animation: glitch-effect 2s infinite linear alternate;
}

@keyframes glitch-effect {
  0% {
    text-shadow: 1px 1px 0 rgba(255, 0, 0, 0.5),
                -1px -1px 0 rgba(0, 255, 255, 0.5);
  }
  25% {
    text-shadow: -1px -1px 0 rgba(255, 0, 0, 0.5),
                 1px 1px 0 rgba(0, 255, 255, 0.5);
  }
  50% {
    text-shadow: 1px -1px 0 rgba(255, 0, 0, 0.5),
                -1px 1px 0 rgba(0, 255, 255, 0.5);
  }
  75% {
    text-shadow: -1px 1px 0 rgba(255, 0, 0, 0.5),
                 1px -1px 0 rgba(0, 255, 255, 0.5);
  }
  100% {
    text-shadow: 1px 1px 0 rgba(255, 0, 0, 0.5),
                -1px -1px 0 rgba(0, 255, 255, 0.5);
  }
}

/* Responsive Adjustments */
@media (max-width: 768px) {
  .item-card {
    margin-bottom: 1.5rem;
  }
  
  .item-card:hover {
    transform: translateY(-5px) scale(1.01);
  }
  
  .card-body {
    padding: 1rem;
  }
  
  .card-title {
    font-size: 1.2rem;
  }
  
  .card-text {
    font-size: 0.85rem;
  }
}
  </style>
</head>
<body>

  <div class="particles" id="particles"></div>
   <div class="container-fluid text-center py-5 scanlines">
    <h1 class="hero-title animate__animated animate__fadeInDown">LOST & FOUND</h1>
 <p class="hero-subtitle animate__animated animate__fadeIn animate__delay-1s">DIGITAL RECLAMATION NETWORK</p>
  </div>

  <div class="container">
    <div class="row text-center mb-4">
      <div class="col-md-6 mb-3">
        <div class="card option-card animate__animated animate__fadeInLeft" data-bs-toggle="modal" data-bs-target="#lostModal">
          <div class="card-body">
            <h3>LOST?</h3>
            <p>Report a lost item</p>
          </div>
        </div>
      </div>
      <div class="col-md-6 mb-3">
        <div class="card option-card animate__animated animate__fadeInRight" data-bs-toggle="modal" data-bs-target="#foundModal">
          <div class="card-body">
            <h3>FOUND?</h3>
            <p>Report a found item</p>
          </div>
        </div>
      </div>
    </div>
    <div class="col-md-4 mb-3 mx-auto">
      <div class="card option-card animate__animated animate__fadeInUp" id="myRequestsBtn">
        <div class="card-body">
          <h3>MY REQUESTS</h3>
          <p>View my listed items</p>
        </div>
      </div>
    </div>

    <div class="gallery">
      <h2 class="text-center mb-4 animate__animated animate__fadeIn">GALLERY</h2>
      
   <br><br>
      <div class="row" id="itemsContainer">
        <!-- Items will be loaded here via JavaScript -->
      </div>
    </div>
  </div>
  
  <!-- Lost Item Modal -->
  <div class="modal fade" id="lostModal" tabindex="-1" aria-labelledby="lostModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="lostModalLabel">Report Lost Item</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="lostForm">
            <div class="mb-3">
              <label for="lostItemName" class="form-label">Item Name</label>
              <input type="text" class="form-control" id="lostItemName" required>
            </div>
            <div class="mb-3">
              <label for="lastSeenLocation" class="form-label">Last Seen Location</label>
              <input type="text" class="form-control" id="lastSeenLocation" required>
            </div>
            <div class="mb-3">
              <label for="dateLost" class="form-label">Date Lost</label>
              <input type="date" class="form-control" id="dateLost" required>
            </div>
            <div class="mb-3">
              <label for="lostDescription" class="form-label">Description</label>
              <textarea class="form-control" id="lostDescription" rows="3" required></textarea>
            </div>
            <div class="mb-3">
              <label for="lostImage" class="form-label">Item Image (Optional)</label>
              <input type="file" class="form-control" id="lostImage" accept="image/*">
            </div>
            <div class="mb-3">
              <label for="lostContactInfo" class="form-label">Your Contact Info</label>
              <input type="text" class="form-control" id="lostContactInfo" required>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
          <button type="button" class="btn btn-primary" id="submitLost">Submit</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Found Item Modal -->
  <div class="modal fade" id="foundModal" tabindex="-1" aria-labelledby="foundModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="foundModalLabel">Report Found Item</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="foundForm">
            <div class="mb-3">
              <label for="foundItemName" class="form-label">Item Name</label>
              <input type="text" class="form-control" id="foundItemName" required>
            </div>
            <div class="mb-3">
              <label for="foundLocation" class="form-label">Where Found</label>
              <input type="text" class="form-control" id="foundLocation" required>
            </div>
            <div class="mb-3">
              <label for="dateFound" class="form-label">Date Found</label>
              <input type="date" class="form-control" id="dateFound" required>
            </div>
            <div class="mb-3">
              <label for="foundDescription" class="form-label">Description</label>
              <textarea class="form-control" id="foundDescription" rows="3" required></textarea>
            </div>
            <div class="mb-3">
              <label for="foundImage" class="form-label">Item Image</label>
              <input type="file" class="form-control" id="foundImage" accept="image/*">
            </div>
            <div class="mb-3">
              <label for="foundContactInfo" class="form-label">Your Contact Info</label>
              <input type="text" class="form-control" id="foundContactInfo" required>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
          <button type="button" class="btn btn-primary" id="submitFound">Submit</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Contact Info Modal -->
  <div class="modal fade" id="contactModal" tabindex="-1" aria-labelledby="contactModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="contactModalLabel">Contact Information</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body" id="contactModalBody">
          <!-- Contact info will be displayed here -->
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    function createParticles() {
      const particlesContainer = document.getElementById('particles');
      const particleCount = 50;
      
      for (let i = 0; i < particleCount; i++) {
        const particle = document.createElement('div');
        particle.classList.add('particle');
        
        // Random position
        const posX = Math.random() * 100;
        const posY = Math.random() * 100 + 100; // Start below viewport
        
        // Random size
        const size = Math.random() * 3 + 1;
        
        // Random animation duration
        const duration = Math.random() * 20 + 10;
        
        // Random delay
        const delay = Math.random() * 10;
        
        particle.style.left = `${posX}%`;
        particle.style.top = `${posY}%`;
        particle.style.width = `${size}px`;
        particle.style.height = `${size}px`;
        particle.style.animationDuration = `${duration}s`;
        particle.style.animationDelay = `${delay}s`;
        
        particlesContainer.appendChild(particle);
      }
    }
    // Load items when page loads
    document.addEventListener('DOMContentLoaded', function() {
      loadItems();
      
      // Handle lost item submission
      document.getElementById('submitLost').addEventListener('click', async function() {
        const formData = new FormData();
        formData.append('itemName', document.getElementById('lostItemName').value);
        formData.append('lastSeenLocation', document.getElementById('lastSeenLocation').value);
        formData.append('dateLost', document.getElementById('dateLost').value);
        formData.append('description', document.getElementById('lostDescription').value);
        formData.append('contactInfo', document.getElementById('lostContactInfo').value);
        
        const imageInput = document.getElementById('lostImage');
        if (imageInput.files[0]) {
          formData.append('image', imageInput.files[0]);
        }
        
        try {
          const response = await fetch('/lost-and-found/lost', {
            method: 'POST',
            body: formData,
            credentials: 'include'
          });
          
          if (response.ok) {
            const lostItem = await response.json();
            addItemToGallery(lostItem, 'lost');
            const modal = bootstrap.Modal.getInstance(document.getElementById('lostModal'));
            modal.hide();
            document.getElementById('lostForm').reset();
          } else {
            const error = await response.text();
            alert(`Error: ${error}`);
          }
        } catch (err) {
          console.error('Submission error:', err);
          alert('Error submitting lost item');
        }
      });
      
      // Handle found item submission
      document.getElementById('submitFound').addEventListener('click', async function() {
        const formData = new FormData();
        formData.append('itemName', document.getElementById('foundItemName').value);
        formData.append('foundLocation', document.getElementById('foundLocation').value);
        formData.append('dateFound', document.getElementById('dateFound').value);
        formData.append('description', document.getElementById('foundDescription').value);
        formData.append('contactInfo', document.getElementById('foundContactInfo').value);
        
        const imageInput = document.getElementById('foundImage');
        if (imageInput.files[0]) {
          formData.append('image', imageInput.files[0]);
        }
        
        try {
          const response = await fetch('/lost-and-found/found', {
            method: 'POST',
            body: formData,
            credentials: 'include'
          });
          
          if (response.ok) {
            const foundItem = await response.json();
            addItemToGallery(foundItem, 'found');
            const modal = bootstrap.Modal.getInstance(document.getElementById('foundModal'));
            modal.hide();
            document.getElementById('foundForm').reset();
          } else {
            const error = await response.text();
            alert(`Error: ${error}`);
          }
        } catch (err) {
          console.error('Submission error:', err);
          alert('Error submitting found item');
        }
      });
    });
    
    // Load items from server
    async function loadItems() {
      try {
        const response = await fetch('/lost-and-found/api/items', {
          credentials: 'include'
        });
        
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        const container = document.getElementById('itemsContainer');
        container.innerHTML = '';
        
        if (data.lostItems) {
          data.lostItems.forEach(item => addItemToGallery(item, 'lost'));
        }
        if (data.foundItems) {
          data.foundItems.forEach(item => addItemToGallery(item, 'found'));
        }
      } catch (err) {
        console.error('Error loading items:', err);
        alert('Failed to load items. Please try again later.');
      }
    }
    
    // Add item to gallery
    function addItemToGallery(item, type) {
      const container = document.getElementById('itemsContainer');
      if (!container) return;
      
      const col = document.createElement('div');
      col.className = 'col-md-6 col-lg-4 animate__animated animate__fadeIn';
      
      const card = document.createElement('div');
      card.className = 'card item-card';
      
      // Safe image handling
      let imageHtml = '';
      if (item.image && (item.image.url || item.image.path)) {
        const imageUrl = item.image.url || item.image.path;
        imageHtml = `
          <img src="${imageUrl}" class="card-img-top item-img" alt="${item.itemName || 'Item image'}">
        `;
      }
      
      // Button handling with null checks
      let buttonHtml = '';
      const contactInfo = item.contactInfo || 'Not provided';
      const postedBy = (item.postedBy && item.postedBy.username) || 'Unknown';
      
      if (type === 'lost') {
        buttonHtml = `
          <button class="btn btn-success found-btn" 
                  data-id="${item._id || ''}" 
                  data-contact="${contactInfo}" 
                  data-postedby="${postedBy}">
            Found?
          </button>
        `;
      } else {
        buttonHtml = `
          <button class="btn btn-primary its-yours-btn" 
                  data-id="${item._id || ''}" 
                  data-contact="${contactInfo}" 
                  data-postedby="${postedBy}">
            It's Yours?
          </button>
        `;
      }
      
      // Delete button with proper checks
      let deleteBtn = '';
      const currentUserId = '<%= typeof currentUser !== "undefined" && currentUser ? currentUser._id.toString() : "" %>';
      
      if (item.postedBy && item.postedBy._id && currentUserId && item.postedBy._id.toString() === currentUserId) {
        const publicId = (item.image && item.image.public_id) ? item.image.public_id : '';
        deleteBtn = `
          <button class="btn btn-danger btn-sm delete-btn" 
                  data-id="${item._id}" 
                  data-type="${type}"
                  data-public-id="${publicId}">
            Delete
          </button>
        `;
      }
      
      // Date handling
      let dateDisplay = '';
      const dateValue = type === 'lost' ? item.dateLost : item.dateFound;
      if (dateValue) {
        try {
          dateDisplay = new Date(dateValue).toLocaleDateString();
        } catch (e) {
          dateDisplay = 'Unknown date';
          console.error('Date parsing error:', e);
        }
      } else {
        dateDisplay = 'Unknown date';
      }
      
      // Location handling
      const location = type === 'lost' ? 
        (item.lastSeenLocation || 'Location not specified') : 
        (item.foundLocation || 'Location not specified');
      
      card.innerHTML = `
        ${imageHtml}
        <div class="card-body">
          <h5 class="card-title">${item.itemName || 'Unnamed item'}</h5>
          <p class="card-text">${type === 'lost' ? 'Lost Location' : 'Found Location'}: ${location}</p>
          <p class="card-text">Date: ${dateDisplay}</p>
          <p class="card-text">${item.description || 'No description provided'}</p>
          <div class="d-flex justify-content-between">
            ${buttonHtml}
            ${deleteBtn}
          </div>
        </div>
      `;
      
      col.appendChild(card);
      container.appendChild(col);
      
      // Add event listeners with null checks
      const foundBtn = col.querySelector('.found-btn');
      const yoursBtn = col.querySelector('.its-yours-btn');
      const deleteBtnEl = col.querySelector('.delete-btn');
      
      if (foundBtn) foundBtn.addEventListener('click', showContactInfo);
      if (yoursBtn) yoursBtn.addEventListener('click', showContactInfo);
      if (deleteBtnEl) deleteBtnEl.addEventListener('click', handleDelete);
    }
    
    // Handle delete action
    async function handleDelete() {
      if (!confirm('Are you sure you want to delete this item?')) return;
      
      const deleteBtn = this;
      const originalText = deleteBtn.innerHTML;
      
      // Add visual feedback
      deleteBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Deleting...';
      deleteBtn.disabled = true;
      
      try {
        const response = await fetch(`/lost-and-found/${this.dataset.type}/${this.dataset.id}`, {
          method: 'DELETE',
          credentials: 'include'
        });
        
        if (response.ok) {
          // Animate removal
          const colElement = this.closest('.col-md-6, .col-lg-4');
          if (colElement) {
            colElement.classList.add('animate__animated', 'animate__fadeOut');
            setTimeout(() => {
              if (colElement.parentNode) {
                colElement.remove();
              }
            }, 500);
          } else {
            loadItems();
          }
        } else {
          const error = await response.json();
          alert(`Error: ${error.message || 'Failed to delete item'}`);
          deleteBtn.innerHTML = originalText;
          deleteBtn.disabled = false;
        }
      } catch (err) {
        console.error('Delete error:', err);
        alert('Error deleting item');
        deleteBtn.innerHTML = originalText;
        deleteBtn.disabled = false;
      }
    }
    
    // Add this to the DOMContentLoaded event listener
    document.getElementById('myRequestsBtn').addEventListener('click', loadMyRequests);

    // Add this function to your script
    async function loadMyRequests() {
      try {
        const response = await fetch('/lost-and-found/api/my-items', {
          credentials: 'include'
        });
        
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        const container = document.getElementById('itemsContainer');
        container.innerHTML = '';
        
        if (data.lostItems) {
          data.lostItems.forEach(item => addItemToGallery(item, 'lost'));
        }
        if (data.foundItems) {
          data.foundItems.forEach(item => addItemToGallery(item, 'found'));
        }
        
        // Add a back button
        const backBtn = document.createElement('button');
        backBtn.className = 'btn btn-secondary mb-4 animate__animated animate__fadeIn';
        backBtn.textContent = 'Back to All Items';
        backBtn.addEventListener('click', loadItems);
        container.parentNode.insertBefore(backBtn, container);
        
      } catch (err) {
        console.error('Error loading my requests:', err);
        alert('Failed to load your items. Please try again later.');
      }
    }
    
    // Show contact info modal
    function showContactInfo(e) {
      const contactModalElement = document.getElementById('contactModal');
      if (!contactModalElement) return;
      
      const contactModal = new bootstrap.Modal(contactModalElement);
      const contactModalBody = document.getElementById('contactModalBody');
      
      if (contactModalBody) {
        contactModalBody.innerHTML = `
          <p><strong>Posted By:</strong> ${e.target.dataset.postedby || 'Unknown'}</p>
          <p><strong>Contact Info:</strong> ${e.target.dataset.contact || 'Not provided'}</p>
        `;
      }
      
      contactModal.show();
    }
  </script>
</body>
</html>