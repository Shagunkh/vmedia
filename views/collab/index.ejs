<% layout("/layouts/boilerplate") %>
<style>
/* Cosmic Space Theme */
:root {
  --cosmic-primary: #00d8ff;
  --cosmic-secondary: #008cff;
  --cosmic-accent: #ff008c;
  --cosmic-dark: #0a0b0f;
  --cosmic-darker: #05070a;
  --cosmic-nebula: #1a1c2b;
  --cosmic-stardust: rgba(255,255,255,0.05);
  
  --primary-gradient: linear-gradient(135deg, var(--cosmic-primary), var(--cosmic-secondary));
  --accent-gradient: linear-gradient(135deg, var(--cosmic-accent), #ff7b00);
  --cosmic-bg: radial-gradient(ellipse at bottom, var(--cosmic-darker) 0%, var(--cosmic-dark) 100%);
}

/* Cosmic Base Styles */
@font-face {
  font-family: 'Orbitron';
  src: url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;500;700;900&display=swap');
}

@font-face {
  font-family: 'Space Mono';
  src: url('https://fonts.googleapis.com/css2?family=Space+Mono:ital,wght@0,400;0,700;1,400;1,700&display=swap');
}

body {
  background: var(--cosmic-bg);
  color: white;
  font-family: 'Space Mono', monospace;
  min-height: 100vh;
  overflow-x: hidden;
  position: relative;
}

body::before {
  content: '';
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: 
    radial-gradient(circle at 20% 30%, rgba(0, 216, 255, 0.15) 0%, transparent 25%),
    radial-gradient(circle at 80% 70%, rgba(255, 0, 140, 0.15) 0%, transparent 25%);
  z-index: -1;
  animation: cosmicPulse 20s infinite alternate;
}

@keyframes cosmicPulse {
  0% { opacity: 0.3; }
  100% { opacity: 0.7; }
}

/* Cosmic Typography */
h1, h2, h3, h4, h5, h6 {
  font-family: 'Orbitron', sans-serif;
  text-transform: uppercase;
  letter-spacing: 2px;
}

/* Cosmic Header */
.cosmic-header {
  position: relative;
  padding: 5rem 0 3rem;
  text-align: center;
  overflow: hidden;
}

.cosmic-title {
  font-size: 5rem;
  font-weight: 900;
  margin: 0;
  background: linear-gradient(135deg, var(--cosmic-primary), var(--cosmic-secondary), var(--cosmic-accent));
  -webkit-background-clip: text;
  background-clip: text;
  color: transparent;
  position: relative;
  display: inline-block;
  animation: titleGlow 3s infinite alternate;
}

@keyframes titleGlow {
  0% { text-shadow: 0 0 10px rgba(0, 216, 255, 0.3); }
  100% { text-shadow: 0 0 30px rgba(0, 216, 255, 0.7); }
}

.cosmic-subtitle {
  font-size: 1.5rem;
  opacity: 0;
  transform: translateY(20px);
  animation: subtitleFadeIn 1s 0.5s forwards;
  position: relative;
}

@keyframes subtitleFadeIn {
  to { opacity: 0.8; transform: translateY(0); }
}

/* Cosmic Particles */
.cosmic-particle {
  position: absolute;
  border-radius: 50%;
  background: white;
  pointer-events: none;
  z-index: -1;
  animation: float infinite linear;
}

@keyframes float {
  0% { transform: translate(0, 0) rotate(0deg); opacity: 0; }
  10% { opacity: 1; }
  90% { opacity: 1; }
  100% { transform: translate(var(--tx, 100px), var(--ty, -100px)) rotate(360deg); opacity: 0; }
}

/* Cosmic Back Button */
.cosmic-back-btn {
 
  top: 2rem;
  left: 2rem;
  z-index: 1000;
  background: rgba(0, 136, 255, 0.2);
  backdrop-filter: blur(10px);
  border: 1px solid rgba(0, 216, 255, 0.3);
  color: white;
  padding: 0.75rem 1.5rem;
  border-radius: 50px;
  font-family: 'Orbitron', sans-serif;
  font-weight: 500;
  letter-spacing: 1px;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  transition: all 0.3s ease;
  margin-left: 12px;
  box-shadow: 0 0 20px rgba(0, 216, 255, 0.2);
}

.cosmic-back-btn:hover {
  background: rgba(0, 216, 255, 0.3);
  transform: translateX(-5px);
  box-shadow: 0 0 30px rgba(0, 216, 255, 0.4);
}

.cosmic-back-btn svg {
  transition: transform 0.3s ease;
}

.cosmic-back-btn:hover svg {
  transform: translateX(-3px);
}

/* Cosmic Create Button */
.cosmic-create-btn {
  background: var(--primary-gradient);
  border: none;
  color: white;
  padding: 1rem 2rem;
  font-family: 'Orbitron', sans-serif;
  font-weight: 700;
  letter-spacing: 2px;
  border-radius: 50px;
  cursor: pointer;
  position: relative;
  overflow: hidden;
  box-shadow: 0 0 30px rgba(0, 216, 255, 0.3);
  transition: all 0.3s ease;
  margin: 2rem auto;
  display: block;
  z-index: 10;
}

.cosmic-create-btn::before {
  content: '';
  position: absolute;
  top: -50%;
  left: -50%;
  width: 200%;
  height: 200%;
  background: linear-gradient(
    to bottom right,
    transparent 45%,
    rgba(255,255,255,0.3) 50%,
    transparent 55%
  );
  transform: rotate(45deg);
  transition: all 0.5s ease;
  opacity: 0;
}

.cosmic-create-btn:hover {
  transform: translateY(-3px);
  box-shadow: 0 0 50px rgba(0, 216, 255, 0.5);
}

.cosmic-create-btn:hover::before {
  animation: cosmicShine 1.5s ease;
}

@keyframes cosmicShine {
  0% { transform: rotate(45deg) translate(-30%, -30%); opacity: 0; }
  50% { opacity: 1; }
  100% { transform: rotate(45deg) translate(30%, 30%); opacity: 0; }
}

/* Cosmic Project Form */
.cosmic-form-container {
  max-width: 800px;
  margin: 0 auto;
  padding: 2rem;
  background: rgba(10, 12, 20, 0.7);
  backdrop-filter: blur(10px);
  border-radius: 20px;
  border: 1px solid rgba(0, 216, 255, 0.2);
  box-shadow: 0 0 50px rgba(0, 216, 255, 0.1);
  transform: scale(0.95);
  opacity: 0;
  transition: all 0.5s cubic-bezier(0.175, 0.885, 0.32, 1.275);
}

.cosmic-form-container.show {
  transform: scale(1);
  opacity: 1;
}

.cosmic-form-container .form-label {
  color: var(--cosmic-primary);
  font-family: 'Orbitron', sans-serif;
  letter-spacing: 1px;
  margin-bottom: 0.5rem;
}

.cosmic-form-container .form-control {
  background: rgba(0, 8, 20, 0.5);
  border: 1px solid rgba(0, 216, 255, 0.3);
  color: white;
  border-radius: 10px;
  padding: 1rem;
  transition: all 0.3s ease;
}

.cosmic-form-container .form-control:focus {
  background: rgba(0, 16, 32, 0.7);
  border-color: var(--cosmic-primary);
  box-shadow: 0 0 15px rgba(0, 216, 255, 0.3);
  color: white;
}

.cosmic-form-container textarea.form-control {
  min-height: 150px;
}

.cosmic-submit-btn {
  background: var(--accent-gradient);
  border: none;
  color: white;
  padding: 1rem 2rem;
  font-family: 'Orbitron', sans-serif;
  font-weight: 700;
  letter-spacing: 2px;
  border-radius: 50px;
  cursor: pointer;
  width: 100%;
  margin-top: 1.5rem;
  position: relative;
  overflow: hidden;
  transition: all 0.3s ease;
  box-shadow: 0 0 30px rgba(255, 0, 140, 0.2);
}

.cosmic-submit-btn:hover {
  transform: translateY(-3px);
  box-shadow: 0 0 50px rgba(255, 0, 140, 0.4);
}

.cosmic-submit-btn::after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, rgba(255,255,255,0.2), transparent);
  transform: translateX(-100%);
  transition: transform 0.6s ease;
}

.cosmic-submit-btn:hover::after {
  transform: translateX(100%);
}

/* Cosmic Project Grid */
.cosmic-project-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
  gap: 2rem;
  padding: 2rem;
  max-width: 1400px;
  margin: 0 auto;
}

/* Cosmic Project Card */
.cosmic-project-card {
  background: rgba(10, 12, 20, 0.6);
  backdrop-filter: blur(10px);
  border-radius: 20px;
  padding: 2rem;
  border: 1px solid rgba(0, 216, 255, 0.2);
  transition: all 0.5s cubic-bezier(0.175, 0.885, 0.32, 1.275);
  position: relative;
  overflow: hidden;
  opacity: 0;
  transform: translateY(20px);
  animation: cardFadeIn 0.6s forwards;
  box-shadow: 0 10px 30px -10px rgba(0, 0, 0, 0.3);
}

@keyframes cardFadeIn {
  to { opacity: 1; transform: translateY(0); }
}

.cosmic-project-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: radial-gradient(circle at 100% 0%, rgba(0, 216, 255, 0.1) 0%, transparent 50%);
  z-index: -1;
}

.cosmic-project-card:hover {
  transform: translateY(-10px) scale(1.02);
  box-shadow: 0 20px 50px -15px rgba(0, 216, 255, 0.3);
  border-color: rgba(0, 216, 255, 0.5);
}

.cosmic-project-card h4 {
  font-size: 1.5rem;
  margin-bottom: 1rem;
  color: white;
  position: relative;
  display: inline-block;
}

.cosmic-project-card h4::after {
  content: '';
  position: absolute;
  bottom: -8px;
  left: 0;
  width: 50px;
  height: 3px;
  background: var(--primary-gradient);
  border-radius: 3px;
}

.cosmic-project-card p {
  color: rgba(255,255,255,0.7);
  line-height: 1.6;
  margin-bottom: 1.5rem;
}

/* Cosmic Tags */
.cosmic-tags {
  display: flex;
  flex-wrap: wrap;
  gap: 0.5rem;
  margin-bottom: 1.5rem;
}

.cosmic-tag {
  background: rgba(0, 216, 255, 0.1);
  color: var(--cosmic-primary);
  padding: 0.35rem 1rem;
  border-radius: 50px;
  font-size: 0.8rem;
  font-weight: 500;
  letter-spacing: 0.5px;
  border: 1px solid rgba(0, 216, 255, 0.3);
  transition: all 0.3s ease;
}

.cosmic-tag:hover {
  background: rgba(0, 216, 255, 0.2);
  transform: translateY(-2px);
}

/* Cosmic Owner */
.cosmic-owner {
  display: flex;
  align-items: center;
  gap: 1rem;
  margin-bottom: 1.5rem;
}

.cosmic-owner-avatar {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  background: var(--primary-gradient);
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-weight: bold;
  font-family: 'Orbitron', sans-serif;
  box-shadow: 0 0 15px rgba(0, 216, 255, 0.3);
}

.cosmic-owner-name {
  color: white;
  font-weight: 500;
}

/* Cosmic Status */
.cosmic-status {
  padding: 0.75rem 1rem;
  border-radius: 8px;
  font-weight: 500;
  margin: 1rem 0;
  text-align: center;
  position: relative;
  overflow: hidden;
}

.cosmic-status::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255,255,255,0.1), transparent);
  transform: translateX(-100%);
  animation: shine 2s infinite;
}

@keyframes shine {
  100% { transform: translateX(100%); }
}

.cosmic-status-creator {
  background: rgba(0, 216, 255, 0.1);
  color: var(--cosmic-primary);
  border: 1px solid rgba(0, 216, 255, 0.3);
}

.cosmic-status-member {
  background: rgba(0, 255, 180, 0.1);
  color: #00ffb4;
  border: 1px solid rgba(0, 255, 180, 0.3);
}

.cosmic-status-full {
  background: rgba(255, 0, 140, 0.1);
  color: var(--cosmic-accent);
  border: 1px solid rgba(255, 0, 140, 0.3);
}

/* Cosmic Buttons */
.cosmic-btn {
  border: none;
  border-radius: 8px;
  padding: 0.75rem 1.5rem;
  font-family: 'Orbitron', sans-serif;
  font-weight: 500;
  letter-spacing: 1px;
  cursor: pointer;
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
}

.cosmic-btn-request {
  background: var(--primary-gradient);
  color: white;
  width: 100%;
  margin-top: 1rem;
  box-shadow: 0 0 20px rgba(0, 216, 255, 0.2);
}

.cosmic-btn-request:hover {
  transform: translateY(-3px);
  box-shadow: 0 0 30px rgba(0, 216, 255, 0.4);
}

.cosmic-btn-action {
  background: rgba(0, 216, 255, 0.1);
  color: var(--cosmic-primary);
  border: 1px solid rgba(0, 216, 255, 0.3);
  margin-right: 0.5rem;
  margin-bottom: 0.5rem;
}

.cosmic-btn-action:hover {
  background: rgba(0, 216, 255, 0.2);
  transform: translateY(-2px);
}

/* Cosmic Team Section */
.cosmic-team-section {
  margin-top: 1.5rem;
  padding-top: 1.5rem;
  border-top: 1px solid rgba(0, 216, 255, 0.1);
}

.cosmic-team-title {
  font-family: 'Orbitron', sans-serif;
  color: var(--cosmic-primary);
  margin-bottom: 1rem;
  font-size: 1rem;
  letter-spacing: 1px;
}

.cosmic-member-list {
  display: flex;
  flex-wrap: wrap;
  gap: 0.5rem;
}

.cosmic-member-avatar {
  width: 36px;
  height: 36px;
  border-radius: 50%;
  background: rgba(0, 216, 255, 0.1);
  display: flex;
  align-items: center;
  justify-content: center;
  color: var(--cosmic-primary);
  font-weight: bold;
  font-size: 0.9rem;
  border: 1px solid rgba(0, 216, 255, 0.3);
  transition: all 0.3s ease;
}

.cosmic-member-avatar:hover {
  transform: scale(1.1);
  background: rgba(0, 216, 255, 0.2);
  box-shadow: 0 0 15px rgba(0, 216, 255, 0.2);
}

/* Cosmic Chat Button */
.cosmic-chat-btn {
  background: transparent;
  color: var(--cosmic-primary);
  border: 1px solid rgba(0, 216, 255, 0.3);
  width: 100%;
  margin-top: 1rem;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
  transition: all 0.3s ease;
}

.cosmic-chat-btn:hover {
  background: rgba(0, 216, 255, 0.1);
  transform: translateY(-3px);
  box-shadow: 0 0 20px rgba(0, 216, 255, 0.2);
}

/* Cosmic Modal */
.cosmic-modal .modal-content {
  background: rgba(10, 12, 20, 0.95);
  backdrop-filter: blur(10px);
  border: 1px solid rgba(0, 216, 255, 0.3);
  border-radius: 20px;
  color: white;
}

.cosmic-modal .modal-header {
  border-bottom: 1px solid rgba(0, 216, 255, 0.2);
  background: rgba(0, 8, 20, 0.5);
}

.cosmic-modal .modal-title {
  color: var(--cosmic-primary);
  font-family: 'Orbitron', sans-serif;
  letter-spacing: 1px;
}

.cosmic-modal .btn-close {
  filter: invert(1);
}

.cosmic-modal #chatMessages {
  max-height: 400px;
  overflow-y: auto;
  padding: 1rem;
  margin-bottom: 1rem;
  background: rgba(0, 8, 20, 0.3);
  border-radius: 10px;
  border: 1px solid rgba(0, 216, 255, 0.2);
}

.cosmic-modal .message {
  padding: 0.75rem 1rem;
  margin-bottom: 0.75rem;
  background: rgba(0, 216, 255, 0.1);
  border-left: 3px solid var(--cosmic-primary);
  border-radius: 0 8px 8px 0;
  animation: messageFadeIn 0.3s ease-out;
}

@keyframes messageFadeIn {
  from { opacity: 0; transform: translateY(5px); }
  to { opacity: 1; transform: translateY(0); }
}

.cosmic-modal .message strong {
  color: var(--cosmic-primary);
}

.cosmic-modal #chatInput {
  background: rgba(0, 8, 20, 0.5);
  border: 1px solid rgba(0, 216, 255, 0.3);
  color: white;
  border-radius: 10px;
  padding: 1rem;
  resize: none;
}

.cosmic-modal #chatInput:focus {
  background: rgba(0, 16, 32, 0.7);
  border-color: var(--cosmic-primary);
  box-shadow: 0 0 15px rgba(0, 216, 255, 0.3);
  color: white;
}

.cosmic-modal .modal-footer {
  border-top: 1px solid rgba(0, 216, 255, 0.2);
}

/* Cosmic Animations */
@keyframes cosmicOrbit {
  0% { transform: rotate(0deg) translateX(150px) rotate(0deg); }
  100% { transform: rotate(360deg) translateX(150px) rotate(-360deg); }
}

/* Responsive Adjustments */
@media (max-width: 768px) {
  .cosmic-title {
    font-size: 3rem;
  }
  
  .cosmic-project-grid {
    grid-template-columns: 1fr;
    padding: 1rem;
  }
  
  .cosmic-back-btn {
    top: 1rem;
    left: 1rem;
    padding: 0.5rem 1rem;
    font-size: 0.9rem;
  }
  
  .cosmic-form-container {
    padding: 1.5rem;
  }
}
crisp-title {
  font-size: 4rem;
  font-weight: 800;
  background: linear-gradient(90deg, #00d8ff, #008cff);
  -webkit-background-clip: text;
  background-clip: text;
  color: transparent;
  text-shadow: 0 2px 10px rgba(0, 216, 255, 0.3);
  margin: 0;
}

/* Base hero section styles */
.hero-section {
  position: relative;
  min-height: 100vh;
  background-color: var(--color-darkest);
  overflow: hidden;
  display: flex;
  align-items: center;
  color: white;
  padding-top: 80px;
}

/* Animated background gradient */
.hero-bg-animation {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: var(--gradient-primary-animated);
  background-size: 400% 400%;
  animation: gradientBG 15s ease infinite;
  opacity: 0.1;
  z-index: 1;
}

@keyframes gradientBG {
  0% { background-position: 0% 50%; }
  50% { background-position: 100% 50%; }
  100% { background-position: 0% 50%; }
}

/* Particle network animation */
.particle-network-animation {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 2;
  opacity: 0.5;
}

/* Glowing orbs decoration */
.hero-orb {
  position: absolute;
  border-radius: 50%;
  filter: blur(60px);
  opacity: 0.3;
  z-index: 3;
}

.orb-1 {
  width: 300px;
  height: 300px;
  background: var(--color-primary);
  top: -100px;
  left: -100px;
  animation: float 12s ease-in-out infinite;
}

.orb-2 {
  width: 200px;
  height: 200px;
  background: var(--color-secondary);
  bottom: -50px;
  right: 20%;
  animation: float 8s ease-in-out infinite reverse;
}

.orb-3 {
  width: 150px;
  height: 150px;
  background: white;
  top: 40%;
  right: -50px;
  animation: float 10s ease-in-out infinite 2s;
}

@keyframes float {
  0% { transform: translate(0, 0) rotate(0deg); }
  50% { transform: translate(20px, 30px) rotate(5deg); }
  100% { transform: translate(0, 0) rotate(0deg); }
}

/* Hero content layout */
.hero-content {
  position: relative;
  z-index: 10;
  display: flex;
  align-items: center;
  justify-content: space-between;
  flex-wrap: wrap;
  gap: 40px;
}

.hero-text-wrapper {
  flex: 1;
  min-width: 300px;
  max-width: 600px;
  animation: fadeInUp 1s ease-out;
}

/* Animated title */
.hero-title {
  font-size: clamp(2.5rem, 5vw, 4.5rem);
  font-weight: 800;
 
  margin-bottom: 1.5rem;
  background: linear-gradient(to right, #fff, #c2e9fb);
  -webkit-background-clip: text;
  background-clip: text;
  color: transparent;
  position: relative;
}

.title-word {
  display: inline-block;
  opacity: 0;
  transform: translateY(30px);
}

.title-word-1 {
  animation: titleWordIn 0.8s ease-out 0.1s forwards;
}

.title-word-2 {
  animation: titleWordIn 0.8s ease-out 0.3s forwards;
}

.title-word-3 {
  animation: titleWordIn 0.8s ease-out 0.5s forwards;
}

.title-word-4 {
  animation: titleWordIn 0.8s ease-out 0.7s forwards;
  position: relative;
}

.title-word-4::after {
  content: '';
  position: absolute;
  bottom: -10px;
  left: 0;
  width: 100%;
  height: 4px;
  background: var(--gradient-primary);
  background-size: 200% auto;
  border-radius: 2px;
  animation: underlineGrow 0.8s ease-out 1.2s forwards, gradientSlide 3s ease infinite;
  transform-origin: left;
  transform: scaleX(0);
}

@keyframes titleWordIn {
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes underlineGrow {
  to {
    transform: scaleX(1);
  }
}

@keyframes gradientSlide {
  0% { background-position: 0% 50%; }
  50% { background-position: 100% 50%; }
  100% { background-position: 0% 50%; }
}

/* Animated subtitle */
.subtitle-letters {
  display: inline-block;
  opacity: 0;
  transform: translateY(20px);
  animation: subtitleIn 1s ease-out 1s forwards;
}

@keyframes subtitleIn {
  to {
    opacity: 0.9;
    transform: translateY(0);
  }
}

.hero-subtitle {
  font-size: 1.2rem;
  margin-bottom: 2.5rem;
  color: rgba(255, 255, 255, 0.8);
  max-width: 500px;
}

/* Button styles with hover effects */
.hero-buttons {
  display: flex;
  gap: 20px;
  flex-wrap: wrap;
  margin-left: 90px;
}

.btn {
  position: relative;
  padding: 12px 24px;
  border-radius: 50px;
  font-weight: 600;
  font-size: 1rem;
  text-decoration: none;
  transition: all 0.3s ease;
  overflow: hidden;
  border: none;
  display: inline-flex;
  align-items: center;
  z-index: 1;
}

.btn-premium {
  background: var(--gradient-primary);
  background-size: 200% auto;
  color: var(--color-darkest);
  box-shadow: 0 4px 15px rgba(0, 216, 255, 0.4);
  animation: gradientSlide 3s ease infinite;
}

.btn-outline-light {
  background: transparent;
  color: white;
  border: 2px solid rgba(255, 255, 255, 0.3);
  backdrop-filter: blur(5px);
}

.btn-hover-effect {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(255, 255, 255, 0.1);
  transform: translateY(100%);
  transition: transform 0.3s ease;
  z-index: -1;
  border-radius: 50px;
}

.btn:hover .btn-hover-effect {
  transform: translateY(0);
}

.btn-outline-light:hover {
  border-color: white;
  background: rgba(255, 255, 255, 0.05);
  transform: translateY(-3px);
}

.btn-premium:hover {
  transform: translateY(-3px);
  box-shadow: 0 8px 25px rgba(0, 216, 255, 0.6);
}

/* 3D room illustration */
.hero-illustration {
  flex: 1;
  min-width: 300px;
  max-width: 500px;
  perspective: 1000px;
  animation: fadeInRight 1s ease-out 0.3s both;
}

.room-3d {
  position: relative;
  width: 100%;
  height: 300px;
  transform-style: preserve-3d;
  animation: floatRoom 8s ease-in-out infinite;
}

@keyframes floatRoom {
  0%, 100% { transform: rotateY(0deg) translateY(0); }
  50% { transform: rotateY(5deg) translateY(-20px); }
}

.wall {
  position: absolute;
  background: rgba(255, 255, 255, 0.05);
  border: 1px solid rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(5px);
}

.wall-left {
  width: 50px;
  height: 200px;
  left: 0;
  bottom: 0;
  transform-origin: left;
  transform: rotateY(90deg);
}

.wall-back {
  width: 300px;
  height: 200px;
  left: 50px;
  bottom: 0;
}

.wall-right {
  width: 50px;
  height: 200px;
  left: 350px;
  bottom: 0;
  transform-origin: right;
  transform: rotateY(-90deg);
}

.floor {
  position: absolute;
  width: 400px;
  height: 300px;
  bottom: 0;
  left: 0;
  background: rgba(0, 0, 0, 0.3);
  transform-origin: bottom;
  transform: rotateX(90deg);
}

.roomie {
  position: absolute;
  width: 40px;
  height: 80px;
  border-radius: 20px;
  bottom: 0;
  background: var(--gradient-primary);
  animation: roomieFloat 4s ease-in-out infinite;
}

.roomie-1 {
  left: 100px;
  animation-delay: 0s;
}

.roomie-2 {
  left: 200px;
  animation-delay: 0.5s;
}

@keyframes roomieFloat {
  0%, 100% { transform: translateY(0); }
  50% { transform: translateY(0px); }
}

.furniture, .decor {
  position: absolute;
  background: rgba(255, 255, 255, 0.8);
  border-radius: 5px;
}

.desk {
  width: 80px;
  height: 50px;
  bottom: 20px;
  left: 150px;
}

.bed {
  width: 120px;
  height: 70px;
  bottom: 20px;
  right: 50px;
}

.plant {
  width: 20px;
  height: 40px;
  bottom: 20px;
  left: 80px;
  background: var(--color-primary);
}

/* Scroll indicator */
.scroll-indicator {
  position: absolute;
  bottom: 30px;
  left: 50%;
  transform: translateX(-50%);
  z-index: 10;
  animation: fadeIn 1s ease-out 1.5s both;
}

.mouse {
  width: 25px;
  height: 40px;
  border: 2px solid rgba(255, 255, 255, 0.5);
  border-radius: 13px;
  position: relative;
  margin: 0 auto;
}

.wheel {
  width: 4px;
  height: 8px;
  background: white;
  border-radius: 2px;
  position: absolute;
  top: 6px;
  left: 50%;
  transform: translateX(-50%);
  animation: scrollWheel 2s ease infinite;
}

.arrow {
  position: absolute;
  width: 8px;
  height: 8px;
  border-right: 2px solid white;
  border-bottom: 2px solid white;
  transform: rotate(45deg);
  left: 50%;
  margin-left: -4px;
  opacity: 0;
}

.arrow-1 {
  top: 12px;
  animation: scrollArrow 2s ease infinite;
}

.arrow-2 {
  top: 16px;
  animation: scrollArrow 2s ease infinite 0.2s;
}

.arrow-3 {
  top: 20px;
  animation: scrollArrow 2s ease infinite 0.4s;
}

@keyframes scrollWheel {
  0%, 30% { 
    top: 6px;
    opacity: 1;
  }
  80%, 100% { 
    top: 20px;
    opacity: 0;
  }
}

@keyframes scrollArrow {
  0%, 50% { 
    opacity: 0;
    transform: rotate(45deg) translate(0, 0);
  }
  60% { 
    opacity: 0.5;
  }
  100% { 
    opacity: 0;
    transform: rotate(45deg) translate(-5px, -5px);
  }
}

/* Entrance animations */
@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(30px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes fadeInRight {
  from {
    opacity: 0;
    transform: translateX(0);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .hero-content {
    flex-direction: column;
    text-align: center;
  }
  
  .hero-text-wrapper {
    max-width: 100%;
  }
  
  .hero-buttons {
    justify-content: center;
    margin-left: -1rem;
  }
  
  .hero-title::after {
    left: 50%;
   
    animation: underlineGrow 0.8s ease-out 1.2s forwards, gradientSlide 3s ease infinite;
  }
  
  .hero-illustration {
    margin-top: 50px;
  }
}
.crisp-title {
  font-size: 4rem;
  font-weight: 800;
  background: linear-gradient(90deg, #00d8ff, #008cff);
  -webkit-background-clip: text;
  background-clip: text;
  color: transparent;
  text-shadow: 0 2px 10px rgba(0, 216, 255, 0.3);
  margin: 0;
}
.hero-section {
    position: relative;
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
    padding: 2rem 1rem;
    overflow: hidden;
  }

  .hero-content {
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 2rem;
    position: relative;
    z-index: 10;
  }

  .hero-text-wrapper {
    width: 100%;
    max-width: 800px;
    margin: 0 auto;
  }

  .hero-title {
    font-size: clamp(2.5rem, 5vw, 4.5rem);
    font-weight: 800;
    background: linear-gradient(90deg, #00d8ff, #008cff);
    -webkit-background-clip: text;
    background-clip: text;
    color: transparent;
    margin-bottom: 1.5rem;
    line-height: 1.2;
  }

  .hero-subtitle {
    font-size: clamp(1rem, 2vw, 1.5rem);
    color: rgba(255, 255, 255, 0.9);
    margin-bottom: 2.5rem;
    max-width: 600px;
    margin-left: auto;
    margin-right: auto;
  }

  .hero-buttons {
    display: flex;
    gap: 1rem;
    justify-content: center;
    flex-wrap: wrap;
    width: 100%;
    max-width: 500px;
    margin: 0 auto;
  }

  /* Remove all underlines and decorative lines */
  .hero-title::after,
  .hero-subtitle::after,
  .title-word-4::after {
    display: none !important;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .hero-content {
      padding: 1rem;
    }
    
    .hero-buttons {
      flex-direction: column;
      align-items: center;
    }
    
    .hero-title {
      margin-bottom: 1rem;
    }
    
    .hero-subtitle {
      margin-bottom: 2rem;
    }
  }

/* Card Animation Delays */
.cosmic-project-card:nth-child(1) { animation-delay: 0.1s; }
.cosmic-project-card:nth-child(2) { animation-delay: 0.2s; }
.cosmic-project-card:nth-child(3) { animation-delay: 0.3s; }
.cosmic-project-card:nth-child(4) { animation-delay: 0.4s; }
.cosmic-project-card:nth-child(5) { animation-delay: 0.5s; }
.cosmic-project-card:nth-child(6) { animation-delay: 0.6s; }

</style>

<!-- Cosmic Background Elements -->
<div class="cosmic-background">
  <!-- These will be populated by JavaScript -->
</div>
<BR>
<!-- Cosmic Header -->
<header class="cosmic-header">
  <button class="cosmic-back-btn" onclick="window.location.href='/'">
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
      <path fill-rule="evenodd" d="M15 8a.5.5 0 0 0-.5-.5H2.707l3.147-3.146a.5.5 0 1 0-.708-.708l-4 4a.5.5 0 0 0 0 .708l4 4a.5.5 0 0 0 .708-.708L2.707 8.5H14.5A.5.5 0 0 0 15 8z"/>
    </svg>
    Back
  </button>
  <br><br>
  <h1 class=" crisp-title">
        <span class="title-word title-word-1 crisp-title">Project</span>
        <span class="title-word title-word-2 crisp-title">Collab</span>
        </h1>
        
  <p class="cosmic-subtitle">Where cosmic ideas converge and stellar teams are born</p>
</header>

<!-- Create Project Button -->
<% if (user) { %>
  <button class="cosmic-create-btn" data-bs-toggle="collapse" data-bs-target="#cosmicProjectForm">
    CREATE NEW PROJECT
    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 16 16" style="margin-left: 8px;">
      <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z"/>
    </svg>
  </button>
  
  <!-- Project Form -->
  <div class="cosmic-form-container collapse" id="cosmicProjectForm">
    <form method="POST" action="/collab/submit">
      <div class="mb-3">
        <label class="form-label">PROJECT TITLE</label>
        <input type="text" name="title" class="form-control" required>
      </div>
      <div class="mb-3">
        <label class="form-label">DESCRIPTION</label>
        <textarea name="description" class="form-control" rows="3" required></textarea>
      </div>
      <div class="mb-3">
        <label class="form-label">TAGS (comma-separated)</label>
        <input type="text" name="tags" class="form-control" required>
      </div>
      <div class="mb-3">
        <label class="form-label">TEAM SIZE</label>
        <input type="number" name="teamSize" class="form-control" required min="1">
      </div>
      <button type="submit" class="cosmic-submit-btn">LAUNCH PROJECT</button>
    </form>
  </div>
<% } %>

<!-- Project Grid -->
<div class="cosmic-project-grid">
  <% projects.forEach((p, index) => { %>
    <% const isTeamFull = p.teamMembers.length >= p.teamSize; %>
    <div class="cosmic-project-card">
      <h4><%= p.title %></h4>
      <p><%= p.description %></p>

      <div class="cosmic-tags">
        <% p.tags.forEach(tag => { %>
          <span class="cosmic-tag"><%= tag %></span>
        <% }) %>
      </div>

      <% if (p.creator) { %>
        <div class="cosmic-owner">
          <div class="cosmic-owner-avatar"><%= p.creator.username.charAt(0).toUpperCase() %></div>
          <span class="cosmic-owner-name">Created by <%= p.creator.username %></span>
        </div>
      <% } else { %>
        <div class="cosmic-owner">
          <div class="cosmic-owner-avatar">?</div>
          <span class="cosmic-owner-name">Creator unknown</span>
        </div>
      <% } %>

      <!-- Show Join Button or Status -->
      <% if (user && p.creator && user._id.toString() !== p.creator._id.toString()) { %>
        <% if (isTeamFull) { %>
          <div class="cosmic-status cosmic-status-full">TEAM FULL</div>
        <% } else if (
          !p.joinRequests.some(u => u._id.toString() === user._id.toString()) &&
          !p.teamMembers.some(u => u._id.toString() === user._id.toString())
        ) { %>
          <form method="POST" action="/collab/join/<%= p._id %>">
            <button type="submit" class="cosmic-btn cosmic-btn-request">REQUEST TO JOIN</button>
          </form>
        <% } else { %>
          <div class="cosmic-status <%= p.teamMembers.some(u => u._id.toString() === user._id.toString()) ? 'cosmic-status-member' : 'cosmic-status-creator' %>">
            YOU'RE <%= p.teamMembers.some(u => u._id.toString() === user._id.toString()) ? 'A TEAM MEMBER' : 'ALREADY REQUESTED' %>
          </div>
        <% } %>
      <% } else if (user) { %>
        <div class="cosmic-status cosmic-status-creator">YOU ARE THE PROJECT CREATOR</div>
      <% } %>

      <!-- Join Requests for Creator -->
      <% if (user && p.creator && user._id.toString() === p.creator._id.toString()) { %>
        <div class="cosmic-team-section">
          <h5 class="cosmic-team-title">JOIN REQUESTS</h5>
          <% if (p.joinRequests.length === 0) { %>
            <p>No requests yet.</p>
          <% } else { %>
            <% p.joinRequests.forEach(reqUser => { %>
              <form method="POST" action="/collab/handle-request/<%= p._id %>/<%= reqUser._id %>" class="d-inline">
                <span><%= reqUser.username %></span>&nbsp;&nbsp;
                <button name="action" value="accept" class="cosmic-btn cosmic-btn-action">ACCEPT</button>
                <button name="action" value="reject" class="cosmic-btn cosmic-btn-action">REJECT</button><br><br>
              </form>
            <% }) %>
          <% } %>
        </div>
      <% } %>

      <!-- Team Members Display -->
      <% if (p.teamMembers.length > 0) { %>
        <div class="cosmic-team-section">
          <h5 class="cosmic-team-title">TEAM MEMBERS (<%= p.teamMembers.length %> / <%= p.teamSize %>)</h5>
          <div class="cosmic-member-list">
            <% p.teamMembers.forEach(member => { %>
              <div class="cosmic-member-avatar" title="<%= member.username %>">
                <%= member.username.charAt(0).toUpperCase() %>
              </div>
            <% }) %>
          </div>
        </div>
      <% } %>

      <!-- Team Chat Box -->
      <% if (isTeamFull && user && (p.creator._id.toString() === user._id.toString() || p.teamMembers.some(u => u._id.toString() === user._id.toString()))) { %>
        <button 
          class="cosmic-btn cosmic-chat-btn open-chat-btn" 
          data-bs-toggle="modal" 
          data-bs-target="#cosmicChatModal" 
          data-project-id="<%= p._id %>" 
          data-project-title="<%= p.title %>">
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
            <path d="M14 1a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1h-2.5a2 2 0 0 0-1.6.8L8 14.333 6.1 11.8a2 2 0 0 0-1.6-.8H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h2.5a1 1 0 0 1 .8.4l1.9 2.533a1 1 0 0 0 1.6 0l1.9-2.533a1 1 0 0 1 .8-.4H14a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z"/>
          </svg>
          OPEN TEAM CHAT
        </button>
      <% } %>
    </div>
  <% }); %>
</div>

<!-- Cosmic Chat Modal -->
<div class="modal fade cosmic-modal" id="cosmicChatModal" tabindex="-1" aria-labelledby="cosmicChatModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="cosmicChatModalLabel">TEAM CHAT</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div id="chatMessages">
          <!-- Messages will be loaded here dynamically -->
        </div>
        <form id="chatForm">
          <textarea id="chatInput" class="form-control mb-3" rows="3" placeholder="Type your message..."></textarea>
          <button type="submit" class="cosmic-btn cosmic-btn-request">SEND MESSAGE</button>
        </form>
      </div>
    </div>
  </div>
</div>

<script>
// Create cosmic background elements
document.addEventListener('DOMContentLoaded', function() {
  const cosmicBackground = document.querySelector('.cosmic-background');
  
  // Create stars
  for (let i = 0; i < 100; i++) {
    const star = document.createElement('div');
    star.className = 'cosmic-particle';
    star.style.width = `${Math.random() * 3 + 1}px`;
    star.style.height = star.style.width;
    star.style.left = `${Math.random() * 100}%`;
    star.style.top = `${Math.random() * 100}%`;
    star.style.opacity = Math.random();
    star.style.animationDuration = `${Math.random() * 50 + 50}s`;
    star.style.animationDelay = `${Math.random() * 10}s`;
    cosmicBackground.appendChild(star);
  }
  
  // Create larger cosmic elements
  for (let i = 0; i < 10; i++) {
    const element = document.createElement('div');
    element.className = 'cosmic-particle';
    element.style.width = `${Math.random() * 10 + 5}px`;
    element.style.height = element.style.width;
    element.style.left = `${Math.random() * 100}%`;
    element.style.top = `${Math.random() * 100}%`;
    element.style.background = `radial-gradient(circle, rgba(0,216,255,0.8) 0%, rgba(0,216,255,0) 70%)`;
    element.style.boxShadow = `0 0 ${Math.random() * 20 + 10}px rgba(0,216,255,0.8)`;
    element.style.animationDuration = `${Math.random() * 100 + 100}s`;
    element.style.animationDelay = `${Math.random() * 20}s`;
    cosmicBackground.appendChild(element);
  }
  
  // Form toggle animation
  const createBtn = document.querySelector('.cosmic-create-btn');
  const projectForm = document.getElementById('cosmicProjectForm');
  
  if (createBtn && projectForm) {
    createBtn.addEventListener('click', function() {
      if (projectForm.classList.contains('show')) {
        projectForm.classList.add('show');
        setTimeout(() => {
          projectForm.classList.add('show');
        }, 10);
      }
    });
  }
  
  // Chat functionality
  const chatMessages = document.getElementById('chatMessages');
  const chatForm = document.getElementById('chatForm');
  const chatInput = document.getElementById('chatInput');
  let currentProjectId = null;
  let chatModal = null;

  // Initialize Bootstrap modal
  if (document.getElementById('cosmicChatModal')) {
    chatModal = new bootstrap.Modal(document.getElementById('cosmicChatModal'));
  }

  document.querySelectorAll('.open-chat-btn').forEach(btn => {
    btn.addEventListener('click', async () => {
      currentProjectId = btn.dataset.projectId;
      document.getElementById('cosmicChatModalLabel').innerText = `TEAM CHAT - ${btn.dataset.projectTitle}`;
      chatMessages.innerHTML = '<div class="text-center">Loading messages...</div>';

      try {
        const res = await fetch(`/collabmessage/chat/${currentProjectId}`);
        if (!res.ok) throw new Error('Failed to load messages');
        
        const data = await res.json();
        chatMessages.innerHTML = data.messages.map(msg => `
          <div class="message"><strong>${msg.user.username}:</strong> ${msg.text}</div>
        `).join('');
        chatMessages.scrollTop = chatMessages.scrollHeight;
      } catch (error) {
        console.error('Error loading messages:', error);
        chatMessages.innerHTML = '<div class="text-danger">Error loading messages</div>';
      }
    });
  });

  chatForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    const text = chatInput.value.trim();
    if (!text) return;

    try {
      const res = await fetch(`/collabmessage/chat/${currentProjectId}`, {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ text })
      });

      if (!res.ok) throw new Error('Failed to send message');
      
      const newMsg = await res.json();
      chatMessages.innerHTML += `
        <div class="message"><strong>${newMsg.user.username}:</strong> ${newMsg.text}</div>
      `;
      chatInput.value = '';
      chatMessages.scrollTop = chatMessages.scrollHeight;
    } catch (error) {
      console.error('Error sending message:', error);
      const errorDiv = document.createElement('div');
      errorDiv.className = 'text-danger';
      errorDiv.textContent = 'Failed to send message';
      chatMessages.appendChild(errorDiv);
    }
  });
  
  // Animate elements on scroll
  const animateOnScroll = () => {
    const elements = document.querySelectorAll('.cosmic-project-card');
    elements.forEach(el => {
      const rect = el.getBoundingClientRect();
      const isVisible = (rect.top <= window.innerHeight * 0.75);
      if (isVisible) {
        el.style.animationPlayState = 'running';
      }
    });
  };
  
  window.addEventListener('scroll', animateOnScroll);
  animateOnScroll(); // Run once on load
});
</script>
